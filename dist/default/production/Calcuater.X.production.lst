

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Aug 02 16:45:23 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=3
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=3
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=3
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=3
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48   000000                     
    49                           ; Generated 23/03/2023 GMT
    50                           ; 
    51                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution. Publication is not required when
    65                           ;        this file is used in an embedded application.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4620 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83   000000                     
    84                           	psect	idataCOMRAM
    85   002442                     __pidataCOMRAM:
    86                           	callstack 0
    87                           
    88                           ;initializer for _lat_reg
    89   002442  89                 	db	137
    90   002443  0F                 	db	15
    91   002444  8A                 	db	138
    92   002445  0F                 	db	15
    93   002446  8B                 	db	139
    94   002447  0F                 	db	15
    95   002448  8C                 	db	140
    96   002449  0F                 	db	15
    97   00244A  8D                 	db	141
    98   00244B  0F                 	db	15
    99                           
   100                           ;initializer for _lcd_obj
   101   00244C  28                 	db	40
   102   00244D  30                 	db	48
   103   00244E  02                 	db	2
   104   00244F  0A                 	db	10
   105   002450  12                 	db	18
   106   002451  1A                 	db	26
   107   002452  22                 	db	34
   108   002453  2A                 	db	42
   109   002454  32                 	db	50
   110   002455  3A                 	db	58
   111                           
   112                           ;initializer for _keypad_obj
   113   002456  03                 	db	3
   114   002457  0B                 	db	11
   115   002458  13                 	db	19
   116   002459  1B                 	db	27
   117   00245A  63                 	db	99
   118   00245B  6B                 	db	107
   119   00245C  73                 	db	115
   120   00245D  7B                 	db	123
   121                           
   122                           	psect	idataBANK0
   123   00241E                     __pidataBANK0:
   124                           	callstack 0
   125                           
   126                           ;initializer for keypad_u8check_press@F3072
   127   00241E  37                 	db	55
   128   00241F  38                 	db	56
   129   002420  39                 	db	57
   130   002421  2F                 	db	47
   131   002422  34                 	db	52
   132   002423  35                 	db	53
   133   002424  36                 	db	54
   134   002425  2A                 	db	42
   135   002426  31                 	db	49
   136   002427  32                 	db	50
   137   002428  33                 	db	51
   138   002429  2D                 	db	45
   139   00242A  41                 	db	65
   140   00242B  30                 	db	48
   141   00242C  3D                 	db	61
   142   00242D  2B                 	db	43
   143                           
   144                           ;initializer for _port_reg
   145   00242E  80                 	db	128
   146   00242F  0F                 	db	15
   147   002430  81                 	db	129
   148   002431  0F                 	db	15
   149   002432  82                 	db	130
   150   002433  0F                 	db	15
   151   002434  83                 	db	131
   152   002435  0F                 	db	15
   153   002436  84                 	db	132
   154   002437  0F                 	db	15
   155                           
   156                           ;initializer for _tris_reg
   157   002438  92                 	db	146
   158   002439  0F                 	db	15
   159   00243A  93                 	db	147
   160   00243B  0F                 	db	15
   161   00243C  94                 	db	148
   162   00243D  0F                 	db	15
   163   00243E  95                 	db	149
   164   00243F  0F                 	db	15
   165   002440  96                 	db	150
   166   002441  0F                 	db	15
   167                           
   168                           	psect	smallconst
   169   001000                     __psmallconst:
   170                           	callstack 0
   171   001000  00                 	db	0
   172   001001                     _btn_values:
   173                           	callstack 0
   174   001001  37                 	db	55
   175   001002  38                 	db	56
   176   001003  39                 	db	57
   177   001004  2F                 	db	47
   178   001005  34                 	db	52
   179   001006  35                 	db	53
   180   001007  36                 	db	54
   181   001008  2A                 	db	42
   182   001009  31                 	db	49
   183   00100A  32                 	db	50
   184   00100B  33                 	db	51
   185   00100C  2D                 	db	45
   186   00100D  23                 	db	35
   187   00100E  30                 	db	48
   188   00100F  3D                 	db	61
   189   001010  2B                 	db	43
   190   001011                     __end_of_btn_values:
   191                           	callstack 0
   192   001011                     STR_1:
   193   001011  25                 	db	37
   194   001012  69                 	db	105	;'i'
   195   001013  00                 	db	0
   196   001014  00                 	db	0	; dummy byte at the end
   197   000000                     
   198                           	psect	nvCOMRAM
   199   00007E                     __pnvCOMRAM:
   200                           	callstack 0
   201   00007E                     _ret:
   202                           	callstack 0
   203   00007E                     	ds	1
   204   00007F                     _first_digit1:
   205                           	callstack 0
   206   00007F                     	ds	1
   207   000000                     _PORTE	set	3972
   208   000000                     _PORTD	set	3971
   209   000000                     _PORTC	set	3970
   210   000000                     _PORTB	set	3969
   211   000000                     _PORTA	set	3968
   212   000000                     _LATA	set	3977
   213   000000                     _TRISA	set	3986
   214   000000                     _TRISE	set	3990
   215   000000                     _TRISD	set	3989
   216   000000                     _TRISC	set	3988
   217   000000                     _TRISB	set	3987
   218   000000                     _LATE	set	3981
   219   000000                     _LATD	set	3980
   220   000000                     _LATC	set	3979
   221   000000                     _LATB	set	3978
   222                           
   223                           ; #config settings
   224                           
   225                           	psect	cinit
   226   001FB4                     __pcinit:
   227                           	callstack 0
   228   001FB4                     start_initialization:
   229                           	callstack 0
   230   001FB4                     __initialization:
   231                           	callstack 0
   232                           
   233                           ; Initialize objects allocated to BANK0 (36 bytes)
   234                           ; load TBLPTR registers with __pidataBANK0
   235   001FB4  0E1E               	movlw	low __pidataBANK0
   236   001FB6  6EF6               	movwf	tblptrl,c
   237   001FB8  0E24               	movlw	high __pidataBANK0
   238   001FBA  6EF7               	movwf	tblptrh,c
   239   001FBC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   240   001FBE  6EF8               	movwf	tblptru,c
   241   001FC0  EE00  F0B5         	lfsr	0,__pdataBANK0
   242   001FC4  EE10 F024          	lfsr	1,36
   243   001FC8                     copy_data0:
   244   001FC8  0009               	tblrd		*+
   245   001FCA  CFF5 FFEE          	movff	tablat,postinc0
   246   001FCE  50E5               	movf	postdec1,w,c
   247   001FD0  50E1               	movf	fsr1l,w,c
   248   001FD2  E1FA               	bnz	copy_data0
   249                           
   250                           ; Initialize objects allocated to COMRAM (28 bytes)
   251                           ; load TBLPTR registers with __pidataCOMRAM
   252   001FD4  0E42               	movlw	low __pidataCOMRAM
   253   001FD6  6EF6               	movwf	tblptrl,c
   254   001FD8  0E24               	movlw	high __pidataCOMRAM
   255   001FDA  6EF7               	movwf	tblptrh,c
   256   001FDC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   257   001FDE  6EF8               	movwf	tblptru,c
   258   001FE0  EE00  F062         	lfsr	0,__pdataCOMRAM
   259   001FE4  EE10 F01C          	lfsr	1,28
   260   001FE8                     copy_data1:
   261   001FE8  0009               	tblrd		*+
   262   001FEA  CFF5 FFEE          	movff	tablat,postinc0
   263   001FEE  50E5               	movf	postdec1,w,c
   264   001FF0  50E1               	movf	fsr1l,w,c
   265   001FF2  E1FA               	bnz	copy_data1
   266                           
   267                           ; Clear objects allocated to BANK0 (53 bytes)
   268   001FF4  EE00  F080         	lfsr	0,__pbssBANK0
   269   001FF8  0E35               	movlw	53
   270   001FFA                     clear_0:
   271   001FFA  6AEE               	clrf	postinc0,c
   272   001FFC  06E8               	decf	wreg,f,c
   273   001FFE  E1FD               	bnz	clear_0
   274                           
   275                           ; Clear objects allocated to COMRAM (30 bytes)
   276   002000  EE00  F044         	lfsr	0,__pbssCOMRAM
   277   002004  0E1E               	movlw	30
   278   002006                     clear_1:
   279   002006  6AEE               	clrf	postinc0,c
   280   002008  06E8               	decf	wreg,f,c
   281   00200A  E1FD               	bnz	clear_1
   282   00200C                     end_of_initialization:
   283                           	callstack 0
   284   00200C                     __end_of__initialization:
   285                           	callstack 0
   286   00200C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   287   00200E  6EF8               	movwf	tblptru,c
   288   002010  0100               	movlb	0
   289   002012  EF0B  F008         	goto	_main	;jump to C main() function
   290                           
   291                           	psect	bssCOMRAM
   292   000044                     __pbssCOMRAM:
   293                           	callstack 0
   294   000044                     _width:
   295                           	callstack 0
   296   000044                     	ds	2
   297   000046                     _prec:
   298                           	callstack 0
   299   000046                     	ds	2
   300   000048                     _result:
   301                           	callstack 0
   302   000048                     	ds	2
   303   00004A                     _flags:
   304                           	callstack 0
   305   00004A                     	ds	1
   306   00004B                     _retpad:
   307                           	callstack 0
   308   00004B                     	ds	1
   309   00004C                     _value:
   310                           	callstack 0
   311   00004C                     	ds	1
   312   00004D                     _keybad_value:
   313                           	callstack 0
   314   00004D                     	ds	1
   315   00004E                     _str:
   316                           	callstack 0
   317   00004E                     	ds	14
   318   00005C                     _on_off:
   319                           	callstack 0
   320   00005C                     	ds	1
   321   00005D                     _asignment:
   322                           	callstack 0
   323   00005D                     	ds	1
   324   00005E                     _operator:
   325                           	callstack 0
   326   00005E                     	ds	1
   327   00005F                     _second_digit2:
   328                           	callstack 0
   329   00005F                     	ds	1
   330   000060                     _first_digit2:
   331                           	callstack 0
   332   000060                     	ds	1
   333   000061                     _second_digit1:
   334                           	callstack 0
   335   000061                     	ds	1
   336                           
   337                           	psect	dataCOMRAM
   338   000062                     __pdataCOMRAM:
   339                           	callstack 0
   340   000062                     _lat_reg:
   341                           	callstack 0
   342   000062                     	ds	10
   343   00006C                     _lcd_obj:
   344                           	callstack 0
   345   00006C                     	ds	10
   346   000076                     _keypad_obj:
   347                           	callstack 0
   348   000076                     	ds	8
   349                           
   350                           	psect	bssBANK0
   351   000080                     __pbssBANK0:
   352                           	callstack 0
   353   000080                     _dbuf:
   354                           	callstack 0
   355   000080                     	ds	32
   356   0000A0                     	ds	11
   357   0000AB                     	ds	6
   358   0000B1                     	ds	4
   359                           
   360                           	psect	dataBANK0
   361   0000B5                     __pdataBANK0:
   362                           	callstack 0
   363   0000B5                     keypad_u8check_press@F3072:
   364                           	callstack 0
   365   0000B5                     	ds	16
   366   0000C5                     _port_reg:
   367                           	callstack 0
   368   0000C5                     	ds	10
   369   0000CF                     _tris_reg:
   370                           	callstack 0
   371   0000CF                     	ds	10
   372                           
   373                           	psect	cstackCOMRAM
   374   000001                     __pcstackCOMRAM:
   375                           	callstack 0
   376   000001                     ?___awdiv:
   377                           	callstack 0
   378   000001                     ?___awmod:
   379                           	callstack 0
   380   000001                     gpio_pin_direction_init@_pin_config:
   381                           	callstack 0
   382   000001                     gpio_pin_write_logic@_pin_config:
   383                           	callstack 0
   384   000001                     gpio_pin_read_logic@_pin_config:
   385                           	callstack 0
   386   000001                     ___lbdiv@divisor:
   387                           	callstack 0
   388   000001                     memset@dest:
   389                           	callstack 0
   390   000001                     ___awdiv@dividend:
   391                           	callstack 0
   392   000001                     ___awmod@dividend:
   393                           	callstack 0
   394   000001                     fputc@c:
   395                           	callstack 0
   396                           
   397                           ; 2 bytes @ 0x0
   398   000001                     	ds	1
   399   000002                     ??_gpio_pin_direction_init:
   400   000002                     gpio_pin_write_logic@logic:
   401                           	callstack 0
   402   000002                     gpio_pin_read_logic@logic:
   403                           	callstack 0
   404   000002                     ___lbdiv@dividend:
   405                           	callstack 0
   406   000002                     memset@c:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x1
   410   000002                     	ds	1
   411   000003                     ??_gpio_pin_write_logic:
   412   000003                     ??_gpio_pin_read_logic:
   413   000003                     ___lbdiv@counter:
   414                           	callstack 0
   415   000003                     fputc@fp:
   416                           	callstack 0
   417   000003                     ___awdiv@divisor:
   418                           	callstack 0
   419   000003                     ___awmod@divisor:
   420                           	callstack 0
   421                           
   422                           ; 2 bytes @ 0x2
   423   000003                     	ds	1
   424   000004                     ??_fputc:
   425   000004                     ___lbdiv@quotient:
   426                           	callstack 0
   427   000004                     memset@n:
   428                           	callstack 0
   429                           
   430                           ; 2 bytes @ 0x3
   431   000004                     	ds	1
   432   000005                     ___awdiv@counter:
   433                           	callstack 0
   434   000005                     ___awmod@counter:
   435                           	callstack 0
   436                           
   437                           ; 1 bytes @ 0x4
   438   000005                     	ds	1
   439   000006                     ___awdiv@sign:
   440                           	callstack 0
   441   000006                     ___awmod@sign:
   442                           	callstack 0
   443   000006                     memset@p:
   444                           	callstack 0
   445                           
   446                           ; 1 bytes @ 0x5
   447   000006                     	ds	1
   448   000007                     ?_abs:
   449                           	callstack 0
   450   000007                     gpio_pin_direction_init@ret:
   451                           	callstack 0
   452   000007                     gpio_pin_read_logic@ret:
   453                           	callstack 0
   454   000007                     ___awdiv@quotient:
   455                           	callstack 0
   456   000007                     abs@a:
   457                           	callstack 0
   458                           
   459                           ; 2 bytes @ 0x6
   460   000007                     	ds	1
   461   000008                     gpio_pin_write_logic@ret:
   462                           	callstack 0
   463                           
   464                           ; 1 bytes @ 0x7
   465   000008                     	ds	1
   466   000009                     ??_abs:
   467   000009                     keypad_init@keypad_obj:
   468                           	callstack 0
   469   000009                     keypad_get_value@keypad_obj:
   470                           	callstack 0
   471   000009                     lcd_8bit_send_enable@lcd:
   472                           	callstack 0
   473                           
   474                           ; 1 bytes @ 0x8
   475   000009                     	ds	1
   476   00000A                     keypad_init@ret:
   477                           	callstack 0
   478   00000A                     keypad_get_value@value:
   479                           	callstack 0
   480   00000A                     lcd_8bit_send_enable@ret:
   481                           	callstack 0
   482                           
   483                           ; 1 bytes @ 0x9
   484   00000A                     	ds	1
   485   00000B                     ??_keypad_get_value:
   486   00000B                     keypad_init@c_counter:
   487                           	callstack 0
   488   00000B                     lcd_8bit_send_command@lcd:
   489                           	callstack 0
   490   00000B                     lcd_8bit_send_char_data@lcd:
   491                           	callstack 0
   492   00000B                     vfpfcnvrt@fp:
   493                           	callstack 0
   494                           
   495                           ; 1 bytes @ 0xA
   496   00000B                     	ds	1
   497   00000C                     keypad_init@r_counter:
   498                           	callstack 0
   499   00000C                     keypad_get_value@ret:
   500                           	callstack 0
   501   00000C                     lcd_8bit_send_command@command:
   502                           	callstack 0
   503   00000C                     lcd_8bit_send_char_data@data:
   504                           	callstack 0
   505   00000C                     vfpfcnvrt@fmt:
   506                           	callstack 0
   507                           
   508                           ; 1 bytes @ 0xB
   509   00000C                     	ds	1
   510   00000D                     ??_lcd_8bit_send_command:
   511   00000D                     ??_lcd_8bit_send_char_data:
   512   00000D                     keypad_get_value@col_logic:
   513                           	callstack 0
   514   00000D                     vfpfcnvrt@ap:
   515                           	callstack 0
   516                           
   517                           ; 1 bytes @ 0xC
   518   00000D                     	ds	1
   519   00000E                     ??_vfpfcnvrt:
   520   00000E                     keypad_get_value@l_counter:
   521                           	callstack 0
   522                           
   523                           ; 1 bytes @ 0xD
   524   00000E                     	ds	1
   525   00000F                     keypad_get_value@r_counter:
   526                           	callstack 0
   527   00000F                     lcd_8bit_send_command@ret:
   528                           	callstack 0
   529   00000F                     lcd_8bit_send_char_data@ret:
   530                           	callstack 0
   531   00000F                     vfpfcnvrt@done:
   532                           	callstack 0
   533                           
   534                           ; 1 bytes @ 0xE
   535   00000F                     	ds	1
   536   000010                     keypad_get_value@c_counter:
   537                           	callstack 0
   538   000010                     lcd_8bit_send_command@count:
   539                           	callstack 0
   540   000010                     lcd_8bit_send_char_data@count:
   541                           	callstack 0
   542   000010                     vfpfcnvrt@cp:
   543                           	callstack 0
   544                           
   545                           ; 1 bytes @ 0xF
   546   000010                     	ds	1
   547   000011                     ??_clear_lcd:
   548   000011                     lcd_8bit_init@lcd:
   549                           	callstack 0
   550   000011                     lcd_8bit_send_string@lcd:
   551                           	callstack 0
   552   000011                     lcd_8bit_set_cursor@lcd:
   553                           	callstack 0
   554   000011                     vfpfcnvrt@convarg:
   555                           	callstack 0
   556                           
   557                           ; 4 bytes @ 0x10
   558   000011                     	ds	1
   559   000012                     ??_lcd_8bit_init:
   560   000012                     lcd_8bit_send_string@str:
   561                           	callstack 0
   562   000012                     lcd_8bit_set_cursor@row:
   563                           	callstack 0
   564                           
   565                           ; 1 bytes @ 0x11
   566   000012                     	ds	1
   567   000013                     lcd_8bit_init@ret:
   568                           	callstack 0
   569   000013                     lcd_8bit_send_string@ret:
   570                           	callstack 0
   571   000013                     lcd_8bit_set_cursor@column:
   572                           	callstack 0
   573                           
   574                           ; 1 bytes @ 0x12
   575   000013                     	ds	1
   576   000014                     ??_lcd_8bit_set_cursor:
   577                           
   578                           ; 1 bytes @ 0x13
   579   000014                     	ds	1
   580   000015                     vfpfcnvrt@c:
   581                           	callstack 0
   582                           
   583                           ; 1 bytes @ 0x14
   584   000015                     	ds	1
   585   000016                     ?_vfprintf:
   586                           	callstack 0
   587   000016                     lcd_8bit_set_cursor@ret:
   588                           	callstack 0
   589   000016                     vfprintf@fp:
   590                           	callstack 0
   591                           
   592                           ; 1 bytes @ 0x15
   593   000016                     	ds	1
   594   000017                     lcd_8bit_send_char_data_pos@lcd:
   595                           	callstack 0
   596   000017                     lcd_8bit_send_string_pos@lcd:
   597                           	callstack 0
   598   000017                     vfprintf@fmt:
   599                           	callstack 0
   600                           
   601                           ; 1 bytes @ 0x16
   602   000017                     	ds	1
   603   000018                     lcd_8bit_send_char_data_pos@row:
   604                           	callstack 0
   605   000018                     lcd_8bit_send_string_pos@row:
   606                           	callstack 0
   607   000018                     vfprintf@ap:
   608                           	callstack 0
   609                           
   610                           ; 1 bytes @ 0x17
   611   000018                     	ds	1
   612   000019                     lcd_8bit_send_char_data_pos@col:
   613                           	callstack 0
   614   000019                     lcd_8bit_send_string_pos@col:
   615                           	callstack 0
   616   000019                     vfprintf@cfmt:
   617                           	callstack 0
   618                           
   619                           ; 1 bytes @ 0x18
   620   000019                     	ds	1
   621   00001A                     ?_sprintf:
   622                           	callstack 0
   623   00001A                     lcd_8bit_send_char_data_pos@data:
   624                           	callstack 0
   625   00001A                     lcd_8bit_send_string_pos@str:
   626                           	callstack 0
   627   00001A                     sprintf@s:
   628                           	callstack 0
   629                           
   630                           ; 1 bytes @ 0x19
   631   00001A                     	ds	1
   632   00001B                     lcd_8bit_send_char_data_pos@ret:
   633                           	callstack 0
   634   00001B                     lcd_8bit_send_string_pos@ret:
   635                           	callstack 0
   636   00001B                     sprintf@fmt:
   637                           	callstack 0
   638                           
   639                           ; 1 bytes @ 0x1A
   640   00001B                     	ds	5
   641   000020                     sprintf@ap:
   642                           	callstack 0
   643                           
   644                           ; 1 bytes @ 0x1F
   645   000020                     	ds	1
   646   000021                     sprintf@f:
   647                           	callstack 0
   648                           
   649                           ; 12 bytes @ 0x20
   650   000021                     	ds	12
   651   00002D                     convert_uint8_to_string@str:
   652                           	callstack 0
   653   00002D                     convert_uint32_to_string@value:
   654                           	callstack 0
   655                           
   656                           ; 4 bytes @ 0x2C
   657   00002D                     	ds	1
   658   00002E                     convert_uint8_to_string@Temp_String:
   659                           	callstack 0
   660                           
   661                           ; 4 bytes @ 0x2D
   662   00002E                     	ds	3
   663   000031                     convert_uint32_to_string@str:
   664                           	callstack 0
   665                           
   666                           ; 1 bytes @ 0x30
   667   000031                     	ds	1
   668   000032                     convert_uint8_to_string@value:
   669                           	callstack 0
   670   000032                     convert_uint32_to_string@Temp_String:
   671                           	callstack 0
   672                           
   673                           ; 11 bytes @ 0x31
   674   000032                     	ds	1
   675   000033                     convert_uint8_to_string@ret:
   676                           	callstack 0
   677                           
   678                           ; 1 bytes @ 0x32
   679   000033                     	ds	1
   680   000034                     convert_uint8_to_string@DataCounter:
   681                           	callstack 0
   682                           
   683                           ; 1 bytes @ 0x33
   684   000034                     	ds	1
   685   000035                     add_two_numbers@first_number:
   686                           	callstack 0
   687                           
   688                           ; 1 bytes @ 0x34
   689   000035                     	ds	1
   690   000036                     add_two_numbers@second_number:
   691                           	callstack 0
   692                           
   693                           ; 1 bytes @ 0x35
   694   000036                     	ds	7
   695   00003D                     convert_uint32_to_string@ret:
   696                           	callstack 0
   697                           
   698                           ; 1 bytes @ 0x3C
   699   00003D                     	ds	1
   700   00003E                     convert_uint32_to_string@DataCounter:
   701                           	callstack 0
   702                           
   703                           ; 1 bytes @ 0x3D
   704   00003E                     	ds	1
   705   00003F                     ??_div_two_numbers:
   706   00003F                     sub_two_numbers@first_number:
   707                           	callstack 0
   708   00003F                     mult_two_numbers@first_number:
   709                           	callstack 0
   710                           
   711                           ; 1 bytes @ 0x3E
   712   00003F                     	ds	1
   713   000040                     sub_two_numbers@second_number:
   714                           	callstack 0
   715   000040                     mult_two_numbers@second_number:
   716                           	callstack 0
   717   000040                     div_two_numbers@first_number:
   718                           	callstack 0
   719                           
   720                           ; 1 bytes @ 0x3F
   721   000040                     	ds	1
   722   000041                     div_two_numbers@second_number:
   723                           	callstack 0
   724                           
   725                           ; 1 bytes @ 0x40
   726   000041                     	ds	1
   727   000042                     ??_main:
   728                           
   729                           ; 1 bytes @ 0x41
   730   000042                     	ds	2
   731                           
   732 ;;
   733 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   734 ;;
   735 ;; *************** function _main *****************
   736 ;; Defined at:
   737 ;;		line 104 in file "application.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;		None
   740 ;; Auto vars:     Size  Location     Type
   741 ;;		None
   742 ;; Return value:  Size  Location     Type
   743 ;;                  2   62[None  ] int 
   744 ;; Registers used:
   745 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   754 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;Total ram usage:        2 bytes
   756 ;; Hardware stack levels required when called: 7
   757 ;; This function calls:
   758 ;;		_add_two_numbers
   759 ;;		_clear_lcd
   760 ;;		_div_two_numbers
   761 ;;		_keypad_get_value
   762 ;;		_keypad_init
   763 ;;		_lcd_8bit_init
   764 ;;		_lcd_8bit_send_char_data_pos
   765 ;;		_lcd_8bit_send_command
   766 ;;		_mult_two_numbers
   767 ;;		_sub_two_numbers
   768 ;; This function is called by:
   769 ;;		Startup code after reset
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           	psect	text0
   774   001016                     __ptext0:
   775                           	callstack 0
   776   001016                     _main:
   777                           	callstack 24
   778   001016                     
   779                           ;application.c: 105:     ret = lcd_8bit_init(&lcd_obj);
   780   001016  0E6C               	movlw	low _lcd_obj
   781   001018  6E11               	movwf	lcd_8bit_init@lcd^0,c
   782   00101A  EC3A  F009         	call	_lcd_8bit_init	;wreg free
   783   00101E  6E7E               	movwf	_ret^0,c
   784                           
   785                           ;application.c: 106:     ret = keypad_init(&keypad_obj);
   786   001020  0E76               	movlw	low _keypad_obj
   787   001022  6E09               	movwf	keypad_init@keypad_obj^0,c
   788   001024  EC21  F00F         	call	_keypad_init	;wreg free
   789   001028  6E7E               	movwf	_ret^0,c
   790   00102A                     l63:
   791                           
   792                           ;application.c: 109:         ret = lcd_8bit_send_command(&lcd_obj , 0x0E);
   793   00102A  0E6C               	movlw	low _lcd_obj
   794   00102C  6E0B               	movwf	lcd_8bit_send_command@lcd^0,c
   795   00102E  0E0E               	movlw	14
   796   001030  6E0C               	movwf	lcd_8bit_send_command@command^0,c
   797   001032  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
   798   001036  6E7E               	movwf	_ret^0,c
   799   001038                     l3049:
   800                           
   801                           ;application.c: 111:         first_digit1 = 0;
   802   001038  0E00               	movlw	0
   803   00103A  6E7F               	movwf	_first_digit1^0,c
   804   00103C                     
   805                           ;application.c: 112:         ret = keypad_get_value(&keypad_obj , &first_digit1);
   806   00103C  0E76               	movlw	low _keypad_obj
   807   00103E  6E09               	movwf	keypad_get_value@keypad_obj^0,c
   808   001040  0E7F               	movlw	low _first_digit1
   809   001042  6E0A               	movwf	keypad_get_value@value^0,c
   810   001044  EC59  F00C         	call	_keypad_get_value	;wreg free
   811   001048  6E7E               	movwf	_ret^0,c
   812   00104A                     
   813                           ;application.c: 114:         }while(first_digit1 == 0);
   814   00104A  507F               	movf	_first_digit1^0,w,c
   815   00104C  B4D8               	btfsc	status,2,c
   816   00104E  EF2B  F008         	goto	u2401
   817   001052  EF2D  F008         	goto	u2400
   818   001056                     u2401:
   819   001056  EF1C  F008         	goto	l3049
   820   00105A                     u2400:
   821   00105A                     
   822                           ;application.c: 115:         _delay((unsigned long)((250)*(8000000UL/4000.0)));
   823   00105A  0E03               	movlw	3
   824   00105C  6E43               	movwf	(??_main+1)^0,c
   825   00105E  0E8A               	movlw	138
   826   001060  6E42               	movwf	??_main^0,c
   827   001062  0E56               	movlw	86
   828   001064                     u2727:
   829   001064  2EE8               	decfsz	wreg,f,c
   830   001066  D7FE               	bra	u2727
   831   001068  2E42               	decfsz	??_main^0,f,c
   832   00106A  D7FC               	bra	u2727
   833   00106C  2E43               	decfsz	(??_main+1)^0,f,c
   834   00106E  D7FA               	bra	u2727
   835   001070                     
   836                           ;application.c: 116:         ret = lcd_8bit_send_char_data_pos(&lcd_obj,1,1,first_digit1
      +                          );
   837   001070  0E6C               	movlw	low _lcd_obj
   838   001072  6E17               	movwf	lcd_8bit_send_char_data_pos@lcd^0,c
   839   001074  0E01               	movlw	1
   840   001076  6E18               	movwf	lcd_8bit_send_char_data_pos@row^0,c
   841   001078  0E01               	movlw	1
   842   00107A  6E19               	movwf	lcd_8bit_send_char_data_pos@col^0,c
   843   00107C  C07F  F01A         	movff	_first_digit1,lcd_8bit_send_char_data_pos@data
   844   001080  ECA5  F011         	call	_lcd_8bit_send_char_data_pos	;wreg free
   845   001084  6E7E               	movwf	_ret^0,c
   846   001086                     l3059:
   847                           
   848                           ;application.c: 120:         ret = keypad_get_value(&keypad_obj , &second_digit1);
   849   001086  0E76               	movlw	low _keypad_obj
   850   001088  6E09               	movwf	keypad_get_value@keypad_obj^0,c
   851   00108A  0E61               	movlw	low _second_digit1
   852   00108C  6E0A               	movwf	keypad_get_value@value^0,c
   853   00108E  EC59  F00C         	call	_keypad_get_value	;wreg free
   854   001092  6E7E               	movwf	_ret^0,c
   855   001094                     
   856                           ;application.c: 122:         }while(second_digit1 == 0);
   857   001094  5061               	movf	_second_digit1^0,w,c
   858   001096  B4D8               	btfsc	status,2,c
   859   001098  EF50  F008         	goto	u2411
   860   00109C  EF52  F008         	goto	u2410
   861   0010A0                     u2411:
   862   0010A0  EF43  F008         	goto	l3059
   863   0010A4                     u2410:
   864   0010A4                     
   865                           ;application.c: 123:         _delay((unsigned long)((250)*(8000000UL/4000.0)));
   866   0010A4  0E03               	movlw	3
   867   0010A6  6E43               	movwf	(??_main+1)^0,c
   868   0010A8  0E8A               	movlw	138
   869   0010AA  6E42               	movwf	??_main^0,c
   870   0010AC  0E56               	movlw	86
   871   0010AE                     u2737:
   872   0010AE  2EE8               	decfsz	wreg,f,c
   873   0010B0  D7FE               	bra	u2737
   874   0010B2  2E42               	decfsz	??_main^0,f,c
   875   0010B4  D7FC               	bra	u2737
   876   0010B6  2E43               	decfsz	(??_main+1)^0,f,c
   877   0010B8  D7FA               	bra	u2737
   878   0010BA                     
   879                           ;application.c: 124:         ret = lcd_8bit_send_char_data_pos(&lcd_obj,1,2,second_digit
      +                          1);
   880   0010BA  0E6C               	movlw	low _lcd_obj
   881   0010BC  6E17               	movwf	lcd_8bit_send_char_data_pos@lcd^0,c
   882   0010BE  0E01               	movlw	1
   883   0010C0  6E18               	movwf	lcd_8bit_send_char_data_pos@row^0,c
   884   0010C2  0E02               	movlw	2
   885   0010C4  6E19               	movwf	lcd_8bit_send_char_data_pos@col^0,c
   886   0010C6  C061  F01A         	movff	_second_digit1,lcd_8bit_send_char_data_pos@data
   887   0010CA  ECA5  F011         	call	_lcd_8bit_send_char_data_pos	;wreg free
   888   0010CE  6E7E               	movwf	_ret^0,c
   889   0010D0                     l3067:
   890                           
   891                           ;application.c: 129:         ret = keypad_get_value(&keypad_obj , &operator);
   892   0010D0  0E76               	movlw	low _keypad_obj
   893   0010D2  6E09               	movwf	keypad_get_value@keypad_obj^0,c
   894   0010D4  0E5E               	movlw	low _operator
   895   0010D6  6E0A               	movwf	keypad_get_value@value^0,c
   896   0010D8  EC59  F00C         	call	_keypad_get_value	;wreg free
   897   0010DC  6E7E               	movwf	_ret^0,c
   898   0010DE                     
   899                           ;application.c: 131:         }while(operator == 0);
   900   0010DE  505E               	movf	_operator^0,w,c
   901   0010E0  B4D8               	btfsc	status,2,c
   902   0010E2  EF75  F008         	goto	u2421
   903   0010E6  EF77  F008         	goto	u2420
   904   0010EA                     u2421:
   905   0010EA  EF68  F008         	goto	l3067
   906   0010EE                     u2420:
   907   0010EE                     
   908                           ;application.c: 132:         _delay((unsigned long)((250)*(8000000UL/4000.0)));
   909   0010EE  0E03               	movlw	3
   910   0010F0  6E43               	movwf	(??_main+1)^0,c
   911   0010F2  0E8A               	movlw	138
   912   0010F4  6E42               	movwf	??_main^0,c
   913   0010F6  0E56               	movlw	86
   914   0010F8                     u2747:
   915   0010F8  2EE8               	decfsz	wreg,f,c
   916   0010FA  D7FE               	bra	u2747
   917   0010FC  2E42               	decfsz	??_main^0,f,c
   918   0010FE  D7FC               	bra	u2747
   919   001100  2E43               	decfsz	(??_main+1)^0,f,c
   920   001102  D7FA               	bra	u2747
   921   001104                     
   922                           ;application.c: 133:         ret = lcd_8bit_send_char_data_pos(&lcd_obj,1,4,operator);
   923   001104  0E6C               	movlw	low _lcd_obj
   924   001106  6E17               	movwf	lcd_8bit_send_char_data_pos@lcd^0,c
   925   001108  0E01               	movlw	1
   926   00110A  6E18               	movwf	lcd_8bit_send_char_data_pos@row^0,c
   927   00110C  0E04               	movlw	4
   928   00110E  6E19               	movwf	lcd_8bit_send_char_data_pos@col^0,c
   929   001110  C05E  F01A         	movff	_operator,lcd_8bit_send_char_data_pos@data
   930   001114  ECA5  F011         	call	_lcd_8bit_send_char_data_pos	;wreg free
   931   001118  6E7E               	movwf	_ret^0,c
   932   00111A                     l3075:
   933                           
   934                           ;application.c: 139:         ret = keypad_get_value(&keypad_obj , &first_digit2);
   935   00111A  0E76               	movlw	low _keypad_obj
   936   00111C  6E09               	movwf	keypad_get_value@keypad_obj^0,c
   937   00111E  0E60               	movlw	low _first_digit2
   938   001120  6E0A               	movwf	keypad_get_value@value^0,c
   939   001122  EC59  F00C         	call	_keypad_get_value	;wreg free
   940   001126  6E7E               	movwf	_ret^0,c
   941   001128                     
   942                           ;application.c: 141:         }while(first_digit2 == 0);
   943   001128  5060               	movf	_first_digit2^0,w,c
   944   00112A  B4D8               	btfsc	status,2,c
   945   00112C  EF9A  F008         	goto	u2431
   946   001130  EF9C  F008         	goto	u2430
   947   001134                     u2431:
   948   001134  EF8D  F008         	goto	l3075
   949   001138                     u2430:
   950   001138                     
   951                           ;application.c: 142:         _delay((unsigned long)((250)*(8000000UL/4000.0)));
   952   001138  0E03               	movlw	3
   953   00113A  6E43               	movwf	(??_main+1)^0,c
   954   00113C  0E8A               	movlw	138
   955   00113E  6E42               	movwf	??_main^0,c
   956   001140  0E56               	movlw	86
   957   001142                     u2757:
   958   001142  2EE8               	decfsz	wreg,f,c
   959   001144  D7FE               	bra	u2757
   960   001146  2E42               	decfsz	??_main^0,f,c
   961   001148  D7FC               	bra	u2757
   962   00114A  2E43               	decfsz	(??_main+1)^0,f,c
   963   00114C  D7FA               	bra	u2757
   964   00114E                     
   965                           ;application.c: 143:         ret = lcd_8bit_send_char_data_pos(&lcd_obj,1,6,first_digit2
      +                          );
   966   00114E  0E6C               	movlw	low _lcd_obj
   967   001150  6E17               	movwf	lcd_8bit_send_char_data_pos@lcd^0,c
   968   001152  0E01               	movlw	1
   969   001154  6E18               	movwf	lcd_8bit_send_char_data_pos@row^0,c
   970   001156  0E06               	movlw	6
   971   001158  6E19               	movwf	lcd_8bit_send_char_data_pos@col^0,c
   972   00115A  C060  F01A         	movff	_first_digit2,lcd_8bit_send_char_data_pos@data
   973   00115E  ECA5  F011         	call	_lcd_8bit_send_char_data_pos	;wreg free
   974   001162  6E7E               	movwf	_ret^0,c
   975   001164                     l3083:
   976                           
   977                           ;application.c: 147:         ret = keypad_get_value(&keypad_obj , &second_digit2);
   978   001164  0E76               	movlw	low _keypad_obj
   979   001166  6E09               	movwf	keypad_get_value@keypad_obj^0,c
   980   001168  0E5F               	movlw	low _second_digit2
   981   00116A  6E0A               	movwf	keypad_get_value@value^0,c
   982   00116C  EC59  F00C         	call	_keypad_get_value	;wreg free
   983   001170  6E7E               	movwf	_ret^0,c
   984   001172                     
   985                           ;application.c: 149:         }while(second_digit2 == 0);
   986   001172  505F               	movf	_second_digit2^0,w,c
   987   001174  B4D8               	btfsc	status,2,c
   988   001176  EFBF  F008         	goto	u2441
   989   00117A  EFC1  F008         	goto	u2440
   990   00117E                     u2441:
   991   00117E  EFB2  F008         	goto	l3083
   992   001182                     u2440:
   993   001182                     
   994                           ;application.c: 150:         _delay((unsigned long)((250)*(8000000UL/4000.0)));
   995   001182  0E03               	movlw	3
   996   001184  6E43               	movwf	(??_main+1)^0,c
   997   001186  0E8A               	movlw	138
   998   001188  6E42               	movwf	??_main^0,c
   999   00118A  0E56               	movlw	86
  1000   00118C                     u2767:
  1001   00118C  2EE8               	decfsz	wreg,f,c
  1002   00118E  D7FE               	bra	u2767
  1003   001190  2E42               	decfsz	??_main^0,f,c
  1004   001192  D7FC               	bra	u2767
  1005   001194  2E43               	decfsz	(??_main+1)^0,f,c
  1006   001196  D7FA               	bra	u2767
  1007   001198                     
  1008                           ;application.c: 151:         ret = lcd_8bit_send_char_data_pos(&lcd_obj,1,7,second_digit
      +                          2);
  1009   001198  0E6C               	movlw	low _lcd_obj
  1010   00119A  6E17               	movwf	lcd_8bit_send_char_data_pos@lcd^0,c
  1011   00119C  0E01               	movlw	1
  1012   00119E  6E18               	movwf	lcd_8bit_send_char_data_pos@row^0,c
  1013   0011A0  0E07               	movlw	7
  1014   0011A2  6E19               	movwf	lcd_8bit_send_char_data_pos@col^0,c
  1015   0011A4  C05F  F01A         	movff	_second_digit2,lcd_8bit_send_char_data_pos@data
  1016   0011A8  ECA5  F011         	call	_lcd_8bit_send_char_data_pos	;wreg free
  1017   0011AC  6E7E               	movwf	_ret^0,c
  1018   0011AE                     l3091:
  1019                           
  1020                           ;application.c: 155:         ret = keypad_get_value(&keypad_obj , &asignment);
  1021   0011AE  0E76               	movlw	low _keypad_obj
  1022   0011B0  6E09               	movwf	keypad_get_value@keypad_obj^0,c
  1023   0011B2  0E5D               	movlw	low _asignment
  1024   0011B4  6E0A               	movwf	keypad_get_value@value^0,c
  1025   0011B6  EC59  F00C         	call	_keypad_get_value	;wreg free
  1026   0011BA  6E7E               	movwf	_ret^0,c
  1027   0011BC                     
  1028                           ;application.c: 157:         }while(asignment == 0);
  1029   0011BC  505D               	movf	_asignment^0,w,c
  1030   0011BE  B4D8               	btfsc	status,2,c
  1031   0011C0  EFE4  F008         	goto	u2451
  1032   0011C4  EFE6  F008         	goto	u2450
  1033   0011C8                     u2451:
  1034   0011C8  EFD7  F008         	goto	l3091
  1035   0011CC                     u2450:
  1036   0011CC                     
  1037                           ;application.c: 158:         _delay((unsigned long)((250)*(8000000UL/4000.0)));
  1038   0011CC  0E03               	movlw	3
  1039   0011CE  6E43               	movwf	(??_main+1)^0,c
  1040   0011D0  0E8A               	movlw	138
  1041   0011D2  6E42               	movwf	??_main^0,c
  1042   0011D4  0E56               	movlw	86
  1043   0011D6                     u2777:
  1044   0011D6  2EE8               	decfsz	wreg,f,c
  1045   0011D8  D7FE               	bra	u2777
  1046   0011DA  2E42               	decfsz	??_main^0,f,c
  1047   0011DC  D7FC               	bra	u2777
  1048   0011DE  2E43               	decfsz	(??_main+1)^0,f,c
  1049   0011E0  D7FA               	bra	u2777
  1050   0011E2                     
  1051                           ;application.c: 159:         ret = lcd_8bit_send_char_data_pos(&lcd_obj,1,9,asignment);
  1052   0011E2  0E6C               	movlw	low _lcd_obj
  1053   0011E4  6E17               	movwf	lcd_8bit_send_char_data_pos@lcd^0,c
  1054   0011E6  0E01               	movlw	1
  1055   0011E8  6E18               	movwf	lcd_8bit_send_char_data_pos@row^0,c
  1056   0011EA  0E09               	movlw	9
  1057   0011EC  6E19               	movwf	lcd_8bit_send_char_data_pos@col^0,c
  1058   0011EE  C05D  F01A         	movff	_asignment,lcd_8bit_send_char_data_pos@data
  1059   0011F2  ECA5  F011         	call	_lcd_8bit_send_char_data_pos	;wreg free
  1060   0011F6  6E7E               	movwf	_ret^0,c
  1061   0011F8                     
  1062                           ;application.c: 160:         if(asignment == '='){
  1063   0011F8  0E3D               	movlw	61
  1064   0011FA  185D               	xorwf	_asignment^0,w,c
  1065   0011FC  A4D8               	btfss	status,2,c
  1066   0011FE  EF03  F009         	goto	u2461
  1067   001202  EF05  F009         	goto	u2460
  1068   001206                     u2461:
  1069   001206  EF34  F009         	goto	l3115
  1070   00120A                     u2460:
  1071   00120A  EF17  F009         	goto	l3113
  1072   00120E                     l3103:
  1073                           
  1074                           ;application.c: 163:                 add_two_numbers();
  1075   00120E  EC44  F011         	call	_add_two_numbers	;wreg free
  1076                           
  1077                           ;application.c: 164:                 break;
  1078   001212  EF34  F009         	goto	l3115
  1079   001216                     l3105:
  1080                           
  1081                           ;application.c: 166:                 sub_two_numbers();
  1082   001216  ECC6  F010         	call	_sub_two_numbers	;wreg free
  1083                           
  1084                           ;application.c: 167:                 break;
  1085   00121A  EF34  F009         	goto	l3115
  1086   00121E                     l3107:
  1087                           
  1088                           ;application.c: 169:                 mult_two_numbers();
  1089   00121E  ECF2  F010         	call	_mult_two_numbers	;wreg free
  1090                           
  1091                           ;application.c: 170:                 break;
  1092   001222  EF34  F009         	goto	l3115
  1093   001226                     l3109:
  1094                           
  1095                           ;application.c: 172:                 div_two_numbers();
  1096   001226  EC3B  F010         	call	_div_two_numbers	;wreg free
  1097                           
  1098                           ;application.c: 173:                 break;
  1099   00122A  EF34  F009         	goto	l3115
  1100   00122E                     l3113:
  1101   00122E  505E               	movf	_operator^0,w,c
  1102   001230  6E42               	movwf	??_main^0,c
  1103   001232  6A43               	clrf	(??_main+1)^0,c
  1104                           
  1105                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1106                           ; Switch size 1, requested type "simple"
  1107                           ; Number of cases is 1, Range of values is 0 to 0
  1108                           ; switch strategies available:
  1109                           ; Name         Instructions Cycles
  1110                           ; simple_byte            4     3 (average)
  1111                           ;	Chosen strategy is simple_byte
  1112   001234  5043               	movf	(??_main+1)^0,w,c
  1113   001236  0A00               	xorlw	0	; case 0
  1114   001238  B4D8               	btfsc	status,2,c
  1115   00123A  EF21  F009         	goto	l3349
  1116   00123E  EF34  F009         	goto	l3115
  1117   001242                     l3349:
  1118                           
  1119                           ; Switch size 1, requested type "simple"
  1120                           ; Number of cases is 4, Range of values is 42 to 47
  1121                           ; switch strategies available:
  1122                           ; Name         Instructions Cycles
  1123                           ; simple_byte           13     7 (average)
  1124                           ;	Chosen strategy is simple_byte
  1125   001242  5042               	movf	??_main^0,w,c
  1126   001244  0A2A               	xorlw	42	; case 42
  1127   001246  B4D8               	btfsc	status,2,c
  1128   001248  EF0F  F009         	goto	l3107
  1129   00124C  0A01               	xorlw	1	; case 43
  1130   00124E  B4D8               	btfsc	status,2,c
  1131   001250  EF07  F009         	goto	l3103
  1132   001254  0A06               	xorlw	6	; case 45
  1133   001256  B4D8               	btfsc	status,2,c
  1134   001258  EF0B  F009         	goto	l3105
  1135   00125C  0A02               	xorlw	2	; case 47
  1136   00125E  B4D8               	btfsc	status,2,c
  1137   001260  EF13  F009         	goto	l3109
  1138   001264  EF34  F009         	goto	l3115
  1139   001268                     l3115:
  1140                           
  1141                           ;application.c: 182:         clear_lcd();
  1142   001268  EC0B  F010         	call	_clear_lcd	;wreg free
  1143   00126C  EF15  F008         	goto	l63
  1144   001270  EF00  F000         	goto	start
  1145   001274                     __end_of_main:
  1146                           	callstack 0
  1147                           
  1148 ;; *************** function _sub_two_numbers *****************
  1149 ;; Defined at:
  1150 ;;		line 201 in file "application.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;  second_numbe    1   63[COMRAM] unsigned char 
  1155 ;;  first_number    1   62[COMRAM] unsigned char 
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      void 
  1158 ;; Registers used:
  1159 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1166 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1168 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1169 ;;Total ram usage:        2 bytes
  1170 ;; Hardware stack levels used: 1
  1171 ;; Hardware stack levels required when called: 6
  1172 ;; This function calls:
  1173 ;;		_convert_uint32_to_string
  1174 ;;		_lcd_8bit_send_string_pos
  1175 ;; This function is called by:
  1176 ;;		_main
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           	psect	text1
  1181   00218C                     __ptext1:
  1182                           	callstack 0
  1183   00218C                     _sub_two_numbers:
  1184                           	callstack 24
  1185   00218C                     
  1186                           ;application.c: 202:    uint8 first_number, second_number ;;application.c: 203:    first
      +                          _number= (second_digit1-48)+10*(first_digit1-48);
  1187   00218C  507F               	movf	_first_digit1^0,w,c
  1188   00218E  0D0A               	mullw	10
  1189   002190  50F3               	movf	243,w,c
  1190   002192  2461               	addwf	_second_digit1^0,w,c
  1191   002194  0FF0               	addlw	240
  1192   002196  6E3F               	movwf	sub_two_numbers@first_number^0,c
  1193                           
  1194                           ;application.c: 204:    second_number = (second_digit2-48)+10*(first_digit2-48);
  1195   002198  5060               	movf	_first_digit2^0,w,c
  1196   00219A  0D0A               	mullw	10
  1197   00219C  50F3               	movf	243,w,c
  1198   00219E  245F               	addwf	_second_digit2^0,w,c
  1199   0021A0  0FF0               	addlw	240
  1200   0021A2  6E40               	movwf	sub_two_numbers@second_number^0,c
  1201   0021A4                     
  1202                           ;application.c: 205:    result = first_number - second_number;
  1203   0021A4  5040               	movf	sub_two_numbers@second_number^0,w,c
  1204   0021A6  5C3F               	subwf	sub_two_numbers@first_number^0,w,c
  1205   0021A8  6E48               	movwf	_result^0,c
  1206   0021AA  6A49               	clrf	(_result+1)^0,c
  1207   0021AC  A0D8               	btfss	status,0,c
  1208   0021AE  0649               	decf	(_result+1)^0,f,c
  1209   0021B0                     
  1210                           ;application.c: 206:    ret = convert_uint32_to_string(result , str);
  1211   0021B0  C048  F02D         	movff	_result,convert_uint32_to_string@value
  1212   0021B4  C049  F02E         	movff	_result+1,convert_uint32_to_string@value+1
  1213   0021B8  0E00               	movlw	0
  1214   0021BA  BE2E               	btfsc	(convert_uint32_to_string@value+1)^0,7,c
  1215   0021BC  0EFF               	movlw	-1
  1216   0021BE  6E2F               	movwf	(convert_uint32_to_string@value+2)^0,c
  1217   0021C0  6E30               	movwf	(convert_uint32_to_string@value+3)^0,c
  1218   0021C2  0E4E               	movlw	low _str
  1219   0021C4  6E31               	movwf	convert_uint32_to_string@str^0,c
  1220   0021C6  EC81  F00E         	call	_convert_uint32_to_string	;wreg free
  1221   0021CA  6E7E               	movwf	_ret^0,c
  1222   0021CC                     
  1223                           ;application.c: 207:    ret = lcd_8bit_send_string_pos(&lcd_obj,1,11,str);
  1224   0021CC  0E6C               	movlw	low _lcd_obj
  1225   0021CE  6E17               	movwf	lcd_8bit_send_string_pos@lcd^0,c
  1226   0021D0  0E01               	movlw	1
  1227   0021D2  6E18               	movwf	lcd_8bit_send_string_pos@row^0,c
  1228   0021D4  0E0B               	movlw	11
  1229   0021D6  6E19               	movwf	lcd_8bit_send_string_pos@col^0,c
  1230   0021D8  0E4E               	movlw	low _str
  1231   0021DA  6E1A               	movwf	lcd_8bit_send_string_pos@str^0,c
  1232   0021DC  EC1E  F011         	call	_lcd_8bit_send_string_pos	;wreg free
  1233   0021E0  6E7E               	movwf	_ret^0,c
  1234   0021E2  0012               	return		;funcret
  1235   0021E4                     __end_of_sub_two_numbers:
  1236                           	callstack 0
  1237                           
  1238 ;; *************** function _mult_two_numbers *****************
  1239 ;; Defined at:
  1240 ;;		line 210 in file "application.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;		None
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;  second_numbe    1   63[COMRAM] unsigned char 
  1245 ;;  first_number    1   62[COMRAM] unsigned char 
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;Total ram usage:        2 bytes
  1260 ;; Hardware stack levels used: 1
  1261 ;; Hardware stack levels required when called: 6
  1262 ;; This function calls:
  1263 ;;		_convert_uint32_to_string
  1264 ;;		_lcd_8bit_send_string_pos
  1265 ;; This function is called by:
  1266 ;;		_main
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text2
  1271   0021E4                     __ptext2:
  1272                           	callstack 0
  1273   0021E4                     _mult_two_numbers:
  1274                           	callstack 24
  1275   0021E4                     
  1276                           ;application.c: 211:    uint8 first_number, second_number ;;application.c: 213:    first
      +                          _number= (second_digit1-48)+10*(first_digit1-48);
  1277   0021E4  507F               	movf	_first_digit1^0,w,c
  1278   0021E6  0D0A               	mullw	10
  1279   0021E8  50F3               	movf	243,w,c
  1280   0021EA  2461               	addwf	_second_digit1^0,w,c
  1281   0021EC  0FF0               	addlw	240
  1282   0021EE  6E3F               	movwf	mult_two_numbers@first_number^0,c
  1283                           
  1284                           ;application.c: 214:    second_number = (second_digit2-48)+10*(first_digit2-48);
  1285   0021F0  5060               	movf	_first_digit2^0,w,c
  1286   0021F2  0D0A               	mullw	10
  1287   0021F4  50F3               	movf	243,w,c
  1288   0021F6  245F               	addwf	_second_digit2^0,w,c
  1289   0021F8  0FF0               	addlw	240
  1290   0021FA  6E40               	movwf	mult_two_numbers@second_number^0,c
  1291                           
  1292                           ;application.c: 215:    result = first_number * second_number;
  1293   0021FC  503F               	movf	mult_two_numbers@first_number^0,w,c
  1294   0021FE  0240               	mulwf	mult_two_numbers@second_number^0,c
  1295   002200  CFF3 F048          	movff	prodl,_result
  1296   002204  CFF4 F049          	movff	prodh,_result+1
  1297   002208                     
  1298                           ;application.c: 216:    ret = convert_uint32_to_string(result , str);
  1299   002208  C048  F02D         	movff	_result,convert_uint32_to_string@value
  1300   00220C  C049  F02E         	movff	_result+1,convert_uint32_to_string@value+1
  1301   002210  0E00               	movlw	0
  1302   002212  BE2E               	btfsc	(convert_uint32_to_string@value+1)^0,7,c
  1303   002214  0EFF               	movlw	-1
  1304   002216  6E2F               	movwf	(convert_uint32_to_string@value+2)^0,c
  1305   002218  6E30               	movwf	(convert_uint32_to_string@value+3)^0,c
  1306   00221A  0E4E               	movlw	low _str
  1307   00221C  6E31               	movwf	convert_uint32_to_string@str^0,c
  1308   00221E  EC81  F00E         	call	_convert_uint32_to_string	;wreg free
  1309   002222  6E7E               	movwf	_ret^0,c
  1310   002224                     
  1311                           ;application.c: 217:    ret = lcd_8bit_send_string_pos(&lcd_obj,1,11,str);
  1312   002224  0E6C               	movlw	low _lcd_obj
  1313   002226  6E17               	movwf	lcd_8bit_send_string_pos@lcd^0,c
  1314   002228  0E01               	movlw	1
  1315   00222A  6E18               	movwf	lcd_8bit_send_string_pos@row^0,c
  1316   00222C  0E0B               	movlw	11
  1317   00222E  6E19               	movwf	lcd_8bit_send_string_pos@col^0,c
  1318   002230  0E4E               	movlw	low _str
  1319   002232  6E1A               	movwf	lcd_8bit_send_string_pos@str^0,c
  1320   002234  EC1E  F011         	call	_lcd_8bit_send_string_pos	;wreg free
  1321   002238  6E7E               	movwf	_ret^0,c
  1322   00223A  0012               	return		;funcret
  1323   00223C                     __end_of_mult_two_numbers:
  1324                           	callstack 0
  1325                           
  1326 ;; *************** function _lcd_8bit_send_char_data_pos *****************
  1327 ;; Defined at:
  1328 ;;		line 282 in file "ECU_layer/LCD/ecu_lcd.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;  lcd             1   22[COMRAM] PTR const struct .
  1331 ;;		 -> lcd_obj(10), 
  1332 ;;  row             1   23[COMRAM] unsigned char 
  1333 ;;  col             1   24[COMRAM] unsigned char 
  1334 ;;  data            1   25[COMRAM] unsigned char 
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;  ret             1   26[COMRAM] unsigned char 
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      unsigned char 
  1339 ;; Registers used:
  1340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1347 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1349 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1350 ;;Total ram usage:        5 bytes
  1351 ;; Hardware stack levels used: 1
  1352 ;; Hardware stack levels required when called: 4
  1353 ;; This function calls:
  1354 ;;		_lcd_8bit_send_char_data
  1355 ;;		_lcd_8bit_set_cursor
  1356 ;; This function is called by:
  1357 ;;		_main
  1358 ;;		_lcd_8bit_send_custom_char
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           	psect	text3
  1363   00234A                     __ptext3:
  1364                           	callstack 0
  1365   00234A                     _lcd_8bit_send_char_data_pos:
  1366                           	callstack 26
  1367   00234A                     
  1368                           ;ECU_layer/LCD/ecu_lcd.c: 284:     if(((void*)0) == lcd){
  1369   00234A  5017               	movf	lcd_8bit_send_char_data_pos@lcd^0,w,c
  1370   00234C  A4D8               	btfss	status,2,c
  1371   00234E  EFAB  F011         	goto	u2171
  1372   002352  EFAD  F011         	goto	u2170
  1373   002356                     u2171:
  1374   002356  EFB1  F011         	goto	l2891
  1375   00235A                     u2170:
  1376   00235A                     
  1377                           ;ECU_layer/LCD/ecu_lcd.c: 285:         ret = (Std_ReturnType)0x00;
  1378   00235A  0E00               	movlw	0
  1379   00235C  6E1B               	movwf	lcd_8bit_send_char_data_pos@ret^0,c
  1380                           
  1381                           ;ECU_layer/LCD/ecu_lcd.c: 286:     }
  1382   00235E  EFC1  F011         	goto	l2893
  1383   002362                     l2891:
  1384                           
  1385                           ;ECU_layer/LCD/ecu_lcd.c: 288:         ret = lcd_8bit_set_cursor(lcd ,row , col);
  1386   002362  C017  F011         	movff	lcd_8bit_send_char_data_pos@lcd,lcd_8bit_set_cursor@lcd
  1387   002366  C018  F012         	movff	lcd_8bit_send_char_data_pos@row,lcd_8bit_set_cursor@row
  1388   00236A  C019  F013         	movff	lcd_8bit_send_char_data_pos@col,lcd_8bit_set_cursor@column
  1389   00236E  EC2A  F00D         	call	_lcd_8bit_set_cursor	;wreg free
  1390   002372  6E1B               	movwf	lcd_8bit_send_char_data_pos@ret^0,c
  1391                           
  1392                           ;ECU_layer/LCD/ecu_lcd.c: 289:         ret = lcd_8bit_send_char_data(lcd , data);
  1393   002374  C017  F00B         	movff	lcd_8bit_send_char_data_pos@lcd,lcd_8bit_send_char_data@lcd
  1394   002378  C01A  F00C         	movff	lcd_8bit_send_char_data_pos@data,lcd_8bit_send_char_data@data
  1395   00237C  EC9F  F00F         	call	_lcd_8bit_send_char_data	;wreg free
  1396   002380  6E1B               	movwf	lcd_8bit_send_char_data_pos@ret^0,c
  1397   002382                     l2893:
  1398                           
  1399                           ;ECU_layer/LCD/ecu_lcd.c: 291:     return ret ;
  1400   002382  501B               	movf	lcd_8bit_send_char_data_pos@ret^0,w,c
  1401   002384  0012               	return		;funcret
  1402   002386                     __end_of_lcd_8bit_send_char_data_pos:
  1403                           	callstack 0
  1404                           
  1405 ;; *************** function _lcd_8bit_init *****************
  1406 ;; Defined at:
  1407 ;;		line 189 in file "ECU_layer/LCD/ecu_lcd.c"
  1408 ;; Parameters:    Size  Location     Type
  1409 ;;  lcd             1   16[COMRAM] PTR const struct .
  1410 ;;		 -> lcd_obj(10), 
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;  ret             1   18[COMRAM] unsigned char 
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  1    wreg      unsigned char 
  1415 ;; Registers used:
  1416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1422 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1423 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1424 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1426 ;;Total ram usage:        3 bytes
  1427 ;; Hardware stack levels used: 1
  1428 ;; Hardware stack levels required when called: 3
  1429 ;; This function calls:
  1430 ;;		_gpio_pin_direction_init
  1431 ;;		_gpio_pin_write_logic
  1432 ;;		_lcd_8bit_send_command
  1433 ;; This function is called by:
  1434 ;;		_main
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text4
  1439   001274                     __ptext4:
  1440                           	callstack 0
  1441   001274                     _lcd_8bit_init:
  1442                           	callstack 27
  1443   001274                     
  1444                           ;ECU_layer/LCD/ecu_lcd.c: 191:     if(((void*)0) == lcd){
  1445   001274  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1446   001276  A4D8               	btfss	status,2,c
  1447   001278  EF40  F009         	goto	u2131
  1448   00127C  EF42  F009         	goto	u2130
  1449   001280                     u2131:
  1450   001280  EF46  F009         	goto	l2841
  1451   001284                     u2130:
  1452   001284                     
  1453                           ;ECU_layer/LCD/ecu_lcd.c: 192:         ret = (Std_ReturnType)0x00;
  1454   001284  0E00               	movlw	0
  1455   001286  6E13               	movwf	lcd_8bit_init@ret^0,c
  1456                           
  1457                           ;ECU_layer/LCD/ecu_lcd.c: 193:     }
  1458   001288  EF60  F00A         	goto	l2851
  1459   00128C                     l2841:
  1460                           
  1461                           ;ECU_layer/LCD/ecu_lcd.c: 195:       ret= gpio_pin_direction_init(&(lcd->lcd_rs));
  1462   00128C  C011  F001         	movff	lcd_8bit_init@lcd,gpio_pin_direction_init@_pin_config
  1463   001290  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1464   001294  6E13               	movwf	lcd_8bit_init@ret^0,c
  1465                           
  1466                           ;ECU_layer/LCD/ecu_lcd.c: 196:       ret= gpio_pin_write_logic(&(lcd->lcd_rs),lcd->lcd_r
      +                          s.logic);
  1467   001296  C011  F001         	movff	lcd_8bit_init@lcd,gpio_pin_write_logic@_pin_config
  1468   00129A  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1469   00129C  6ED9               	movwf	fsr2l,c
  1470   00129E  6ADA               	clrf	fsr2h,c
  1471   0012A0  0E00               	movlw	0
  1472   0012A2  BEDF               	btfsc	indf2,7,c
  1473   0012A4  0E01               	movlw	1
  1474   0012A6  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  1475   0012A8  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  1476   0012AC  6E13               	movwf	lcd_8bit_init@ret^0,c
  1477                           
  1478                           ;ECU_layer/LCD/ecu_lcd.c: 197:       ret= gpio_pin_direction_init(&(lcd->lcd_en));
  1479   0012AE  2811               	incf	lcd_8bit_init@lcd^0,w,c
  1480   0012B0  6E01               	movwf	gpio_pin_direction_init@_pin_config^0,c
  1481   0012B2  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1482   0012B6  6E13               	movwf	lcd_8bit_init@ret^0,c
  1483                           
  1484                           ;ECU_layer/LCD/ecu_lcd.c: 198:       ret= gpio_pin_write_logic(&(lcd->lcd_en),lcd->lcd_e
      +                          n.logic);
  1485   0012B8  2811               	incf	lcd_8bit_init@lcd^0,w,c
  1486   0012BA  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1487   0012BC  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1488   0012BE  6ED9               	movwf	fsr2l,c
  1489   0012C0  6ADA               	clrf	fsr2h,c
  1490   0012C2  0E01               	movlw	1
  1491   0012C4  26D9               	addwf	fsr2l,f,c
  1492   0012C6  0E00               	movlw	0
  1493   0012C8  BEDF               	btfsc	indf2,7,c
  1494   0012CA  0E01               	movlw	1
  1495   0012CC  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  1496   0012CE  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  1497   0012D2  6E13               	movwf	lcd_8bit_init@ret^0,c
  1498                           
  1499                           ;ECU_layer/LCD/ecu_lcd.c: 199:       ret= gpio_pin_direction_init(&(lcd->lcd_data[0]));
  1500   0012D4  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1501   0012D6  0F02               	addlw	2
  1502   0012D8  6E01               	movwf	gpio_pin_direction_init@_pin_config^0,c
  1503   0012DA  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1504   0012DE  6E13               	movwf	lcd_8bit_init@ret^0,c
  1505                           
  1506                           ;ECU_layer/LCD/ecu_lcd.c: 200:       ret= gpio_pin_direction_init(&(lcd->lcd_data[1]));
  1507   0012E0  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1508   0012E2  0F03               	addlw	3
  1509   0012E4  6E01               	movwf	gpio_pin_direction_init@_pin_config^0,c
  1510   0012E6  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1511   0012EA  6E13               	movwf	lcd_8bit_init@ret^0,c
  1512                           
  1513                           ;ECU_layer/LCD/ecu_lcd.c: 201:       ret= gpio_pin_direction_init(&(lcd->lcd_data[2]));
  1514   0012EC  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1515   0012EE  0F04               	addlw	4
  1516   0012F0  6E01               	movwf	gpio_pin_direction_init@_pin_config^0,c
  1517   0012F2  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1518   0012F6  6E13               	movwf	lcd_8bit_init@ret^0,c
  1519                           
  1520                           ;ECU_layer/LCD/ecu_lcd.c: 202:       ret= gpio_pin_direction_init(&(lcd->lcd_data[3]));
  1521   0012F8  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1522   0012FA  0F05               	addlw	5
  1523   0012FC  6E01               	movwf	gpio_pin_direction_init@_pin_config^0,c
  1524   0012FE  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1525   001302  6E13               	movwf	lcd_8bit_init@ret^0,c
  1526                           
  1527                           ;ECU_layer/LCD/ecu_lcd.c: 203:       ret= gpio_pin_direction_init(&(lcd->lcd_data[4]));
  1528   001304  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1529   001306  0F06               	addlw	6
  1530   001308  6E01               	movwf	gpio_pin_direction_init@_pin_config^0,c
  1531   00130A  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1532   00130E  6E13               	movwf	lcd_8bit_init@ret^0,c
  1533                           
  1534                           ;ECU_layer/LCD/ecu_lcd.c: 204:       ret= gpio_pin_direction_init(&(lcd->lcd_data[5]));
  1535   001310  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1536   001312  0F07               	addlw	7
  1537   001314  6E01               	movwf	gpio_pin_direction_init@_pin_config^0,c
  1538   001316  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1539   00131A  6E13               	movwf	lcd_8bit_init@ret^0,c
  1540                           
  1541                           ;ECU_layer/LCD/ecu_lcd.c: 205:       ret= gpio_pin_direction_init(&(lcd->lcd_data[6]));
  1542   00131C  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1543   00131E  0F08               	addlw	8
  1544   001320  6E01               	movwf	gpio_pin_direction_init@_pin_config^0,c
  1545   001322  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1546   001326  6E13               	movwf	lcd_8bit_init@ret^0,c
  1547                           
  1548                           ;ECU_layer/LCD/ecu_lcd.c: 206:       ret= gpio_pin_direction_init(&(lcd->lcd_data[7]));
  1549   001328  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1550   00132A  0F09               	addlw	9
  1551   00132C  6E01               	movwf	gpio_pin_direction_init@_pin_config^0,c
  1552   00132E  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1553   001332  6E13               	movwf	lcd_8bit_init@ret^0,c
  1554                           
  1555                           ;ECU_layer/LCD/ecu_lcd.c: 207:       ret= gpio_pin_write_logic(&(lcd->lcd_data[0]),lcd->
      +                          lcd_data[0].logic);
  1556   001334  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1557   001336  0F02               	addlw	2
  1558   001338  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1559   00133A  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1560   00133C  6ED9               	movwf	fsr2l,c
  1561   00133E  6ADA               	clrf	fsr2h,c
  1562   001340  0E02               	movlw	2
  1563   001342  26D9               	addwf	fsr2l,f,c
  1564   001344  0E00               	movlw	0
  1565   001346  BEDF               	btfsc	indf2,7,c
  1566   001348  0E01               	movlw	1
  1567   00134A  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  1568   00134C  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  1569   001350  6E13               	movwf	lcd_8bit_init@ret^0,c
  1570                           
  1571                           ;ECU_layer/LCD/ecu_lcd.c: 208:       ret= gpio_pin_write_logic(&(lcd->lcd_data[1]),lcd->
      +                          lcd_data[1].logic);
  1572   001352  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1573   001354  0F03               	addlw	3
  1574   001356  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1575   001358  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1576   00135A  6ED9               	movwf	fsr2l,c
  1577   00135C  6ADA               	clrf	fsr2h,c
  1578   00135E  0E03               	movlw	3
  1579   001360  26D9               	addwf	fsr2l,f,c
  1580   001362  0E00               	movlw	0
  1581   001364  BEDF               	btfsc	indf2,7,c
  1582   001366  0E01               	movlw	1
  1583   001368  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  1584   00136A  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  1585   00136E  6E13               	movwf	lcd_8bit_init@ret^0,c
  1586                           
  1587                           ;ECU_layer/LCD/ecu_lcd.c: 209:       ret= gpio_pin_write_logic(&(lcd->lcd_data[2]),lcd->
      +                          lcd_data[2].logic);
  1588   001370  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1589   001372  0F04               	addlw	4
  1590   001374  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1591   001376  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1592   001378  6ED9               	movwf	fsr2l,c
  1593   00137A  6ADA               	clrf	fsr2h,c
  1594   00137C  0E04               	movlw	4
  1595   00137E  26D9               	addwf	fsr2l,f,c
  1596   001380  0E00               	movlw	0
  1597   001382  BEDF               	btfsc	indf2,7,c
  1598   001384  0E01               	movlw	1
  1599   001386  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  1600   001388  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  1601   00138C  6E13               	movwf	lcd_8bit_init@ret^0,c
  1602                           
  1603                           ;ECU_layer/LCD/ecu_lcd.c: 210:       ret= gpio_pin_write_logic(&(lcd->lcd_data[3]),lcd->
      +                          lcd_data[3].logic);
  1604   00138E  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1605   001390  0F05               	addlw	5
  1606   001392  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1607   001394  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1608   001396  6ED9               	movwf	fsr2l,c
  1609   001398  6ADA               	clrf	fsr2h,c
  1610   00139A  0E05               	movlw	5
  1611   00139C  26D9               	addwf	fsr2l,f,c
  1612   00139E  0E00               	movlw	0
  1613   0013A0  BEDF               	btfsc	indf2,7,c
  1614   0013A2  0E01               	movlw	1
  1615   0013A4  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  1616   0013A6  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  1617   0013AA  6E13               	movwf	lcd_8bit_init@ret^0,c
  1618                           
  1619                           ;ECU_layer/LCD/ecu_lcd.c: 211:       ret= gpio_pin_write_logic(&(lcd->lcd_data[4]),lcd->
      +                          lcd_data[4].logic);
  1620   0013AC  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1621   0013AE  0F06               	addlw	6
  1622   0013B0  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1623   0013B2  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1624   0013B4  6ED9               	movwf	fsr2l,c
  1625   0013B6  6ADA               	clrf	fsr2h,c
  1626   0013B8  0E06               	movlw	6
  1627   0013BA  26D9               	addwf	fsr2l,f,c
  1628   0013BC  0E00               	movlw	0
  1629   0013BE  BEDF               	btfsc	indf2,7,c
  1630   0013C0  0E01               	movlw	1
  1631   0013C2  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  1632   0013C4  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  1633   0013C8  6E13               	movwf	lcd_8bit_init@ret^0,c
  1634                           
  1635                           ;ECU_layer/LCD/ecu_lcd.c: 212:       ret= gpio_pin_write_logic(&(lcd->lcd_data[5]),lcd->
      +                          lcd_data[5].logic);
  1636   0013CA  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1637   0013CC  0F07               	addlw	7
  1638   0013CE  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1639   0013D0  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1640   0013D2  6ED9               	movwf	fsr2l,c
  1641   0013D4  6ADA               	clrf	fsr2h,c
  1642   0013D6  0E07               	movlw	7
  1643   0013D8  26D9               	addwf	fsr2l,f,c
  1644   0013DA  0E00               	movlw	0
  1645   0013DC  BEDF               	btfsc	indf2,7,c
  1646   0013DE  0E01               	movlw	1
  1647   0013E0  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  1648   0013E2  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  1649   0013E6  6E13               	movwf	lcd_8bit_init@ret^0,c
  1650                           
  1651                           ;ECU_layer/LCD/ecu_lcd.c: 213:       ret= gpio_pin_write_logic(&(lcd->lcd_data[6]),lcd->
      +                          lcd_data[6].logic);
  1652   0013E8  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1653   0013EA  0F08               	addlw	8
  1654   0013EC  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1655   0013EE  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1656   0013F0  6ED9               	movwf	fsr2l,c
  1657   0013F2  6ADA               	clrf	fsr2h,c
  1658   0013F4  0E08               	movlw	8
  1659   0013F6  26D9               	addwf	fsr2l,f,c
  1660   0013F8  0E00               	movlw	0
  1661   0013FA  BEDF               	btfsc	indf2,7,c
  1662   0013FC  0E01               	movlw	1
  1663   0013FE  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  1664   001400  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  1665   001404  6E13               	movwf	lcd_8bit_init@ret^0,c
  1666                           
  1667                           ;ECU_layer/LCD/ecu_lcd.c: 214:       ret= gpio_pin_write_logic(&(lcd->lcd_data[7]),lcd->
      +                          lcd_data[7].logic);
  1668   001406  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1669   001408  0F09               	addlw	9
  1670   00140A  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1671   00140C  5011               	movf	lcd_8bit_init@lcd^0,w,c
  1672   00140E  6ED9               	movwf	fsr2l,c
  1673   001410  6ADA               	clrf	fsr2h,c
  1674   001412  0E09               	movlw	9
  1675   001414  26D9               	addwf	fsr2l,f,c
  1676   001416  0E00               	movlw	0
  1677   001418  BEDF               	btfsc	indf2,7,c
  1678   00141A  0E01               	movlw	1
  1679   00141C  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  1680   00141E  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  1681   001422  6E13               	movwf	lcd_8bit_init@ret^0,c
  1682   001424                     
  1683                           ;ECU_layer/LCD/ecu_lcd.c: 216:       _delay((unsigned long)((20)*(8000000UL/4000.0)));
  1684   001424  0E34               	movlw	52
  1685   001426  6E12               	movwf	??_lcd_8bit_init^0,c
  1686   001428  0EF2               	movlw	242
  1687   00142A                     u2787:
  1688   00142A  2EE8               	decfsz	wreg,f,c
  1689   00142C  D7FE               	bra	u2787
  1690   00142E  2E12               	decfsz	??_lcd_8bit_init^0,f,c
  1691   001430  D7FC               	bra	u2787
  1692   001432  C011  F00B         	movff	lcd_8bit_init@lcd,lcd_8bit_send_command@lcd
  1693   001436  0E38               	movlw	56
  1694   001438  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  1695   00143A  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  1696                           
  1697                           ;ECU_layer/LCD/ecu_lcd.c: 218:       _delay((unsigned long)((5)*(8000000UL/4000.0)));
  1698   00143E  0E0D               	movlw	13
  1699   001440  6E12               	movwf	??_lcd_8bit_init^0,c
  1700   001442  0EFC               	movlw	252
  1701   001444                     u2797:
  1702   001444  2EE8               	decfsz	wreg,f,c
  1703   001446  D7FE               	bra	u2797
  1704   001448  2E12               	decfsz	??_lcd_8bit_init^0,f,c
  1705   00144A  D7FC               	bra	u2797
  1706   00144C  C011  F00B         	movff	lcd_8bit_init@lcd,lcd_8bit_send_command@lcd
  1707   001450  0E38               	movlw	56
  1708   001452  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  1709   001454  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  1710   001458                     
  1711                           ;ECU_layer/LCD/ecu_lcd.c: 220:        _delay((unsigned long)((150)*(8000000UL/4000000.0)
      +                          ));
  1712   001458  0E64               	movlw	100
  1713   00145A                     u2807:
  1714   00145A  2EE8               	decfsz	wreg,f,c
  1715   00145C  D7FE               	bra	u2807
  1716                           
  1717                           ;ECU_layer/LCD/ecu_lcd.c: 221:       ret = lcd_8bit_send_command(lcd,0x38);
  1718   00145E  C011  F00B         	movff	lcd_8bit_init@lcd,lcd_8bit_send_command@lcd
  1719   001462  0E38               	movlw	56
  1720   001464  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  1721   001466  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  1722   00146A  6E13               	movwf	lcd_8bit_init@ret^0,c
  1723                           
  1724                           ;ECU_layer/LCD/ecu_lcd.c: 222:       ret = lcd_8bit_send_command(lcd,0x01);
  1725   00146C  C011  F00B         	movff	lcd_8bit_init@lcd,lcd_8bit_send_command@lcd
  1726   001470  0E01               	movlw	1
  1727   001472  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  1728   001474  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  1729   001478  6E13               	movwf	lcd_8bit_init@ret^0,c
  1730                           
  1731                           ;ECU_layer/LCD/ecu_lcd.c: 223:       ret = lcd_8bit_send_command(lcd,0x02);
  1732   00147A  C011  F00B         	movff	lcd_8bit_init@lcd,lcd_8bit_send_command@lcd
  1733   00147E  0E02               	movlw	2
  1734   001480  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  1735   001482  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  1736   001486  6E13               	movwf	lcd_8bit_init@ret^0,c
  1737                           
  1738                           ;ECU_layer/LCD/ecu_lcd.c: 224:       ret = lcd_8bit_send_command(lcd,0x06);
  1739   001488  C011  F00B         	movff	lcd_8bit_init@lcd,lcd_8bit_send_command@lcd
  1740   00148C  0E06               	movlw	6
  1741   00148E  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  1742   001490  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  1743   001494  6E13               	movwf	lcd_8bit_init@ret^0,c
  1744                           
  1745                           ;ECU_layer/LCD/ecu_lcd.c: 225:       ret = lcd_8bit_send_command(lcd,0x0C);
  1746   001496  C011  F00B         	movff	lcd_8bit_init@lcd,lcd_8bit_send_command@lcd
  1747   00149A  0E0C               	movlw	12
  1748   00149C  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  1749   00149E  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  1750   0014A2  6E13               	movwf	lcd_8bit_init@ret^0,c
  1751                           
  1752                           ;ECU_layer/LCD/ecu_lcd.c: 226:       ret = lcd_8bit_send_command(lcd,0x38);
  1753   0014A4  C011  F00B         	movff	lcd_8bit_init@lcd,lcd_8bit_send_command@lcd
  1754   0014A8  0E38               	movlw	56
  1755   0014AA  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  1756   0014AC  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  1757   0014B0  6E13               	movwf	lcd_8bit_init@ret^0,c
  1758                           
  1759                           ;ECU_layer/LCD/ecu_lcd.c: 227:       ret = lcd_8bit_send_command(lcd,0x80);
  1760   0014B2  C011  F00B         	movff	lcd_8bit_init@lcd,lcd_8bit_send_command@lcd
  1761   0014B6  0E80               	movlw	128
  1762   0014B8  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  1763   0014BA  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  1764   0014BE  6E13               	movwf	lcd_8bit_init@ret^0,c
  1765   0014C0                     l2851:
  1766                           
  1767                           ;ECU_layer/LCD/ecu_lcd.c: 230:     return ret ;
  1768   0014C0  5013               	movf	lcd_8bit_init@ret^0,w,c
  1769   0014C2  0012               	return		;funcret
  1770   0014C4                     __end_of_lcd_8bit_init:
  1771                           	callstack 0
  1772                           
  1773 ;; *************** function _keypad_init *****************
  1774 ;; Defined at:
  1775 ;;		line 19 in file "ECU_layer/KEYPAD/ecu_keypad.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;  keypad_obj      1    8[COMRAM] PTR const struct .
  1778 ;;		 -> keypad_obj(8), 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  r_counter       1   11[COMRAM] unsigned char 
  1781 ;;  c_counter       1   10[COMRAM] unsigned char 
  1782 ;;  ret             1    9[COMRAM] unsigned char 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      unsigned char 
  1785 ;; Registers used:
  1786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1792 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;Total ram usage:        4 bytes
  1797 ;; Hardware stack levels used: 1
  1798 ;; Hardware stack levels required when called: 1
  1799 ;; This function calls:
  1800 ;;		_gpio_pin_direction_init
  1801 ;;		_gpio_pin_write_logic
  1802 ;; This function is called by:
  1803 ;;		_main
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text5
  1808   001E42                     __ptext5:
  1809                           	callstack 0
  1810   001E42                     _keypad_init:
  1811                           	callstack 29
  1812   001E42                     
  1813                           ;ECU_layer/KEYPAD/ecu_keypad.c: 21:   uint8 r_counter=0 , c_counter=0;
  1814   001E42  0E00               	movlw	0
  1815   001E44  6E0C               	movwf	keypad_init@r_counter^0,c
  1816   001E46  0E00               	movlw	0
  1817   001E48  6E0B               	movwf	keypad_init@c_counter^0,c
  1818                           
  1819                           ;ECU_layer/KEYPAD/ecu_keypad.c: 22:   if(((void*)0) == keypad_obj){
  1820   001E4A  5009               	movf	keypad_init@keypad_obj^0,w,c
  1821   001E4C  A4D8               	btfss	status,2,c
  1822   001E4E  EF2B  F00F         	goto	u2141
  1823   001E52  EF2D  F00F         	goto	u2140
  1824   001E56                     u2141:
  1825   001E56  EF31  F00F         	goto	l2859
  1826   001E5A                     u2140:
  1827   001E5A                     
  1828                           ;ECU_layer/KEYPAD/ecu_keypad.c: 23:       ret = (Std_ReturnType)0x00;
  1829   001E5A  0E00               	movlw	0
  1830   001E5C  6E0A               	movwf	keypad_init@ret^0,c
  1831                           
  1832                           ;ECU_layer/KEYPAD/ecu_keypad.c: 24:   }
  1833   001E5E  EF62  F00F         	goto	l2883
  1834   001E62                     l2859:
  1835                           
  1836                           ;ECU_layer/KEYPAD/ecu_keypad.c: 26:       for(r_counter = 0 ; r_counter <4 ;r_counter++)
      +                          {
  1837   001E62  0E00               	movlw	0
  1838   001E64  6E0C               	movwf	keypad_init@r_counter^0,c
  1839   001E66                     l2865:
  1840                           
  1841                           ;ECU_layer/KEYPAD/ecu_keypad.c: 27:           ret = gpio_pin_direction_init(&(keypad_obj
      +                          ->keypad_r_pins[r_counter]));
  1842   001E66  5009               	movf	keypad_init@keypad_obj^0,w,c
  1843   001E68  240C               	addwf	keypad_init@r_counter^0,w,c
  1844   001E6A  6E01               	movwf	gpio_pin_direction_init@_pin_config^0,c
  1845   001E6C  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1846   001E70  6E0A               	movwf	keypad_init@ret^0,c
  1847                           
  1848                           ;ECU_layer/KEYPAD/ecu_keypad.c: 28:           ret = gpio_pin_write_logic(&(keypad_obj->k
      +                          eypad_r_pins[r_counter]),keypad_obj->keypad_r_pins[r_counter].logic);
  1849   001E72  5009               	movf	keypad_init@keypad_obj^0,w,c
  1850   001E74  240C               	addwf	keypad_init@r_counter^0,w,c
  1851   001E76  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1852   001E78  5009               	movf	keypad_init@keypad_obj^0,w,c
  1853   001E7A  240C               	addwf	keypad_init@r_counter^0,w,c
  1854   001E7C  6ED9               	movwf	fsr2l,c
  1855   001E7E  6ADA               	clrf	fsr2h,c
  1856   001E80  0E00               	movlw	0
  1857   001E82  BEDF               	btfsc	indf2,7,c
  1858   001E84  0E01               	movlw	1
  1859   001E86  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  1860   001E88  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  1861   001E8C  6E0A               	movwf	keypad_init@ret^0,c
  1862   001E8E                     
  1863                           ;ECU_layer/KEYPAD/ecu_keypad.c: 30:       }
  1864   001E8E  2A0C               	incf	keypad_init@r_counter^0,f,c
  1865   001E90  0E03               	movlw	3
  1866   001E92  640C               	cpfsgt	keypad_init@r_counter^0,c
  1867   001E94  EF4E  F00F         	goto	u2151
  1868   001E98  EF50  F00F         	goto	u2150
  1869   001E9C                     u2151:
  1870   001E9C  EF33  F00F         	goto	l2865
  1871   001EA0                     u2150:
  1872   001EA0                     
  1873                           ;ECU_layer/KEYPAD/ecu_keypad.c: 31:       for(c_counter = 0 ; c_counter <4 ;c_counter++ 
      +                          ){
  1874   001EA0  0E00               	movlw	0
  1875   001EA2  6E0B               	movwf	keypad_init@c_counter^0,c
  1876   001EA4                     l2877:
  1877                           
  1878                           ;ECU_layer/KEYPAD/ecu_keypad.c: 32:           ret = gpio_pin_direction_init(&(keypad_obj
      +                          ->keypad_c_pins[c_counter]));
  1879   001EA4  5009               	movf	keypad_init@keypad_obj^0,w,c
  1880   001EA6  240B               	addwf	keypad_init@c_counter^0,w,c
  1881   001EA8  0F04               	addlw	4
  1882   001EAA  6E01               	movwf	gpio_pin_direction_init@_pin_config^0,c
  1883   001EAC  EC3E  F00B         	call	_gpio_pin_direction_init	;wreg free
  1884   001EB0  6E0A               	movwf	keypad_init@ret^0,c
  1885   001EB2                     
  1886                           ;ECU_layer/KEYPAD/ecu_keypad.c: 33:       }
  1887   001EB2  2A0B               	incf	keypad_init@c_counter^0,f,c
  1888   001EB4  0E03               	movlw	3
  1889   001EB6  640B               	cpfsgt	keypad_init@c_counter^0,c
  1890   001EB8  EF60  F00F         	goto	u2161
  1891   001EBC  EF62  F00F         	goto	u2160
  1892   001EC0                     u2161:
  1893   001EC0  EF52  F00F         	goto	l2877
  1894   001EC4                     u2160:
  1895   001EC4                     l2883:
  1896                           
  1897                           ;ECU_layer/KEYPAD/ecu_keypad.c: 35:   return ret;
  1898   001EC4  500A               	movf	keypad_init@ret^0,w,c
  1899   001EC6  0012               	return		;funcret
  1900   001EC8                     __end_of_keypad_init:
  1901                           	callstack 0
  1902                           
  1903 ;; *************** function _gpio_pin_direction_init *****************
  1904 ;; Defined at:
  1905 ;;		line 30 in file "MCAL_layer/GPIO/hal_gpio.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  _pin_config     1    0[COMRAM] PTR const struct .
  1908 ;;		 -> keypad_obj$keypad_c_pins(4), keypad_obj$keypad_r_pins(4), keypad_obj(8), lcd_obj$lcd_data(8), 
  1909 ;;		 -> lcd_obj(10), 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  ret             1    6[COMRAM] unsigned char 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      unsigned char 
  1914 ;; Registers used:
  1915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1921 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;Total ram usage:        7 bytes
  1926 ;; Hardware stack levels used: 1
  1927 ;; This function calls:
  1928 ;;		Nothing
  1929 ;; This function is called by:
  1930 ;;		_keypad_init
  1931 ;;		_lcd_8bit_init
  1932 ;;		_gpio_pin_intialize
  1933 ;;		_lcd_4bit_init
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text6
  1938   00167C                     __ptext6:
  1939                           	callstack 0
  1940   00167C                     _gpio_pin_direction_init:
  1941                           	callstack 29
  1942   00167C                     
  1943                           ;MCAL_layer/GPIO/hal_gpio.c: 31:     Std_ReturnType ret = (Std_ReturnType)0x01;
  1944   00167C  0E01               	movlw	1
  1945   00167E  6E07               	movwf	gpio_pin_direction_init@ret^0,c
  1946                           
  1947                           ;MCAL_layer/GPIO/hal_gpio.c: 33:     if((((void*)0) == _pin_config) || (_pin_config->pin
      +                           > 8 -1)){
  1948   001680  5001               	movf	gpio_pin_direction_init@_pin_config^0,w,c
  1949   001682  B4D8               	btfsc	status,2,c
  1950   001684  EF46  F00B         	goto	u2011
  1951   001688  EF48  F00B         	goto	u2010
  1952   00168C                     u2011:
  1953   00168C  EF58  F00B         	goto	l2753
  1954   001690                     u2010:
  1955   001690  5001               	movf	gpio_pin_direction_init@_pin_config^0,w,c
  1956   001692  6ED9               	movwf	fsr2l,c
  1957   001694  6ADA               	clrf	fsr2h,c
  1958   001696  30DF               	rrcf	223,w,c
  1959   001698  32E8               	rrcf	wreg,f,c
  1960   00169A  32E8               	rrcf	wreg,f,c
  1961   00169C  0B07               	andlw	7
  1962   00169E  6E02               	movwf	??_gpio_pin_direction_init^0,c
  1963   0016A0  0E07               	movlw	7
  1964   0016A2  6402               	cpfsgt	??_gpio_pin_direction_init^0,c
  1965   0016A4  EF56  F00B         	goto	u2021
  1966   0016A8  EF58  F00B         	goto	u2020
  1967   0016AC                     u2021:
  1968   0016AC  EFAF  F00B         	goto	l2761
  1969   0016B0                     u2020:
  1970   0016B0                     l2753:
  1971                           
  1972                           ;MCAL_layer/GPIO/hal_gpio.c: 34:     ret = (Std_ReturnType)0x00;
  1973   0016B0  0E00               	movlw	0
  1974   0016B2  6E07               	movwf	gpio_pin_direction_init@ret^0,c
  1975                           
  1976                           ;MCAL_layer/GPIO/hal_gpio.c: 36:     }
  1977   0016B4  EFCF  F00B         	goto	l2763
  1978   0016B8                     l2755:
  1979                           
  1980                           ;MCAL_layer/GPIO/hal_gpio.c: 40:             (*tris_reg[_pin_config->port] &= ~((uint8)1
      +                           << _pin_config->pin));
  1981   0016B8  5001               	movf	gpio_pin_direction_init@_pin_config^0,w,c
  1982   0016BA  6ED9               	movwf	fsr2l,c
  1983   0016BC  6ADA               	clrf	fsr2h,c
  1984   0016BE  30DF               	rrcf	223,w,c
  1985   0016C0  32E8               	rrcf	wreg,f,c
  1986   0016C2  32E8               	rrcf	wreg,f,c
  1987   0016C4  0B07               	andlw	7
  1988   0016C6  6E02               	movwf	??_gpio_pin_direction_init^0,c
  1989   0016C8  0E01               	movlw	1
  1990   0016CA  6E03               	movwf	(??_gpio_pin_direction_init+1)^0,c
  1991   0016CC  2A02               	incf	??_gpio_pin_direction_init^0,f,c
  1992   0016CE  EF6B  F00B         	goto	u2034
  1993   0016D2                     u2035:
  1994   0016D2  90D8               	bcf	status,0,c
  1995   0016D4  3603               	rlcf	(??_gpio_pin_direction_init+1)^0,f,c
  1996   0016D6                     u2034:
  1997   0016D6  2E02               	decfsz	??_gpio_pin_direction_init^0,f,c
  1998   0016D8  EF69  F00B         	goto	u2035
  1999   0016DC  5003               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  2000   0016DE  0AFF               	xorlw	255
  2001   0016E0  6E04               	movwf	(??_gpio_pin_direction_init+2)^0,c
  2002   0016E2  5001               	movf	gpio_pin_direction_init@_pin_config^0,w,c
  2003   0016E4  6ED9               	movwf	fsr2l,c
  2004   0016E6  6ADA               	clrf	fsr2h,c
  2005   0016E8  50DF               	movf	223,w,c
  2006   0016EA  0B07               	andlw	7
  2007   0016EC  0D02               	mullw	2
  2008   0016EE  50F3               	movf	243,w,c
  2009   0016F0  0FCF               	addlw	low _tris_reg
  2010   0016F2  6ED9               	movwf	fsr2l,c
  2011   0016F4  6ADA               	clrf	fsr2h,c
  2012   0016F6  CFDE F005          	movff	postinc2,??_gpio_pin_direction_init+3
  2013   0016FA  CFDD F006          	movff	postdec2,??_gpio_pin_direction_init+4
  2014   0016FE  C005  FFD9         	movff	??_gpio_pin_direction_init+3,fsr2l
  2015   001702  C006  FFDA         	movff	??_gpio_pin_direction_init+4,fsr2h
  2016   001706  5004               	movf	(??_gpio_pin_direction_init+2)^0,w,c
  2017   001708  16DF               	andwf	indf2,f,c
  2018                           
  2019                           ;MCAL_layer/GPIO/hal_gpio.c: 41:         break;
  2020   00170A  EFCF  F00B         	goto	l2763
  2021   00170E                     l2757:
  2022                           
  2023                           ;MCAL_layer/GPIO/hal_gpio.c: 43:             (*tris_reg[_pin_config->port] |= ((uint8)1 
      +                          << _pin_config->pin));
  2024   00170E  5001               	movf	gpio_pin_direction_init@_pin_config^0,w,c
  2025   001710  6ED9               	movwf	fsr2l,c
  2026   001712  6ADA               	clrf	fsr2h,c
  2027   001714  30DF               	rrcf	223,w,c
  2028   001716  32E8               	rrcf	wreg,f,c
  2029   001718  32E8               	rrcf	wreg,f,c
  2030   00171A  0B07               	andlw	7
  2031   00171C  6E02               	movwf	??_gpio_pin_direction_init^0,c
  2032   00171E  0E01               	movlw	1
  2033   001720  6E03               	movwf	(??_gpio_pin_direction_init+1)^0,c
  2034   001722  2A02               	incf	??_gpio_pin_direction_init^0,f,c
  2035   001724  EF96  F00B         	goto	u2044
  2036   001728                     u2045:
  2037   001728  90D8               	bcf	status,0,c
  2038   00172A  3603               	rlcf	(??_gpio_pin_direction_init+1)^0,f,c
  2039   00172C                     u2044:
  2040   00172C  2E02               	decfsz	??_gpio_pin_direction_init^0,f,c
  2041   00172E  EF94  F00B         	goto	u2045
  2042   001732  5001               	movf	gpio_pin_direction_init@_pin_config^0,w,c
  2043   001734  6ED9               	movwf	fsr2l,c
  2044   001736  6ADA               	clrf	fsr2h,c
  2045   001738  50DF               	movf	223,w,c
  2046   00173A  0B07               	andlw	7
  2047   00173C  0D02               	mullw	2
  2048   00173E  50F3               	movf	243,w,c
  2049   001740  0FCF               	addlw	low _tris_reg
  2050   001742  6ED9               	movwf	fsr2l,c
  2051   001744  6ADA               	clrf	fsr2h,c
  2052   001746  CFDE F004          	movff	postinc2,??_gpio_pin_direction_init+2
  2053   00174A  CFDD F005          	movff	postdec2,??_gpio_pin_direction_init+3
  2054   00174E  C004  FFD9         	movff	??_gpio_pin_direction_init+2,fsr2l
  2055   001752  C005  FFDA         	movff	??_gpio_pin_direction_init+3,fsr2h
  2056   001756  5003               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  2057   001758  12DF               	iorwf	indf2,f,c
  2058                           
  2059                           ;MCAL_layer/GPIO/hal_gpio.c: 44:             break;
  2060   00175A  EFCF  F00B         	goto	l2763
  2061   00175E                     l2761:
  2062   00175E  5001               	movf	gpio_pin_direction_init@_pin_config^0,w,c
  2063   001760  6ED9               	movwf	fsr2l,c
  2064   001762  6ADA               	clrf	fsr2h,c
  2065   001764  BCDF               	btfsc	indf2,6,c
  2066   001766  EFB7  F00B         	goto	u2051
  2067   00176A  EFBA  F00B         	goto	u2050
  2068   00176E                     u2051:
  2069   00176E  0E01               	movlw	1
  2070   001770  EFBB  F00B         	goto	u2060
  2071   001774                     u2050:
  2072   001774  0E00               	movlw	0
  2073   001776                     u2060:
  2074   001776  6E02               	movwf	??_gpio_pin_direction_init^0,c
  2075   001778  6A03               	clrf	(??_gpio_pin_direction_init+1)^0,c
  2076                           
  2077                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2078                           ; Switch size 1, requested type "simple"
  2079                           ; Number of cases is 1, Range of values is 0 to 0
  2080                           ; switch strategies available:
  2081                           ; Name         Instructions Cycles
  2082                           ; simple_byte            4     3 (average)
  2083                           ;	Chosen strategy is simple_byte
  2084   00177A  5003               	movf	(??_gpio_pin_direction_init+1)^0,w,c
  2085   00177C  0A00               	xorlw	0	; case 0
  2086   00177E  B4D8               	btfsc	status,2,c
  2087   001780  EFC4  F00B         	goto	l3351
  2088   001784  EF58  F00B         	goto	l2753
  2089   001788                     l3351:
  2090                           
  2091                           ; Switch size 1, requested type "simple"
  2092                           ; Number of cases is 2, Range of values is 0 to 1
  2093                           ; switch strategies available:
  2094                           ; Name         Instructions Cycles
  2095                           ; simple_byte            7     4 (average)
  2096                           ;	Chosen strategy is simple_byte
  2097   001788  5002               	movf	??_gpio_pin_direction_init^0,w,c
  2098   00178A  0A00               	xorlw	0	; case 0
  2099   00178C  B4D8               	btfsc	status,2,c
  2100   00178E  EF5C  F00B         	goto	l2755
  2101   001792  0A01               	xorlw	1	; case 1
  2102   001794  B4D8               	btfsc	status,2,c
  2103   001796  EF87  F00B         	goto	l2757
  2104   00179A  EF58  F00B         	goto	l2753
  2105   00179E                     l2763:
  2106                           
  2107                           ;MCAL_layer/GPIO/hal_gpio.c: 50:     return ret;
  2108   00179E  5007               	movf	gpio_pin_direction_init@ret^0,w,c
  2109   0017A0  0012               	return		;funcret
  2110   0017A2                     __end_of_gpio_pin_direction_init:
  2111                           	callstack 0
  2112                           
  2113 ;; *************** function _div_two_numbers *****************
  2114 ;; Defined at:
  2115 ;;		line 219 in file "application.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;		None
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;  second_numbe    1   64[COMRAM] unsigned char 
  2120 ;;  first_number    1   63[COMRAM] unsigned char 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  1    wreg      void 
  2123 ;; Registers used:
  2124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;Total ram usage:        3 bytes
  2135 ;; Hardware stack levels used: 1
  2136 ;; Hardware stack levels required when called: 6
  2137 ;; This function calls:
  2138 ;;		___lbdiv
  2139 ;;		_convert_uint32_to_string
  2140 ;;		_lcd_8bit_send_string_pos
  2141 ;; This function is called by:
  2142 ;;		_main
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           	psect	text7
  2147   002076                     __ptext7:
  2148                           	callstack 0
  2149   002076                     _div_two_numbers:
  2150                           	callstack 24
  2151   002076                     
  2152                           ;application.c: 220:    uint8 first_number, second_number ;;application.c: 222:    first
      +                          _number= (second_digit1-48)+10*(first_digit1-48);
  2153   002076  507F               	movf	_first_digit1^0,w,c
  2154   002078  0D0A               	mullw	10
  2155   00207A  50F3               	movf	243,w,c
  2156   00207C  2461               	addwf	_second_digit1^0,w,c
  2157   00207E  0FF0               	addlw	240
  2158   002080  6E40               	movwf	div_two_numbers@first_number^0,c
  2159                           
  2160                           ;application.c: 223:    second_number = (second_digit2-48)+10*(first_digit2-48);
  2161   002082  5060               	movf	_first_digit2^0,w,c
  2162   002084  0D0A               	mullw	10
  2163   002086  50F3               	movf	243,w,c
  2164   002088  245F               	addwf	_second_digit2^0,w,c
  2165   00208A  0FF0               	addlw	240
  2166   00208C  6E41               	movwf	div_two_numbers@second_number^0,c
  2167   00208E                     
  2168                           ;application.c: 224:    result = first_number / second_number;
  2169   00208E  C041  F001         	movff	div_two_numbers@second_number,___lbdiv@divisor
  2170   002092  5040               	movf	div_two_numbers@first_number^0,w,c
  2171   002094  EC6A  F010         	call	___lbdiv
  2172   002098  6E3F               	movwf	??_div_two_numbers^0,c
  2173   00209A  503F               	movf	??_div_two_numbers^0,w,c
  2174   00209C  6E48               	movwf	_result^0,c
  2175   00209E  6A49               	clrf	(_result+1)^0,c
  2176   0020A0                     
  2177                           ;application.c: 225:    ret = convert_uint32_to_string(result , str);
  2178   0020A0  C048  F02D         	movff	_result,convert_uint32_to_string@value
  2179   0020A4  C049  F02E         	movff	_result+1,convert_uint32_to_string@value+1
  2180   0020A8  0E00               	movlw	0
  2181   0020AA  BE2E               	btfsc	(convert_uint32_to_string@value+1)^0,7,c
  2182   0020AC  0EFF               	movlw	-1
  2183   0020AE  6E2F               	movwf	(convert_uint32_to_string@value+2)^0,c
  2184   0020B0  6E30               	movwf	(convert_uint32_to_string@value+3)^0,c
  2185   0020B2  0E4E               	movlw	low _str
  2186   0020B4  6E31               	movwf	convert_uint32_to_string@str^0,c
  2187   0020B6  EC81  F00E         	call	_convert_uint32_to_string	;wreg free
  2188   0020BA  6E7E               	movwf	_ret^0,c
  2189   0020BC                     
  2190                           ;application.c: 226:    ret = lcd_8bit_send_string_pos(&lcd_obj,1,11,str);
  2191   0020BC  0E6C               	movlw	low _lcd_obj
  2192   0020BE  6E17               	movwf	lcd_8bit_send_string_pos@lcd^0,c
  2193   0020C0  0E01               	movlw	1
  2194   0020C2  6E18               	movwf	lcd_8bit_send_string_pos@row^0,c
  2195   0020C4  0E0B               	movlw	11
  2196   0020C6  6E19               	movwf	lcd_8bit_send_string_pos@col^0,c
  2197   0020C8  0E4E               	movlw	low _str
  2198   0020CA  6E1A               	movwf	lcd_8bit_send_string_pos@str^0,c
  2199   0020CC  EC1E  F011         	call	_lcd_8bit_send_string_pos	;wreg free
  2200   0020D0  6E7E               	movwf	_ret^0,c
  2201   0020D2  0012               	return		;funcret
  2202   0020D4                     __end_of_div_two_numbers:
  2203                           	callstack 0
  2204                           
  2205 ;; *************** function _convert_uint32_to_string *****************
  2206 ;; Defined at:
  2207 ;;		line 411 in file "ECU_layer/LCD/ecu_lcd.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;  value           4   44[COMRAM] unsigned long 
  2210 ;;  str             1   48[COMRAM] PTR unsigned char 
  2211 ;;		 -> str(14), 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  Temp_String    11   49[COMRAM] unsigned char [11]
  2214 ;;  DataCounter     1   61[COMRAM] unsigned char 
  2215 ;;  ret             1   60[COMRAM] unsigned char 
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      unsigned char 
  2218 ;; Registers used:
  2219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2225 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;Total ram usage:       18 bytes
  2230 ;; Hardware stack levels used: 1
  2231 ;; Hardware stack levels required when called: 5
  2232 ;; This function calls:
  2233 ;;		_memset
  2234 ;;		_sprintf
  2235 ;; This function is called by:
  2236 ;;		_sub_two_numbers
  2237 ;;		_mult_two_numbers
  2238 ;;		_div_two_numbers
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	text8
  2243   001D02                     __ptext8:
  2244                           	callstack 0
  2245   001D02                     _convert_uint32_to_string:
  2246                           	callstack 24
  2247   001D02                     
  2248                           ;ECU_layer/LCD/ecu_lcd.c: 412:     Std_ReturnType ret = (Std_ReturnType)0x01;
  2249   001D02  0E01               	movlw	1
  2250   001D04  6E3D               	movwf	convert_uint32_to_string@ret^0,c
  2251   001D06                     
  2252                           ;ECU_layer/LCD/ecu_lcd.c: 413:     uint8 Temp_String[11] = {0};
  2253   001D06  EE20  F032         	lfsr	2,convert_uint32_to_string@Temp_String
  2254   001D0A  0E0A               	movlw	10
  2255   001D0C                     u1981:
  2256   001D0C  6ADE               	clrf	postinc2,c
  2257   001D0E  06E8               	decf	wreg,f,c
  2258   001D10  E2FD               	bc	u1981
  2259   001D12                     
  2260                           ;ECU_layer/LCD/ecu_lcd.c: 414:     uint8 DataCounter = 0;
  2261   001D12  0E00               	movlw	0
  2262   001D14  6E3E               	movwf	convert_uint32_to_string@DataCounter^0,c
  2263   001D16                     
  2264                           ;ECU_layer/LCD/ecu_lcd.c: 415:     if(((void*)0) == str){
  2265   001D16  5031               	movf	convert_uint32_to_string@str^0,w,c
  2266   001D18  A4D8               	btfss	status,2,c
  2267   001D1A  EF91  F00E         	goto	u1991
  2268   001D1E  EF93  F00E         	goto	u1990
  2269   001D22                     u1991:
  2270   001D22  EF97  F00E         	goto	l2733
  2271   001D26                     u1990:
  2272   001D26                     
  2273                           ;ECU_layer/LCD/ecu_lcd.c: 416:         ret = (Std_ReturnType)0x00;
  2274   001D26  0E00               	movlw	0
  2275   001D28  6E3D               	movwf	convert_uint32_to_string@ret^0,c
  2276                           
  2277                           ;ECU_layer/LCD/ecu_lcd.c: 417:     }
  2278   001D2A  EFD0  F00E         	goto	l2745
  2279   001D2E                     l2733:
  2280                           
  2281                           ;ECU_layer/LCD/ecu_lcd.c: 419:         memset(str, ' ', 10);
  2282   001D2E  C031  F001         	movff	convert_uint32_to_string@str,memset@dest
  2283   001D32  0E00               	movlw	0
  2284   001D34  6E03               	movwf	(memset@c+1)^0,c
  2285   001D36  0E20               	movlw	32
  2286   001D38  6E02               	movwf	memset@c^0,c
  2287   001D3A  0E00               	movlw	0
  2288   001D3C  6E05               	movwf	(memset@n+1)^0,c
  2289   001D3E  0E0A               	movlw	10
  2290   001D40  6E04               	movwf	memset@n^0,c
  2291   001D42  ECF7  F011         	call	_memset	;wreg free
  2292   001D46                     
  2293                           ;ECU_layer/LCD/ecu_lcd.c: 420:         str[10] = '\0';
  2294   001D46  5031               	movf	convert_uint32_to_string@str^0,w,c
  2295   001D48  6ED9               	movwf	fsr2l,c
  2296   001D4A  6ADA               	clrf	fsr2h,c
  2297   001D4C  0E0A               	movlw	10
  2298   001D4E  26D9               	addwf	fsr2l,f,c
  2299   001D50  6ADF               	clrf	indf2,c
  2300   001D52                     
  2301                           ;ECU_layer/LCD/ecu_lcd.c: 421:         sprintf((char *)Temp_String, "%i", value);
  2302   001D52  0E32               	movlw	low convert_uint32_to_string@Temp_String
  2303   001D54  6E1A               	movwf	sprintf@s^0,c
  2304   001D56  0E11               	movlw	low STR_1
  2305   001D58  6E1B               	movwf	sprintf@fmt^0,c
  2306   001D5A  C02D  F01C         	movff	convert_uint32_to_string@value,?_sprintf+2
  2307   001D5E  C02E  F01D         	movff	convert_uint32_to_string@value+1,?_sprintf+3
  2308   001D62  C02F  F01E         	movff	convert_uint32_to_string@value+2,?_sprintf+4
  2309   001D66  C030  F01F         	movff	convert_uint32_to_string@value+3,?_sprintf+5
  2310   001D6A  ECC3  F011         	call	_sprintf	;wreg free
  2311                           
  2312                           ;ECU_layer/LCD/ecu_lcd.c: 422:         while(Temp_String[DataCounter] != '\0'){
  2313   001D6E  EFC4  F00E         	goto	l2743
  2314   001D72                     l2739:
  2315                           
  2316                           ;ECU_layer/LCD/ecu_lcd.c: 423:             str[DataCounter] = Temp_String[DataCounter];
  2317   001D72  503E               	movf	convert_uint32_to_string@DataCounter^0,w,c
  2318   001D74  0F32               	addlw	low convert_uint32_to_string@Temp_String
  2319   001D76  6ED9               	movwf	fsr2l,c
  2320   001D78  6ADA               	clrf	fsr2h,c
  2321   001D7A  5031               	movf	convert_uint32_to_string@str^0,w,c
  2322   001D7C  243E               	addwf	convert_uint32_to_string@DataCounter^0,w,c
  2323   001D7E  6EE1               	movwf	fsr1l,c
  2324   001D80  6AE2               	clrf	fsr1h,c
  2325   001D82  CFDF FFE7          	movff	indf2,indf1
  2326   001D86                     
  2327                           ;ECU_layer/LCD/ecu_lcd.c: 424:             DataCounter++;
  2328   001D86  2A3E               	incf	convert_uint32_to_string@DataCounter^0,f,c
  2329   001D88                     l2743:
  2330                           
  2331                           ;ECU_layer/LCD/ecu_lcd.c: 422:         while(Temp_String[DataCounter] != '\0'){
  2332   001D88  503E               	movf	convert_uint32_to_string@DataCounter^0,w,c
  2333   001D8A  0F32               	addlw	low convert_uint32_to_string@Temp_String
  2334   001D8C  6ED9               	movwf	fsr2l,c
  2335   001D8E  6ADA               	clrf	fsr2h,c
  2336   001D90  50DF               	movf	indf2,w,c
  2337   001D92  A4D8               	btfss	status,2,c
  2338   001D94  EFCE  F00E         	goto	u2001
  2339   001D98  EFD0  F00E         	goto	u2000
  2340   001D9C                     u2001:
  2341   001D9C  EFB9  F00E         	goto	l2739
  2342   001DA0                     u2000:
  2343   001DA0                     l2745:
  2344                           
  2345                           ;ECU_layer/LCD/ecu_lcd.c: 427:     return ret;
  2346   001DA0  503D               	movf	convert_uint32_to_string@ret^0,w,c
  2347   001DA2  0012               	return		;funcret
  2348   001DA4                     __end_of_convert_uint32_to_string:
  2349                           	callstack 0
  2350                           
  2351 ;; *************** function ___lbdiv *****************
  2352 ;; Defined at:
  2353 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lbdiv.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;  dividend        1    wreg     unsigned char 
  2356 ;;  divisor         1    0[COMRAM] unsigned char 
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;  dividend        1    1[COMRAM] unsigned char 
  2359 ;;  quotient        1    3[COMRAM] unsigned char 
  2360 ;;  counter         1    2[COMRAM] unsigned char 
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  1    wreg      unsigned char 
  2363 ;; Registers used:
  2364 ;;		wreg, status,2, status,0
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2370 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2373 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2374 ;;Total ram usage:        4 bytes
  2375 ;; Hardware stack levels used: 1
  2376 ;; This function calls:
  2377 ;;		Nothing
  2378 ;; This function is called by:
  2379 ;;		_div_two_numbers
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text9
  2384   0020D4                     __ptext9:
  2385                           	callstack 0
  2386   0020D4                     ___lbdiv:
  2387                           	callstack 29
  2388                           
  2389                           ;incstack = 0
  2390                           ;___lbdiv@dividend stored from wreg
  2391   0020D4  6E02               	movwf	___lbdiv@dividend^0,c
  2392   0020D6  0E00               	movlw	0
  2393   0020D8  6E04               	movwf	___lbdiv@quotient^0,c
  2394   0020DA  5001               	movf	___lbdiv@divisor^0,w,c
  2395   0020DC  B4D8               	btfsc	status,2,c
  2396   0020DE  EF73  F010         	goto	u2101
  2397   0020E2  EF75  F010         	goto	u2100
  2398   0020E6                     u2101:
  2399   0020E6  EF96  F010         	goto	l2833
  2400   0020EA                     u2100:
  2401   0020EA  0E01               	movlw	1
  2402   0020EC  6E03               	movwf	___lbdiv@counter^0,c
  2403   0020EE  EF7C  F010         	goto	l2821
  2404   0020F2                     l2817:
  2405   0020F2  90D8               	bcf	status,0,c
  2406   0020F4  3601               	rlcf	___lbdiv@divisor^0,f,c
  2407   0020F6  2A03               	incf	___lbdiv@counter^0,f,c
  2408   0020F8                     l2821:
  2409   0020F8  AE01               	btfss	___lbdiv@divisor^0,7,c
  2410   0020FA  EF81  F010         	goto	u2111
  2411   0020FE  EF83  F010         	goto	u2110
  2412   002102                     u2111:
  2413   002102  EF79  F010         	goto	l2817
  2414   002106                     u2110:
  2415   002106                     l2823:
  2416   002106  90D8               	bcf	status,0,c
  2417   002108  3604               	rlcf	___lbdiv@quotient^0,f,c
  2418   00210A  5001               	movf	___lbdiv@divisor^0,w,c
  2419   00210C  5C02               	subwf	___lbdiv@dividend^0,w,c
  2420   00210E  A0D8               	btfss	status,0,c
  2421   002110  EF8C  F010         	goto	u2121
  2422   002114  EF8E  F010         	goto	u2120
  2423   002118                     u2121:
  2424   002118  EF91  F010         	goto	l2829
  2425   00211C                     u2120:
  2426   00211C  5001               	movf	___lbdiv@divisor^0,w,c
  2427   00211E  5E02               	subwf	___lbdiv@dividend^0,f,c
  2428   002120  8004               	bsf	___lbdiv@quotient^0,0,c
  2429   002122                     l2829:
  2430   002122  90D8               	bcf	status,0,c
  2431   002124  3201               	rrcf	___lbdiv@divisor^0,f,c
  2432   002126  2E03               	decfsz	___lbdiv@counter^0,f,c
  2433   002128  EF83  F010         	goto	l2823
  2434   00212C                     l2833:
  2435   00212C  5004               	movf	___lbdiv@quotient^0,w,c
  2436   00212E  0012               	return		;funcret
  2437   002130                     __end_of___lbdiv:
  2438                           	callstack 0
  2439                           
  2440 ;; *************** function _clear_lcd *****************
  2441 ;; Defined at:
  2442 ;;		line 228 in file "application.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;		None
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;		None
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      void 
  2449 ;; Registers used:
  2450 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;Total ram usage:        2 bytes
  2461 ;; Hardware stack levels used: 1
  2462 ;; Hardware stack levels required when called: 3
  2463 ;; This function calls:
  2464 ;;		_keypad_get_value
  2465 ;;		_lcd_8bit_send_command
  2466 ;; This function is called by:
  2467 ;;		_main
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	text10
  2472   002016                     __ptext10:
  2473                           	callstack 0
  2474   002016                     _clear_lcd:
  2475                           	callstack 27
  2476   002016                     l102:
  2477   002016                     
  2478                           ;application.c: 230:         ret = keypad_get_value(&keypad_obj , &on_off);
  2479   002016  0E76               	movlw	low _keypad_obj
  2480   002018  6E09               	movwf	keypad_get_value@keypad_obj^0,c
  2481   00201A  0E5C               	movlw	low _on_off
  2482   00201C  6E0A               	movwf	keypad_get_value@value^0,c
  2483   00201E  EC59  F00C         	call	_keypad_get_value	;wreg free
  2484   002022  6E7E               	movwf	_ret^0,c
  2485   002024                     
  2486                           ;application.c: 231:     }while(on_off == 0);
  2487   002024  505C               	movf	_on_off^0,w,c
  2488   002026  B4D8               	btfsc	status,2,c
  2489   002028  EF18  F010         	goto	u2181
  2490   00202C  EF1A  F010         	goto	u2180
  2491   002030                     u2181:
  2492   002030  EF0B  F010         	goto	l102
  2493   002034                     u2180:
  2494   002034                     
  2495                           ;application.c: 232:     _delay((unsigned long)((250)*(8000000UL/4000.0)));
  2496   002034  0E03               	movlw	3
  2497   002036  6E12               	movwf	(??_clear_lcd+1)^0,c
  2498   002038  0E8A               	movlw	138
  2499   00203A  6E11               	movwf	??_clear_lcd^0,c
  2500   00203C  0E56               	movlw	86
  2501   00203E                     u2817:
  2502   00203E  2EE8               	decfsz	wreg,f,c
  2503   002040  D7FE               	bra	u2817
  2504   002042  2E11               	decfsz	??_clear_lcd^0,f,c
  2505   002044  D7FC               	bra	u2817
  2506   002046  2E12               	decfsz	(??_clear_lcd+1)^0,f,c
  2507   002048  D7FA               	bra	u2817
  2508   00204A                     
  2509                           ;application.c: 233:     ret = lcd_8bit_send_command(&lcd_obj , 0x01);
  2510   00204A  0E6C               	movlw	low _lcd_obj
  2511   00204C  6E0B               	movwf	lcd_8bit_send_command@lcd^0,c
  2512   00204E  0E01               	movlw	1
  2513   002050  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  2514   002052  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  2515   002056  6E7E               	movwf	_ret^0,c
  2516   002058                     
  2517                           ;application.c: 234:     first_digit1 = 0;
  2518   002058  0E00               	movlw	0
  2519   00205A  6E7F               	movwf	_first_digit1^0,c
  2520   00205C                     
  2521                           ;application.c: 235:     on_off = 0;
  2522   00205C  0E00               	movlw	0
  2523   00205E  6E5C               	movwf	_on_off^0,c
  2524   002060                     
  2525                           ;application.c: 236:     second_digit1 = 0;
  2526   002060  0E00               	movlw	0
  2527   002062  6E61               	movwf	_second_digit1^0,c
  2528   002064                     
  2529                           ;application.c: 237:     first_digit2 = 0;
  2530   002064  0E00               	movlw	0
  2531   002066  6E60               	movwf	_first_digit2^0,c
  2532   002068                     
  2533                           ;application.c: 238:     second_digit2 = 0;
  2534   002068  0E00               	movlw	0
  2535   00206A  6E5F               	movwf	_second_digit2^0,c
  2536   00206C                     
  2537                           ;application.c: 239:     asignment = 0;
  2538   00206C  0E00               	movlw	0
  2539   00206E  6E5D               	movwf	_asignment^0,c
  2540   002070                     
  2541                           ;application.c: 240:     operator = 0;
  2542   002070  0E00               	movlw	0
  2543   002072  6E5E               	movwf	_operator^0,c
  2544   002074  0012               	return		;funcret
  2545   002076                     __end_of_clear_lcd:
  2546                           	callstack 0
  2547                           
  2548 ;; *************** function _keypad_get_value *****************
  2549 ;; Defined at:
  2550 ;;		line 43 in file "ECU_layer/KEYPAD/ecu_keypad.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  keypad_obj      1    8[COMRAM] PTR const struct .
  2553 ;;		 -> keypad_obj(8), 
  2554 ;;  value           1    9[COMRAM] PTR unsigned char 
  2555 ;;		 -> on_off(1), asignment(1), second_digit2(1), first_digit2(1), 
  2556 ;;		 -> operator(1), second_digit1(1), first_digit1(1), 
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;  c_counter       1   15[COMRAM] unsigned char 
  2559 ;;  r_counter       1   14[COMRAM] unsigned char 
  2560 ;;  l_counter       1   13[COMRAM] unsigned char 
  2561 ;;  col_logic       1   12[COMRAM] unsigned char 
  2562 ;;  ret             1   11[COMRAM] unsigned char 
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      unsigned char 
  2565 ;; Registers used:
  2566 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2573 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2574 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2575 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2576 ;;Total ram usage:        8 bytes
  2577 ;; Hardware stack levels used: 1
  2578 ;; Hardware stack levels required when called: 1
  2579 ;; This function calls:
  2580 ;;		_gpio_pin_read_logic
  2581 ;;		_gpio_pin_write_logic
  2582 ;; This function is called by:
  2583 ;;		_main
  2584 ;;		_clear_lcd
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           	psect	text11
  2589   0018B2                     __ptext11:
  2590                           	callstack 0
  2591   0018B2                     _keypad_get_value:
  2592                           	callstack 29
  2593   0018B2                     
  2594                           ;ECU_layer/KEYPAD/ecu_keypad.c: 45:     uint8 r_counter=0 , c_counter=0, l_counter=0;
  2595   0018B2  0E00               	movlw	0
  2596   0018B4  6E0F               	movwf	keypad_get_value@r_counter^0,c
  2597   0018B6  0E00               	movlw	0
  2598   0018B8  6E10               	movwf	keypad_get_value@c_counter^0,c
  2599   0018BA  0E00               	movlw	0
  2600   0018BC  6E0E               	movwf	keypad_get_value@l_counter^0,c
  2601                           
  2602                           ;ECU_layer/KEYPAD/ecu_keypad.c: 46:     uint8 col_logic=0;
  2603   0018BE  0E00               	movlw	0
  2604   0018C0  6E0D               	movwf	keypad_get_value@col_logic^0,c
  2605                           
  2606                           ;ECU_layer/KEYPAD/ecu_keypad.c: 47:   if((((void*)0) == keypad_obj) || (((void*)0) == va
      +                          lue)){
  2607   0018C2  5009               	movf	keypad_get_value@keypad_obj^0,w,c
  2608   0018C4  B4D8               	btfsc	status,2,c
  2609   0018C6  EF67  F00C         	goto	u1881
  2610   0018CA  EF69  F00C         	goto	u1880
  2611   0018CE                     u1881:
  2612   0018CE  EF71  F00C         	goto	l2643
  2613   0018D2                     u1880:
  2614   0018D2  500A               	movf	keypad_get_value@value^0,w,c
  2615   0018D4  A4D8               	btfss	status,2,c
  2616   0018D6  EF6F  F00C         	goto	u1891
  2617   0018DA  EF71  F00C         	goto	u1890
  2618   0018DE                     u1891:
  2619   0018DE  EF75  F00C         	goto	l2645
  2620   0018E2                     u1890:
  2621   0018E2                     l2643:
  2622                           
  2623                           ;ECU_layer/KEYPAD/ecu_keypad.c: 48:       ret = (Std_ReturnType)0x00;
  2624   0018E2  0E00               	movlw	0
  2625   0018E4  6E0C               	movwf	keypad_get_value@ret^0,c
  2626                           
  2627                           ;ECU_layer/KEYPAD/ecu_keypad.c: 49:   }
  2628   0018E6  EFC6  F00C         	goto	l280
  2629   0018EA                     l2645:
  2630                           
  2631                           ;ECU_layer/KEYPAD/ecu_keypad.c: 51:       for(r_counter = 0 ; r_counter <4 ;r_counter++)
      +                          {
  2632   0018EA  0E00               	movlw	0
  2633   0018EC  6E0F               	movwf	keypad_get_value@r_counter^0,c
  2634   0018EE                     l2651:
  2635                           
  2636                           ;ECU_layer/KEYPAD/ecu_keypad.c: 52:           for(l_counter = 0 ;l_counter <4 ;l_counter
      +                          ++){
  2637   0018EE  0E00               	movlw	0
  2638   0018F0  6E0E               	movwf	keypad_get_value@l_counter^0,c
  2639   0018F2                     l2657:
  2640   0018F2  5009               	movf	keypad_get_value@keypad_obj^0,w,c
  2641   0018F4  240E               	addwf	keypad_get_value@l_counter^0,w,c
  2642   0018F6  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  2643   0018F8  0E00               	movlw	0
  2644   0018FA  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  2645   0018FC  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  2646   001900                     
  2647                           ;ECU_layer/KEYPAD/ecu_keypad.c: 54:           }
  2648   001900  2A0E               	incf	keypad_get_value@l_counter^0,f,c
  2649   001902  0E03               	movlw	3
  2650   001904  640E               	cpfsgt	keypad_get_value@l_counter^0,c
  2651   001906  EF87  F00C         	goto	u1901
  2652   00190A  EF89  F00C         	goto	u1900
  2653   00190E                     u1901:
  2654   00190E  EF79  F00C         	goto	l2657
  2655   001912                     u1900:
  2656   001912  5009               	movf	keypad_get_value@keypad_obj^0,w,c
  2657   001914  240F               	addwf	keypad_get_value@r_counter^0,w,c
  2658   001916  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  2659   001918  0E01               	movlw	1
  2660   00191A  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  2661   00191C  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  2662   001920                     
  2663                           ;ECU_layer/KEYPAD/ecu_keypad.c: 57:           for(c_counter = 0 ; c_counter <4 ;c_counte
      +                          r++){
  2664   001920  0E00               	movlw	0
  2665   001922  6E10               	movwf	keypad_get_value@c_counter^0,c
  2666   001924                     l2671:
  2667   001924  5009               	movf	keypad_get_value@keypad_obj^0,w,c
  2668   001926  2410               	addwf	keypad_get_value@c_counter^0,w,c
  2669   001928  0F04               	addlw	4
  2670   00192A  6E01               	movwf	gpio_pin_read_logic@_pin_config^0,c
  2671   00192C  0E0D               	movlw	low keypad_get_value@col_logic
  2672   00192E  6E02               	movwf	gpio_pin_read_logic@logic^0,c
  2673   001930  EC2F  F00E         	call	_gpio_pin_read_logic	;wreg free
  2674   001934                     
  2675                           ;ECU_layer/KEYPAD/ecu_keypad.c: 59:               if(HIGH == col_logic){
  2676   001934  040D               	decf	keypad_get_value@col_logic^0,w,c
  2677   001936  A4D8               	btfss	status,2,c
  2678   001938  EFA0  F00C         	goto	u1911
  2679   00193C  EFA2  F00C         	goto	u1910
  2680   001940                     u1911:
  2681   001940  EFB2  F00C         	goto	l2677
  2682   001944                     u1910:
  2683   001944                     
  2684                           ;ECU_layer/KEYPAD/ecu_keypad.c: 60:                   *value = btn_values[r_counter][c_c
      +                          ounter];
  2685   001944  500F               	movf	keypad_get_value@r_counter^0,w,c
  2686   001946  0D04               	mullw	4
  2687   001948  50F3               	movf	243,w,c
  2688   00194A  0F01               	addlw	low _btn_values
  2689   00194C  2410               	addwf	keypad_get_value@c_counter^0,w,c
  2690   00194E  6E0B               	movwf	??_keypad_get_value^0,c
  2691   001950  C00B  FFF6         	movff	??_keypad_get_value,tblptrl
  2692   001954                     	if	1	;There is more than 1 active tblptr byte
  2693   001954  0E10               	movlw	high __smallconst
  2694   001956  6EF7               	movwf	tblptrh,c
  2695   001958                     	endif
  2696   001958                     	if	0	;tblptru may be non-zero
  2697   001958                     	endif
  2698   001958                     	if	0	;tblptru may be non-zero
  2699   001958                     	endif
  2700   001958  500A               	movf	keypad_get_value@value^0,w,c
  2701   00195A  6ED9               	movwf	fsr2l,c
  2702   00195C  6ADA               	clrf	fsr2h,c
  2703   00195E  0008               	tblrd		*
  2704   001960  CFF5 FFDF          	movff	tablat,indf2
  2705   001964                     l2677:
  2706                           
  2707                           ;ECU_layer/KEYPAD/ecu_keypad.c: 62:           }
  2708   001964  2A10               	incf	keypad_get_value@c_counter^0,f,c
  2709   001966  0E03               	movlw	3
  2710   001968  6410               	cpfsgt	keypad_get_value@c_counter^0,c
  2711   00196A  EFB9  F00C         	goto	u1921
  2712   00196E  EFBB  F00C         	goto	u1920
  2713   001972                     u1921:
  2714   001972  EF92  F00C         	goto	l2671
  2715   001976                     u1920:
  2716   001976                     
  2717                           ;ECU_layer/KEYPAD/ecu_keypad.c: 64:       }
  2718   001976  2A0F               	incf	keypad_get_value@r_counter^0,f,c
  2719   001978  0E03               	movlw	3
  2720   00197A  640F               	cpfsgt	keypad_get_value@r_counter^0,c
  2721   00197C  EFC2  F00C         	goto	u1931
  2722   001980  EFC4  F00C         	goto	u1930
  2723   001984                     u1931:
  2724   001984  EF77  F00C         	goto	l2651
  2725   001988                     u1930:
  2726   001988                     
  2727                           ;ECU_layer/KEYPAD/ecu_keypad.c: 65:        ret = (Std_ReturnType)0x01;
  2728   001988  0E01               	movlw	1
  2729   00198A  6E0C               	movwf	keypad_get_value@ret^0,c
  2730   00198C                     l280:
  2731                           
  2732                           ;ECU_layer/KEYPAD/ecu_keypad.c: 67:   return ret;
  2733   00198C  500C               	movf	keypad_get_value@ret^0,w,c
  2734   00198E  0012               	return		;funcret
  2735   001990                     __end_of_keypad_get_value:
  2736                           	callstack 0
  2737                           
  2738 ;; *************** function _gpio_pin_read_logic *****************
  2739 ;; Defined at:
  2740 ;;		line 114 in file "MCAL_layer/GPIO/hal_gpio.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;  _pin_config     1    0[COMRAM] PTR const struct .
  2743 ;;		 -> keypad_obj$keypad_c_pins(4), keypad_obj(8), 
  2744 ;;  logic           1    1[COMRAM] PTR enum E2978
  2745 ;;		 -> keypad_get_value@col_logic(1), 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  ret             1    6[COMRAM] unsigned char 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      unsigned char 
  2750 ;; Registers used:
  2751 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2757 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;Total ram usage:        7 bytes
  2762 ;; Hardware stack levels used: 1
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_keypad_get_value
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text12
  2771   001C5E                     __ptext12:
  2772                           	callstack 0
  2773   001C5E                     _gpio_pin_read_logic:
  2774                           	callstack 29
  2775   001C5E                     
  2776                           ;MCAL_layer/GPIO/hal_gpio.c: 115: Std_ReturnType ret = (Std_ReturnType)0x01;
  2777   001C5E  0E01               	movlw	1
  2778   001C60  6E07               	movwf	gpio_pin_read_logic@ret^0,c
  2779                           
  2780                           ;MCAL_layer/GPIO/hal_gpio.c: 116:  if((((void*)0) == _pin_config) || (((void*)0) == logi
      +                          c)|| (_pin_config->pin > 8 -1)){
  2781   001C62  5001               	movf	gpio_pin_read_logic@_pin_config^0,w,c
  2782   001C64  B4D8               	btfsc	status,2,c
  2783   001C66  EF37  F00E         	goto	u1791
  2784   001C6A  EF39  F00E         	goto	u1790
  2785   001C6E                     u1791:
  2786   001C6E  EF51  F00E         	goto	l2569
  2787   001C72                     u1790:
  2788   001C72  5002               	movf	gpio_pin_read_logic@logic^0,w,c
  2789   001C74  B4D8               	btfsc	status,2,c
  2790   001C76  EF3F  F00E         	goto	u1801
  2791   001C7A  EF41  F00E         	goto	u1800
  2792   001C7E                     u1801:
  2793   001C7E  EF51  F00E         	goto	l2569
  2794   001C82                     u1800:
  2795   001C82  5001               	movf	gpio_pin_read_logic@_pin_config^0,w,c
  2796   001C84  6ED9               	movwf	fsr2l,c
  2797   001C86  6ADA               	clrf	fsr2h,c
  2798   001C88  30DF               	rrcf	223,w,c
  2799   001C8A  32E8               	rrcf	wreg,f,c
  2800   001C8C  32E8               	rrcf	wreg,f,c
  2801   001C8E  0B07               	andlw	7
  2802   001C90  6E03               	movwf	??_gpio_pin_read_logic^0,c
  2803   001C92  0E07               	movlw	7
  2804   001C94  6403               	cpfsgt	??_gpio_pin_read_logic^0,c
  2805   001C96  EF4F  F00E         	goto	u1811
  2806   001C9A  EF51  F00E         	goto	u1810
  2807   001C9E                     u1811:
  2808   001C9E  EF55  F00E         	goto	l2571
  2809   001CA2                     u1810:
  2810   001CA2                     l2569:
  2811                           
  2812                           ;MCAL_layer/GPIO/hal_gpio.c: 117:      ret = (Std_ReturnType)0x00;
  2813   001CA2  0E00               	movlw	0
  2814   001CA4  6E07               	movwf	gpio_pin_read_logic@ret^0,c
  2815                           
  2816                           ;MCAL_layer/GPIO/hal_gpio.c: 119:  }
  2817   001CA6  EF7F  F00E         	goto	l2573
  2818   001CAA                     l2571:
  2819                           
  2820                           ;MCAL_layer/GPIO/hal_gpio.c: 121:      *logic= ((*port_reg[_pin_config->port] >> _pin_co
      +                          nfig->pin) & (uint8)1);
  2821   001CAA  5002               	movf	gpio_pin_read_logic@logic^0,w,c
  2822   001CAC  6ED9               	movwf	fsr2l,c
  2823   001CAE  6ADA               	clrf	fsr2h,c
  2824   001CB0  5001               	movf	gpio_pin_read_logic@_pin_config^0,w,c
  2825   001CB2  6EE1               	movwf	fsr1l,c
  2826   001CB4  6AE2               	clrf	fsr1h,c
  2827   001CB6  30E7               	rrcf	231,w,c
  2828   001CB8  32E8               	rrcf	wreg,f,c
  2829   001CBA  32E8               	rrcf	wreg,f,c
  2830   001CBC  0B07               	andlw	7
  2831   001CBE  6E03               	movwf	??_gpio_pin_read_logic^0,c
  2832   001CC0  5001               	movf	gpio_pin_read_logic@_pin_config^0,w,c
  2833   001CC2  6EE1               	movwf	fsr1l,c
  2834   001CC4  6AE2               	clrf	fsr1h,c
  2835   001CC6  50E7               	movf	231,w,c
  2836   001CC8  0B07               	andlw	7
  2837   001CCA  0D02               	mullw	2
  2838   001CCC  50F3               	movf	243,w,c
  2839   001CCE  0FC5               	addlw	low _port_reg
  2840   001CD0  6EE1               	movwf	fsr1l,c
  2841   001CD2  6AE2               	clrf	fsr1h,c
  2842   001CD4  CFE6 F004          	movff	postinc1,??_gpio_pin_read_logic+1
  2843   001CD8  CFE5 F005          	movff	postdec1,??_gpio_pin_read_logic+2
  2844   001CDC  C004  FFE1         	movff	??_gpio_pin_read_logic+1,fsr1l
  2845   001CE0  C005  FFE2         	movff	??_gpio_pin_read_logic+2,fsr1h
  2846   001CE4  50E7               	movf	indf1,w,c
  2847   001CE6  6E06               	movwf	(??_gpio_pin_read_logic+3)^0,c
  2848   001CE8  2A03               	incf	??_gpio_pin_read_logic^0,f,c
  2849   001CEA  EF79  F00E         	goto	u1824
  2850   001CEE                     u1825:
  2851   001CEE  90D8               	bcf	status,0,c
  2852   001CF0  3206               	rrcf	(??_gpio_pin_read_logic+3)^0,f,c
  2853   001CF2                     u1824:
  2854   001CF2  2E03               	decfsz	??_gpio_pin_read_logic^0,f,c
  2855   001CF4  EF77  F00E         	goto	u1825
  2856   001CF8  5006               	movf	(??_gpio_pin_read_logic+3)^0,w,c
  2857   001CFA  0B01               	andlw	1
  2858   001CFC  6EDF               	movwf	indf2,c
  2859   001CFE                     l2573:
  2860                           
  2861                           ;MCAL_layer/GPIO/hal_gpio.c: 124: return ret;
  2862   001CFE  5007               	movf	gpio_pin_read_logic@ret^0,w,c
  2863   001D00  0012               	return		;funcret
  2864   001D02                     __end_of_gpio_pin_read_logic:
  2865                           	callstack 0
  2866                           
  2867 ;; *************** function _add_two_numbers *****************
  2868 ;; Defined at:
  2869 ;;		line 191 in file "application.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;		None
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  second_numbe    1   53[COMRAM] unsigned char 
  2874 ;;  first_number    1   52[COMRAM] unsigned char 
  2875 ;; Return value:  Size  Location     Type
  2876 ;;                  1    wreg      void 
  2877 ;; Registers used:
  2878 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2879 ;; Tracked objects:
  2880 ;;		On entry : 0/0
  2881 ;;		On exit  : 0/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;Total ram usage:        2 bytes
  2889 ;; Hardware stack levels used: 1
  2890 ;; Hardware stack levels required when called: 6
  2891 ;; This function calls:
  2892 ;;		_convert_uint8_to_string
  2893 ;;		_lcd_8bit_send_string_pos
  2894 ;; This function is called by:
  2895 ;;		_main
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           	psect	text13
  2900   002288                     __ptext13:
  2901                           	callstack 0
  2902   002288                     _add_two_numbers:
  2903                           	callstack 24
  2904   002288                     
  2905                           ;application.c: 192:    uint8 first_number, second_number ;;application.c: 194:    first
      +                          _number= (second_digit1-48)+10*(first_digit1-48);
  2906   002288  507F               	movf	_first_digit1^0,w,c
  2907   00228A  0D0A               	mullw	10
  2908   00228C  50F3               	movf	243,w,c
  2909   00228E  2461               	addwf	_second_digit1^0,w,c
  2910   002290  0FF0               	addlw	240
  2911   002292  6E35               	movwf	add_two_numbers@first_number^0,c
  2912                           
  2913                           ;application.c: 195:    second_number = (second_digit2-48)+10*(first_digit2-48);
  2914   002294  5060               	movf	_first_digit2^0,w,c
  2915   002296  0D0A               	mullw	10
  2916   002298  50F3               	movf	243,w,c
  2917   00229A  245F               	addwf	_second_digit2^0,w,c
  2918   00229C  0FF0               	addlw	240
  2919   00229E  6E36               	movwf	add_two_numbers@second_number^0,c
  2920   0022A0                     
  2921                           ;application.c: 196:    result = first_number + second_number;
  2922   0022A0  5035               	movf	add_two_numbers@first_number^0,w,c
  2923   0022A2  2436               	addwf	add_two_numbers@second_number^0,w,c
  2924   0022A4  6E48               	movwf	_result^0,c
  2925   0022A6  6A49               	clrf	(_result+1)^0,c
  2926   0022A8  3649               	rlcf	(_result+1)^0,f,c
  2927   0022AA                     
  2928                           ;application.c: 197:    ret = convert_uint8_to_string(result , str);
  2929   0022AA  0E4E               	movlw	low _str
  2930   0022AC  6E2D               	movwf	convert_uint8_to_string@str^0,c
  2931   0022AE  5048               	movf	_result^0,w,c
  2932   0022B0  ECD2  F00E         	call	_convert_uint8_to_string
  2933   0022B4  6E7E               	movwf	_ret^0,c
  2934   0022B6                     
  2935                           ;application.c: 198:    ret = lcd_8bit_send_string_pos(&lcd_obj,1,11,str);
  2936   0022B6  0E6C               	movlw	low _lcd_obj
  2937   0022B8  6E17               	movwf	lcd_8bit_send_string_pos@lcd^0,c
  2938   0022BA  0E01               	movlw	1
  2939   0022BC  6E18               	movwf	lcd_8bit_send_string_pos@row^0,c
  2940   0022BE  0E0B               	movlw	11
  2941   0022C0  6E19               	movwf	lcd_8bit_send_string_pos@col^0,c
  2942   0022C2  0E4E               	movlw	low _str
  2943   0022C4  6E1A               	movwf	lcd_8bit_send_string_pos@str^0,c
  2944   0022C6  EC1E  F011         	call	_lcd_8bit_send_string_pos	;wreg free
  2945   0022CA  6E7E               	movwf	_ret^0,c
  2946   0022CC  0012               	return		;funcret
  2947   0022CE                     __end_of_add_two_numbers:
  2948                           	callstack 0
  2949                           
  2950 ;; *************** function _lcd_8bit_send_string_pos *****************
  2951 ;; Defined at:
  2952 ;;		line 320 in file "ECU_layer/LCD/ecu_lcd.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;  lcd             1   22[COMRAM] PTR const struct .
  2955 ;;		 -> lcd_obj(10), 
  2956 ;;  row             1   23[COMRAM] unsigned char 
  2957 ;;  col             1   24[COMRAM] unsigned char 
  2958 ;;  str             1   25[COMRAM] PTR unsigned char 
  2959 ;;		 -> str(14), 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  ret             1   26[COMRAM] unsigned char 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      unsigned char 
  2964 ;; Registers used:
  2965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2971 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;Total ram usage:        5 bytes
  2976 ;; Hardware stack levels used: 1
  2977 ;; Hardware stack levels required when called: 4
  2978 ;; This function calls:
  2979 ;;		_lcd_8bit_send_string
  2980 ;;		_lcd_8bit_set_cursor
  2981 ;; This function is called by:
  2982 ;;		_add_two_numbers
  2983 ;;		_sub_two_numbers
  2984 ;;		_mult_two_numbers
  2985 ;;		_div_two_numbers
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text14
  2990   00223C                     __ptext14:
  2991                           	callstack 0
  2992   00223C                     _lcd_8bit_send_string_pos:
  2993                           	callstack 25
  2994   00223C                     
  2995                           ;ECU_layer/LCD/ecu_lcd.c: 322:     if((((void*)0) == lcd) || (((void*)0) == str)){
  2996   00223C  5017               	movf	lcd_8bit_send_string_pos@lcd^0,w,c
  2997   00223E  B4D8               	btfsc	status,2,c
  2998   002240  EF24  F011         	goto	u1961
  2999   002244  EF26  F011         	goto	u1960
  3000   002248                     u1961:
  3001   002248  EF2E  F011         	goto	l2715
  3002   00224C                     u1960:
  3003   00224C  501A               	movf	lcd_8bit_send_string_pos@str^0,w,c
  3004   00224E  A4D8               	btfss	status,2,c
  3005   002250  EF2C  F011         	goto	u1971
  3006   002254  EF2E  F011         	goto	u1970
  3007   002258                     u1971:
  3008   002258  EF32  F011         	goto	l2717
  3009   00225C                     u1970:
  3010   00225C                     l2715:
  3011                           
  3012                           ;ECU_layer/LCD/ecu_lcd.c: 323:         ret = (Std_ReturnType)0x00;
  3013   00225C  0E00               	movlw	0
  3014   00225E  6E1B               	movwf	lcd_8bit_send_string_pos@ret^0,c
  3015                           
  3016                           ;ECU_layer/LCD/ecu_lcd.c: 324:     }
  3017   002260  EF42  F011         	goto	l2719
  3018   002264                     l2717:
  3019                           
  3020                           ;ECU_layer/LCD/ecu_lcd.c: 326:         ret = lcd_8bit_set_cursor(lcd, row ,col);
  3021   002264  C017  F011         	movff	lcd_8bit_send_string_pos@lcd,lcd_8bit_set_cursor@lcd
  3022   002268  C018  F012         	movff	lcd_8bit_send_string_pos@row,lcd_8bit_set_cursor@row
  3023   00226C  C019  F013         	movff	lcd_8bit_send_string_pos@col,lcd_8bit_set_cursor@column
  3024   002270  EC2A  F00D         	call	_lcd_8bit_set_cursor	;wreg free
  3025   002274  6E1B               	movwf	lcd_8bit_send_string_pos@ret^0,c
  3026                           
  3027                           ;ECU_layer/LCD/ecu_lcd.c: 327:         ret = lcd_8bit_send_string(lcd,str);
  3028   002276  C017  F011         	movff	lcd_8bit_send_string_pos@lcd,lcd_8bit_send_string@lcd
  3029   00227A  C01A  F012         	movff	lcd_8bit_send_string_pos@str,lcd_8bit_send_string@str
  3030   00227E  EC98  F010         	call	_lcd_8bit_send_string	;wreg free
  3031   002282  6E1B               	movwf	lcd_8bit_send_string_pos@ret^0,c
  3032   002284                     l2719:
  3033                           
  3034                           ;ECU_layer/LCD/ecu_lcd.c: 331:     return ret ;
  3035   002284  501B               	movf	lcd_8bit_send_string_pos@ret^0,w,c
  3036   002286  0012               	return		;funcret
  3037   002288                     __end_of_lcd_8bit_send_string_pos:
  3038                           	callstack 0
  3039                           
  3040 ;; *************** function _lcd_8bit_set_cursor *****************
  3041 ;; Defined at:
  3042 ;;		line 487 in file "ECU_layer/LCD/ecu_lcd.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;  lcd             1   16[COMRAM] PTR const struct .
  3045 ;;		 -> lcd_obj(10), 
  3046 ;;  row             1   17[COMRAM] unsigned char 
  3047 ;;  column          1   18[COMRAM] unsigned char 
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  ret             1   21[COMRAM] unsigned char 
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  1    wreg      unsigned char 
  3052 ;; Registers used:
  3053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3059 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;Total ram usage:        6 bytes
  3064 ;; Hardware stack levels used: 1
  3065 ;; Hardware stack levels required when called: 3
  3066 ;; This function calls:
  3067 ;;		_lcd_8bit_send_command
  3068 ;; This function is called by:
  3069 ;;		_lcd_8bit_send_char_data_pos
  3070 ;;		_lcd_8bit_send_string_pos
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text15
  3075   001A54                     __ptext15:
  3076                           	callstack 0
  3077   001A54                     _lcd_8bit_set_cursor:
  3078                           	callstack 25
  3079   001A54                     
  3080                           ;ECU_layer/LCD/ecu_lcd.c: 488: Std_ReturnType ret = (Std_ReturnType)0x01 ;
  3081   001A54  0E01               	movlw	1
  3082   001A56  6E16               	movwf	lcd_8bit_set_cursor@ret^0,c
  3083                           
  3084                           ;ECU_layer/LCD/ecu_lcd.c: 489:     if(((void*)0) == lcd){
  3085   001A58  5011               	movf	lcd_8bit_set_cursor@lcd^0,w,c
  3086   001A5A  A4D8               	btfss	status,2,c
  3087   001A5C  EF32  F00D         	goto	u1831
  3088   001A60  EF34  F00D         	goto	u1830
  3089   001A64                     u1831:
  3090   001A64  EF38  F00D         	goto	l2581
  3091   001A68                     u1830:
  3092   001A68                     
  3093                           ;ECU_layer/LCD/ecu_lcd.c: 490:         ret = (Std_ReturnType)0x00;
  3094   001A68  0E00               	movlw	0
  3095   001A6A  6E16               	movwf	lcd_8bit_set_cursor@ret^0,c
  3096                           
  3097                           ;ECU_layer/LCD/ecu_lcd.c: 491:     }
  3098   001A6C  EF80  F00D         	goto	l2595
  3099   001A70                     l2581:
  3100                           
  3101                           ;ECU_layer/LCD/ecu_lcd.c: 493:         column--;
  3102   001A70  0613               	decf	lcd_8bit_set_cursor@column^0,f,c
  3103                           
  3104                           ;ECU_layer/LCD/ecu_lcd.c: 494:         switch (row){
  3105   001A72  EF63  F00D         	goto	l2593
  3106   001A76                     l2583:
  3107                           
  3108                           ;ECU_layer/LCD/ecu_lcd.c: 496:                 ret = lcd_8bit_send_command(lcd , (0x80 +
      +                           column));
  3109   001A76  C011  F00B         	movff	lcd_8bit_set_cursor@lcd,lcd_8bit_send_command@lcd
  3110   001A7A  5013               	movf	lcd_8bit_set_cursor@column^0,w,c
  3111   001A7C  0F80               	addlw	128
  3112   001A7E  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  3113   001A80  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  3114   001A84  6E16               	movwf	lcd_8bit_set_cursor@ret^0,c
  3115                           
  3116                           ;ECU_layer/LCD/ecu_lcd.c: 497:                 break ;
  3117   001A86  EF80  F00D         	goto	l2595
  3118   001A8A                     l2585:
  3119                           
  3120                           ;ECU_layer/LCD/ecu_lcd.c: 499:                 ret = lcd_8bit_send_command(lcd , (0xC0 +
      +                           column));
  3121   001A8A  C011  F00B         	movff	lcd_8bit_set_cursor@lcd,lcd_8bit_send_command@lcd
  3122   001A8E  5013               	movf	lcd_8bit_set_cursor@column^0,w,c
  3123   001A90  0FC0               	addlw	192
  3124   001A92  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  3125   001A94  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  3126   001A98  6E16               	movwf	lcd_8bit_set_cursor@ret^0,c
  3127                           
  3128                           ;ECU_layer/LCD/ecu_lcd.c: 500:                 break;
  3129   001A9A  EF80  F00D         	goto	l2595
  3130   001A9E                     l2587:
  3131                           
  3132                           ;ECU_layer/LCD/ecu_lcd.c: 502:                 ret = lcd_8bit_send_command(lcd , (0x94 +
      +                           column));
  3133   001A9E  C011  F00B         	movff	lcd_8bit_set_cursor@lcd,lcd_8bit_send_command@lcd
  3134   001AA2  5013               	movf	lcd_8bit_set_cursor@column^0,w,c
  3135   001AA4  0F94               	addlw	148
  3136   001AA6  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  3137   001AA8  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  3138   001AAC  6E16               	movwf	lcd_8bit_set_cursor@ret^0,c
  3139                           
  3140                           ;ECU_layer/LCD/ecu_lcd.c: 503:                 break;
  3141   001AAE  EF80  F00D         	goto	l2595
  3142   001AB2                     l2589:
  3143                           
  3144                           ;ECU_layer/LCD/ecu_lcd.c: 505:                 ret = lcd_8bit_send_command(lcd , (0xD4 +
      +                           column));
  3145   001AB2  C011  F00B         	movff	lcd_8bit_set_cursor@lcd,lcd_8bit_send_command@lcd
  3146   001AB6  5013               	movf	lcd_8bit_set_cursor@column^0,w,c
  3147   001AB8  0FD4               	addlw	212
  3148   001ABA  6E0C               	movwf	lcd_8bit_send_command@command^0,c
  3149   001ABC  EC64  F00F         	call	_lcd_8bit_send_command	;wreg free
  3150   001AC0  6E16               	movwf	lcd_8bit_set_cursor@ret^0,c
  3151                           
  3152                           ;ECU_layer/LCD/ecu_lcd.c: 506:                 break;
  3153   001AC2  EF80  F00D         	goto	l2595
  3154   001AC6                     l2593:
  3155   001AC6  5012               	movf	lcd_8bit_set_cursor@row^0,w,c
  3156   001AC8  6E14               	movwf	??_lcd_8bit_set_cursor^0,c
  3157   001ACA  6A15               	clrf	(??_lcd_8bit_set_cursor+1)^0,c
  3158                           
  3159                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3160                           ; Switch size 1, requested type "simple"
  3161                           ; Number of cases is 1, Range of values is 0 to 0
  3162                           ; switch strategies available:
  3163                           ; Name         Instructions Cycles
  3164                           ; simple_byte            4     3 (average)
  3165                           ;	Chosen strategy is simple_byte
  3166   001ACC  5015               	movf	(??_lcd_8bit_set_cursor+1)^0,w,c
  3167   001ACE  0A00               	xorlw	0	; case 0
  3168   001AD0  B4D8               	btfsc	status,2,c
  3169   001AD2  EF6D  F00D         	goto	l3353
  3170   001AD6  EF80  F00D         	goto	l2595
  3171   001ADA                     l3353:
  3172                           
  3173                           ; Switch size 1, requested type "simple"
  3174                           ; Number of cases is 4, Range of values is 1 to 4
  3175                           ; switch strategies available:
  3176                           ; Name         Instructions Cycles
  3177                           ; simple_byte           13     7 (average)
  3178                           ;	Chosen strategy is simple_byte
  3179   001ADA  5014               	movf	??_lcd_8bit_set_cursor^0,w,c
  3180   001ADC  0A01               	xorlw	1	; case 1
  3181   001ADE  B4D8               	btfsc	status,2,c
  3182   001AE0  EF3B  F00D         	goto	l2583
  3183   001AE4  0A03               	xorlw	3	; case 2
  3184   001AE6  B4D8               	btfsc	status,2,c
  3185   001AE8  EF45  F00D         	goto	l2585
  3186   001AEC  0A01               	xorlw	1	; case 3
  3187   001AEE  B4D8               	btfsc	status,2,c
  3188   001AF0  EF4F  F00D         	goto	l2587
  3189   001AF4  0A07               	xorlw	7	; case 4
  3190   001AF6  B4D8               	btfsc	status,2,c
  3191   001AF8  EF59  F00D         	goto	l2589
  3192   001AFC  EF80  F00D         	goto	l2595
  3193   001B00                     l2595:
  3194                           
  3195                           ;ECU_layer/LCD/ecu_lcd.c: 511:     return ret ;
  3196   001B00  5016               	movf	lcd_8bit_set_cursor@ret^0,w,c
  3197   001B02  0012               	return		;funcret
  3198   001B04                     __end_of_lcd_8bit_set_cursor:
  3199                           	callstack 0
  3200                           
  3201 ;; *************** function _lcd_8bit_send_command *****************
  3202 ;; Defined at:
  3203 ;;		line 238 in file "ECU_layer/LCD/ecu_lcd.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;  lcd             1   10[COMRAM] PTR const struct .
  3206 ;;		 -> lcd_obj(10), 
  3207 ;;  command         1   11[COMRAM] unsigned char 
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  count           1   15[COMRAM] unsigned char 
  3210 ;;  ret             1   14[COMRAM] unsigned char 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      unsigned char 
  3213 ;; Registers used:
  3214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3220 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;Total ram usage:        6 bytes
  3225 ;; Hardware stack levels used: 1
  3226 ;; Hardware stack levels required when called: 2
  3227 ;; This function calls:
  3228 ;;		_gpio_pin_write_logic
  3229 ;;		_lcd_8bit_send_enable
  3230 ;; This function is called by:
  3231 ;;		_main
  3232 ;;		_clear_lcd
  3233 ;;		_lcd_8bit_init
  3234 ;;		_lcd_8bit_set_cursor
  3235 ;;		_lcd_8bit_send_custom_char
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text16
  3240   001EC8                     __ptext16:
  3241                           	callstack 0
  3242   001EC8                     _lcd_8bit_send_command:
  3243                           	callstack 25
  3244   001EC8                     
  3245                           ;ECU_layer/LCD/ecu_lcd.c: 240:     uint8 count=0;
  3246   001EC8  0E00               	movlw	0
  3247   001ECA  6E10               	movwf	lcd_8bit_send_command@count^0,c
  3248                           
  3249                           ;ECU_layer/LCD/ecu_lcd.c: 241:     if(((void*)0) == lcd){
  3250   001ECC  500B               	movf	lcd_8bit_send_command@lcd^0,w,c
  3251   001ECE  A4D8               	btfss	status,2,c
  3252   001ED0  EF6C  F00F         	goto	u1721
  3253   001ED4  EF6E  F00F         	goto	u1720
  3254   001ED8                     u1721:
  3255   001ED8  EF72  F00F         	goto	l2509
  3256   001EDC                     u1720:
  3257   001EDC                     
  3258                           ;ECU_layer/LCD/ecu_lcd.c: 242:         ret = (Std_ReturnType)0x00;
  3259   001EDC  0E00               	movlw	0
  3260   001EDE  6E0F               	movwf	lcd_8bit_send_command@ret^0,c
  3261                           
  3262                           ;ECU_layer/LCD/ecu_lcd.c: 243:     }
  3263   001EE0  EF9D  F00F         	goto	l2525
  3264   001EE4                     l2509:
  3265   001EE4  C00B  F001         	movff	lcd_8bit_send_command@lcd,gpio_pin_write_logic@_pin_config
  3266   001EE8  0E00               	movlw	0
  3267   001EEA  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  3268   001EEC  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  3269   001EF0                     
  3270                           ;ECU_layer/LCD/ecu_lcd.c: 246:         for(count =0 ; count < 8 ; count ++){
  3271   001EF0  0E00               	movlw	0
  3272   001EF2  6E10               	movwf	lcd_8bit_send_command@count^0,c
  3273   001EF4                     l2517:
  3274                           
  3275                           ;ECU_layer/LCD/ecu_lcd.c: 247:             gpio_pin_write_logic(&(lcd->lcd_data[count]) 
      +                          , (command >> count) & (uint8)0x01);
  3276   001EF4  500B               	movf	lcd_8bit_send_command@lcd^0,w,c
  3277   001EF6  2410               	addwf	lcd_8bit_send_command@count^0,w,c
  3278   001EF8  0F02               	addlw	2
  3279   001EFA  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  3280   001EFC  C010  F00D         	movff	lcd_8bit_send_command@count,??_lcd_8bit_send_command
  3281   001F00  C00C  F00E         	movff	lcd_8bit_send_command@command,??_lcd_8bit_send_command+1
  3282   001F04  2A0D               	incf	??_lcd_8bit_send_command^0,f,c
  3283   001F06  EF87  F00F         	goto	u1734
  3284   001F0A                     u1735:
  3285   001F0A  90D8               	bcf	status,0,c
  3286   001F0C  320E               	rrcf	(??_lcd_8bit_send_command+1)^0,f,c
  3287   001F0E                     u1734:
  3288   001F0E  2E0D               	decfsz	??_lcd_8bit_send_command^0,f,c
  3289   001F10  EF85  F00F         	goto	u1735
  3290   001F14  500E               	movf	(??_lcd_8bit_send_command+1)^0,w,c
  3291   001F16  0B01               	andlw	1
  3292   001F18  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  3293   001F1A  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  3294   001F1E                     
  3295                           ;ECU_layer/LCD/ecu_lcd.c: 248:         }
  3296   001F1E  2A10               	incf	lcd_8bit_send_command@count^0,f,c
  3297   001F20  0E07               	movlw	7
  3298   001F22  6410               	cpfsgt	lcd_8bit_send_command@count^0,c
  3299   001F24  EF96  F00F         	goto	u1741
  3300   001F28  EF98  F00F         	goto	u1740
  3301   001F2C                     u1741:
  3302   001F2C  EF7A  F00F         	goto	l2517
  3303   001F30                     u1740:
  3304   001F30                     
  3305                           ;ECU_layer/LCD/ecu_lcd.c: 249:         ret = lcd_8bit_send_enable(lcd);
  3306   001F30  C00B  F009         	movff	lcd_8bit_send_command@lcd,lcd_8bit_send_enable@lcd
  3307   001F34  EC67  F011         	call	_lcd_8bit_send_enable	;wreg free
  3308   001F38  6E0F               	movwf	lcd_8bit_send_command@ret^0,c
  3309   001F3A                     l2525:
  3310                           
  3311                           ;ECU_layer/LCD/ecu_lcd.c: 251:     return ret ;
  3312   001F3A  500F               	movf	lcd_8bit_send_command@ret^0,w,c
  3313   001F3C  0012               	return		;funcret
  3314   001F3E                     __end_of_lcd_8bit_send_command:
  3315                           	callstack 0
  3316                           
  3317 ;; *************** function _lcd_8bit_send_string *****************
  3318 ;; Defined at:
  3319 ;;		line 299 in file "ECU_layer/LCD/ecu_lcd.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;  lcd             1   16[COMRAM] PTR const struct .
  3322 ;;		 -> lcd_obj(10), 
  3323 ;;  str             1   17[COMRAM] PTR unsigned char 
  3324 ;;		 -> str(14), 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;  ret             1   18[COMRAM] unsigned char 
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      unsigned char 
  3329 ;; Registers used:
  3330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3336 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3340 ;;Total ram usage:        3 bytes
  3341 ;; Hardware stack levels used: 1
  3342 ;; Hardware stack levels required when called: 3
  3343 ;; This function calls:
  3344 ;;		_lcd_8bit_send_char_data
  3345 ;; This function is called by:
  3346 ;;		_lcd_8bit_send_string_pos
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text17
  3351   002130                     __ptext17:
  3352                           	callstack 0
  3353   002130                     _lcd_8bit_send_string:
  3354                           	callstack 25
  3355   002130                     
  3356                           ;ECU_layer/LCD/ecu_lcd.c: 300:     Std_ReturnType ret = (Std_ReturnType)0x01 ;
  3357   002130  0E01               	movlw	1
  3358   002132  6E13               	movwf	lcd_8bit_send_string@ret^0,c
  3359                           
  3360                           ;ECU_layer/LCD/ecu_lcd.c: 301:     if((((void*)0) == lcd) || (((void*)0) == str)){
  3361   002134  5011               	movf	lcd_8bit_send_string@lcd^0,w,c
  3362   002136  B4D8               	btfsc	status,2,c
  3363   002138  EFA0  F010         	goto	u1841
  3364   00213C  EFA2  F010         	goto	u1840
  3365   002140                     u1841:
  3366   002140  EFAA  F010         	goto	l2607
  3367   002144                     u1840:
  3368   002144  5012               	movf	lcd_8bit_send_string@str^0,w,c
  3369   002146  A4D8               	btfss	status,2,c
  3370   002148  EFA8  F010         	goto	u1851
  3371   00214C  EFAA  F010         	goto	u1850
  3372   002150                     u1851:
  3373   002150  EFB9  F010         	goto	l2613
  3374   002154                     u1850:
  3375   002154                     l2607:
  3376                           
  3377                           ;ECU_layer/LCD/ecu_lcd.c: 302:         ret = (Std_ReturnType)0x00;
  3378   002154  0E00               	movlw	0
  3379   002156  6E13               	movwf	lcd_8bit_send_string@ret^0,c
  3380                           
  3381                           ;ECU_layer/LCD/ecu_lcd.c: 303:     }
  3382   002158  EFC4  F010         	goto	l2615
  3383   00215C                     l2609:
  3384                           
  3385                           ;ECU_layer/LCD/ecu_lcd.c: 306:             ret = lcd_8bit_send_char_data(lcd , *str);
  3386   00215C  C011  F00B         	movff	lcd_8bit_send_string@lcd,lcd_8bit_send_char_data@lcd
  3387   002160  5012               	movf	lcd_8bit_send_string@str^0,w,c
  3388   002162  6ED9               	movwf	fsr2l,c
  3389   002164  6ADA               	clrf	fsr2h,c
  3390   002166  50DF               	movf	indf2,w,c
  3391   002168  6E0C               	movwf	lcd_8bit_send_char_data@data^0,c
  3392   00216A  EC9F  F00F         	call	_lcd_8bit_send_char_data	;wreg free
  3393   00216E  6E13               	movwf	lcd_8bit_send_string@ret^0,c
  3394   002170                     
  3395                           ;ECU_layer/LCD/ecu_lcd.c: 307:             str++;
  3396   002170  2A12               	incf	lcd_8bit_send_string@str^0,f,c
  3397   002172                     l2613:
  3398                           
  3399                           ;ECU_layer/LCD/ecu_lcd.c: 305:         while(*str){
  3400   002172  5012               	movf	lcd_8bit_send_string@str^0,w,c
  3401   002174  6ED9               	movwf	fsr2l,c
  3402   002176  6ADA               	clrf	fsr2h,c
  3403   002178  50DF               	movf	indf2,w,c
  3404   00217A  A4D8               	btfss	status,2,c
  3405   00217C  EFC2  F010         	goto	u1861
  3406   002180  EFC4  F010         	goto	u1860
  3407   002184                     u1861:
  3408   002184  EFAE  F010         	goto	l2609
  3409   002188                     u1860:
  3410   002188                     l2615:
  3411                           
  3412                           ;ECU_layer/LCD/ecu_lcd.c: 310:     return ret ;
  3413   002188  5013               	movf	lcd_8bit_send_string@ret^0,w,c
  3414   00218A  0012               	return		;funcret
  3415   00218C                     __end_of_lcd_8bit_send_string:
  3416                           	callstack 0
  3417                           
  3418 ;; *************** function _lcd_8bit_send_char_data *****************
  3419 ;; Defined at:
  3420 ;;		line 259 in file "ECU_layer/LCD/ecu_lcd.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;  lcd             1   10[COMRAM] PTR const struct .
  3423 ;;		 -> lcd_obj(10), 
  3424 ;;  data            1   11[COMRAM] unsigned char 
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;  count           1   15[COMRAM] unsigned char 
  3427 ;;  ret             1   14[COMRAM] unsigned char 
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  1    wreg      unsigned char 
  3430 ;; Registers used:
  3431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;Total ram usage:        6 bytes
  3442 ;; Hardware stack levels used: 1
  3443 ;; Hardware stack levels required when called: 2
  3444 ;; This function calls:
  3445 ;;		_gpio_pin_write_logic
  3446 ;;		_lcd_8bit_send_enable
  3447 ;; This function is called by:
  3448 ;;		_lcd_8bit_send_char_data_pos
  3449 ;;		_lcd_8bit_send_string
  3450 ;;		_lcd_8bit_send_custom_char
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text18
  3455   001F3E                     __ptext18:
  3456                           	callstack 0
  3457   001F3E                     _lcd_8bit_send_char_data:
  3458                           	callstack 25
  3459   001F3E                     
  3460                           ;ECU_layer/LCD/ecu_lcd.c: 261:     uint8 count =0;
  3461   001F3E  0E00               	movlw	0
  3462   001F40  6E10               	movwf	lcd_8bit_send_char_data@count^0,c
  3463                           
  3464                           ;ECU_layer/LCD/ecu_lcd.c: 262:     if(((void*)0) == lcd){
  3465   001F42  500B               	movf	lcd_8bit_send_char_data@lcd^0,w,c
  3466   001F44  A4D8               	btfss	status,2,c
  3467   001F46  EFA7  F00F         	goto	u1751
  3468   001F4A  EFA9  F00F         	goto	u1750
  3469   001F4E                     u1751:
  3470   001F4E  EFAD  F00F         	goto	l2533
  3471   001F52                     u1750:
  3472   001F52                     
  3473                           ;ECU_layer/LCD/ecu_lcd.c: 263:         ret = (Std_ReturnType)0x00;
  3474   001F52  0E00               	movlw	0
  3475   001F54  6E0F               	movwf	lcd_8bit_send_char_data@ret^0,c
  3476                           
  3477                           ;ECU_layer/LCD/ecu_lcd.c: 264:     }
  3478   001F56  EFD8  F00F         	goto	l2549
  3479   001F5A                     l2533:
  3480   001F5A  C00B  F001         	movff	lcd_8bit_send_char_data@lcd,gpio_pin_write_logic@_pin_config
  3481   001F5E  0E01               	movlw	1
  3482   001F60  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  3483   001F62  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  3484   001F66                     
  3485                           ;ECU_layer/LCD/ecu_lcd.c: 267:         for(count =0 ; count < 8 ; count ++){
  3486   001F66  0E00               	movlw	0
  3487   001F68  6E10               	movwf	lcd_8bit_send_char_data@count^0,c
  3488   001F6A                     l2541:
  3489                           
  3490                           ;ECU_layer/LCD/ecu_lcd.c: 268:             gpio_pin_write_logic(&(lcd->lcd_data[count]) 
      +                          , (data >> count) & (uint8)0x01);
  3491   001F6A  500B               	movf	lcd_8bit_send_char_data@lcd^0,w,c
  3492   001F6C  2410               	addwf	lcd_8bit_send_char_data@count^0,w,c
  3493   001F6E  0F02               	addlw	2
  3494   001F70  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  3495   001F72  C010  F00D         	movff	lcd_8bit_send_char_data@count,??_lcd_8bit_send_char_data
  3496   001F76  C00C  F00E         	movff	lcd_8bit_send_char_data@data,??_lcd_8bit_send_char_data+1
  3497   001F7A  2A0D               	incf	??_lcd_8bit_send_char_data^0,f,c
  3498   001F7C  EFC2  F00F         	goto	u1764
  3499   001F80                     u1765:
  3500   001F80  90D8               	bcf	status,0,c
  3501   001F82  320E               	rrcf	(??_lcd_8bit_send_char_data+1)^0,f,c
  3502   001F84                     u1764:
  3503   001F84  2E0D               	decfsz	??_lcd_8bit_send_char_data^0,f,c
  3504   001F86  EFC0  F00F         	goto	u1765
  3505   001F8A  500E               	movf	(??_lcd_8bit_send_char_data+1)^0,w,c
  3506   001F8C  0B01               	andlw	1
  3507   001F8E  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  3508   001F90  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  3509   001F94                     
  3510                           ;ECU_layer/LCD/ecu_lcd.c: 269:         }
  3511   001F94  2A10               	incf	lcd_8bit_send_char_data@count^0,f,c
  3512   001F96  0E07               	movlw	7
  3513   001F98  6410               	cpfsgt	lcd_8bit_send_char_data@count^0,c
  3514   001F9A  EFD1  F00F         	goto	u1771
  3515   001F9E  EFD3  F00F         	goto	u1770
  3516   001FA2                     u1771:
  3517   001FA2  EFB5  F00F         	goto	l2541
  3518   001FA6                     u1770:
  3519   001FA6                     
  3520                           ;ECU_layer/LCD/ecu_lcd.c: 270:         ret = lcd_8bit_send_enable(lcd);
  3521   001FA6  C00B  F009         	movff	lcd_8bit_send_char_data@lcd,lcd_8bit_send_enable@lcd
  3522   001FAA  EC67  F011         	call	_lcd_8bit_send_enable	;wreg free
  3523   001FAE  6E0F               	movwf	lcd_8bit_send_char_data@ret^0,c
  3524   001FB0                     l2549:
  3525                           
  3526                           ;ECU_layer/LCD/ecu_lcd.c: 272:     return ret ;
  3527   001FB0  500F               	movf	lcd_8bit_send_char_data@ret^0,w,c
  3528   001FB2  0012               	return		;funcret
  3529   001FB4                     __end_of_lcd_8bit_send_char_data:
  3530                           	callstack 0
  3531                           
  3532 ;; *************** function _lcd_8bit_send_enable *****************
  3533 ;; Defined at:
  3534 ;;		line 468 in file "ECU_layer/LCD/ecu_lcd.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  lcd             1    8[COMRAM] PTR const struct .
  3537 ;;		 -> lcd_obj(10), 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  ret             1    9[COMRAM] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      unsigned char 
  3542 ;; Registers used:
  3543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3549 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;Total ram usage:        2 bytes
  3554 ;; Hardware stack levels used: 1
  3555 ;; Hardware stack levels required when called: 1
  3556 ;; This function calls:
  3557 ;;		_gpio_pin_write_logic
  3558 ;; This function is called by:
  3559 ;;		_lcd_8bit_send_command
  3560 ;;		_lcd_8bit_send_char_data
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text19
  3565   0022CE                     __ptext19:
  3566                           	callstack 0
  3567   0022CE                     _lcd_8bit_send_enable:
  3568                           	callstack 25
  3569   0022CE                     
  3570                           ;ECU_layer/LCD/ecu_lcd.c: 470:     if(((void*)0) == lcd){
  3571   0022CE  5009               	movf	lcd_8bit_send_enable@lcd^0,w,c
  3572   0022D0  A4D8               	btfss	status,2,c
  3573   0022D2  EF6D  F011         	goto	u1611
  3574   0022D6  EF6F  F011         	goto	u1610
  3575   0022DA                     u1611:
  3576   0022DA  EF73  F011         	goto	l2445
  3577   0022DE                     u1610:
  3578   0022DE                     
  3579                           ;ECU_layer/LCD/ecu_lcd.c: 471:         ret = (Std_ReturnType)0x00;
  3580   0022DE  0E00               	movlw	0
  3581   0022E0  6E0A               	movwf	lcd_8bit_send_enable@ret^0,c
  3582                           
  3583                           ;ECU_layer/LCD/ecu_lcd.c: 472:     }
  3584   0022E2  EF84  F011         	goto	l2451
  3585   0022E6                     l2445:
  3586   0022E6  2809               	incf	lcd_8bit_send_enable@lcd^0,w,c
  3587   0022E8  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  3588   0022EA  0E01               	movlw	1
  3589   0022EC  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  3590   0022EE  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  3591   0022F2                     
  3592                           ;ECU_layer/LCD/ecu_lcd.c: 475:         _delay((unsigned long)((5)*(8000000UL/4000000.0))
      +                          );
  3593   0022F2  0E03               	movlw	3
  3594   0022F4                     u2827:
  3595   0022F4  2EE8               	decfsz	wreg,f,c
  3596   0022F6  D7FE               	bra	u2827
  3597   0022F8  0000               	nop	
  3598   0022FA                     
  3599                           ;ECU_layer/LCD/ecu_lcd.c: 476:         ret = gpio_pin_write_logic(&(lcd->lcd_en),LOW);
  3600   0022FA  2809               	incf	lcd_8bit_send_enable@lcd^0,w,c
  3601   0022FC  6E01               	movwf	gpio_pin_write_logic@_pin_config^0,c
  3602   0022FE  0E00               	movlw	0
  3603   002300  6E02               	movwf	gpio_pin_write_logic@logic^0,c
  3604   002302  ECD1  F00B         	call	_gpio_pin_write_logic	;wreg free
  3605   002306  6E0A               	movwf	lcd_8bit_send_enable@ret^0,c
  3606   002308                     l2451:
  3607                           
  3608                           ;ECU_layer/LCD/ecu_lcd.c: 478:     return ret ;
  3609   002308  500A               	movf	lcd_8bit_send_enable@ret^0,w,c
  3610   00230A  0012               	return		;funcret
  3611   00230C                     __end_of_lcd_8bit_send_enable:
  3612                           	callstack 0
  3613                           
  3614 ;; *************** function _gpio_pin_write_logic *****************
  3615 ;; Defined at:
  3616 ;;		line 81 in file "MCAL_layer/GPIO/hal_gpio.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  _pin_config     1    0[COMRAM] PTR const struct .
  3619 ;;		 -> keypad_obj$keypad_r_pins(4), keypad_obj(8), lcd_obj$lcd_data(8), lcd_obj(10), 
  3620 ;;  logic           1    1[COMRAM] enum E2978
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;  ret             1    7[COMRAM] unsigned char 
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  1    wreg      unsigned char 
  3625 ;; Registers used:
  3626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3632 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3635 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3636 ;;Total ram usage:        8 bytes
  3637 ;; Hardware stack levels used: 1
  3638 ;; This function calls:
  3639 ;;		Nothing
  3640 ;; This function is called by:
  3641 ;;		_keypad_init
  3642 ;;		_keypad_get_value
  3643 ;;		_lcd_8bit_init
  3644 ;;		_lcd_8bit_send_command
  3645 ;;		_lcd_8bit_send_char_data
  3646 ;;		_lcd_8bit_send_enable
  3647 ;;		_gpio_pin_intialize
  3648 ;;		_lcd_4bit_init
  3649 ;;		_lcd_4bit_send_command
  3650 ;;		_lcd_4bit_send_char_data
  3651 ;;		_lcd_send_4bits
  3652 ;;		_lcd_4bit_send_enable
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text20
  3657   0017A2                     __ptext20:
  3658                           	callstack 0
  3659   0017A2                     _gpio_pin_write_logic:
  3660                           	callstack 25
  3661   0017A2                     
  3662                           ;MCAL_layer/GPIO/hal_gpio.c: 82: Std_ReturnType ret = (Std_ReturnType)0x01;
  3663   0017A2  0E01               	movlw	1
  3664   0017A4  6E08               	movwf	gpio_pin_write_logic@ret^0,c
  3665                           
  3666                           ;MCAL_layer/GPIO/hal_gpio.c: 83:  if((((void*)0) == _pin_config) || (_pin_config->pin > 
      +                          8 -1)){
  3667   0017A6  5001               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  3668   0017A8  B4D8               	btfsc	status,2,c
  3669   0017AA  EFD9  F00B         	goto	u1401
  3670   0017AE  EFDB  F00B         	goto	u1400
  3671   0017B2                     u1401:
  3672   0017B2  EFEB  F00B         	goto	l2325
  3673   0017B6                     u1400:
  3674   0017B6  5001               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  3675   0017B8  6ED9               	movwf	fsr2l,c
  3676   0017BA  6ADA               	clrf	fsr2h,c
  3677   0017BC  30DF               	rrcf	223,w,c
  3678   0017BE  32E8               	rrcf	wreg,f,c
  3679   0017C0  32E8               	rrcf	wreg,f,c
  3680   0017C2  0B07               	andlw	7
  3681   0017C4  6E03               	movwf	??_gpio_pin_write_logic^0,c
  3682   0017C6  0E07               	movlw	7
  3683   0017C8  6403               	cpfsgt	??_gpio_pin_write_logic^0,c
  3684   0017CA  EFE9  F00B         	goto	u1411
  3685   0017CE  EFEB  F00B         	goto	u1410
  3686   0017D2                     u1411:
  3687   0017D2  EF42  F00C         	goto	l2333
  3688   0017D6                     u1410:
  3689   0017D6                     l2325:
  3690                           
  3691                           ;MCAL_layer/GPIO/hal_gpio.c: 84:      ret = (Std_ReturnType)0x00;
  3692   0017D6  0E00               	movlw	0
  3693   0017D8  6E08               	movwf	gpio_pin_write_logic@ret^0,c
  3694                           
  3695                           ;MCAL_layer/GPIO/hal_gpio.c: 86:  }
  3696   0017DA  EF57  F00C         	goto	l2335
  3697   0017DE                     l2327:
  3698                           
  3699                           ;MCAL_layer/GPIO/hal_gpio.c: 90:              (*lat_reg[_pin_config->port] &= ~((uint8)1
      +                           << _pin_config->pin));
  3700   0017DE  5001               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  3701   0017E0  6ED9               	movwf	fsr2l,c
  3702   0017E2  6ADA               	clrf	fsr2h,c
  3703   0017E4  30DF               	rrcf	223,w,c
  3704   0017E6  32E8               	rrcf	wreg,f,c
  3705   0017E8  32E8               	rrcf	wreg,f,c
  3706   0017EA  0B07               	andlw	7
  3707   0017EC  6E03               	movwf	??_gpio_pin_write_logic^0,c
  3708   0017EE  0E01               	movlw	1
  3709   0017F0  6E04               	movwf	(??_gpio_pin_write_logic+1)^0,c
  3710   0017F2  2A03               	incf	??_gpio_pin_write_logic^0,f,c
  3711   0017F4  EFFE  F00B         	goto	u1424
  3712   0017F8                     u1425:
  3713   0017F8  90D8               	bcf	status,0,c
  3714   0017FA  3604               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
  3715   0017FC                     u1424:
  3716   0017FC  2E03               	decfsz	??_gpio_pin_write_logic^0,f,c
  3717   0017FE  EFFC  F00B         	goto	u1425
  3718   001802  5004               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  3719   001804  0AFF               	xorlw	255
  3720   001806  6E05               	movwf	(??_gpio_pin_write_logic+2)^0,c
  3721   001808  5001               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  3722   00180A  6ED9               	movwf	fsr2l,c
  3723   00180C  6ADA               	clrf	fsr2h,c
  3724   00180E  50DF               	movf	223,w,c
  3725   001810  0B07               	andlw	7
  3726   001812  0D02               	mullw	2
  3727   001814  50F3               	movf	243,w,c
  3728   001816  0F62               	addlw	low _lat_reg
  3729   001818  6ED9               	movwf	fsr2l,c
  3730   00181A  6ADA               	clrf	fsr2h,c
  3731   00181C  CFDE F006          	movff	postinc2,??_gpio_pin_write_logic+3
  3732   001820  CFDD F007          	movff	postdec2,??_gpio_pin_write_logic+4
  3733   001824  C006  FFD9         	movff	??_gpio_pin_write_logic+3,fsr2l
  3734   001828  C007  FFDA         	movff	??_gpio_pin_write_logic+4,fsr2h
  3735   00182C  5005               	movf	(??_gpio_pin_write_logic+2)^0,w,c
  3736   00182E  16DF               	andwf	indf2,f,c
  3737                           
  3738                           ;MCAL_layer/GPIO/hal_gpio.c: 91:              break;
  3739   001830  EF57  F00C         	goto	l2335
  3740   001834                     l2329:
  3741                           
  3742                           ;MCAL_layer/GPIO/hal_gpio.c: 93:               (*lat_reg[_pin_config->port] |= ((uint8)1
      +                           << _pin_config->pin));
  3743   001834  5001               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  3744   001836  6ED9               	movwf	fsr2l,c
  3745   001838  6ADA               	clrf	fsr2h,c
  3746   00183A  30DF               	rrcf	223,w,c
  3747   00183C  32E8               	rrcf	wreg,f,c
  3748   00183E  32E8               	rrcf	wreg,f,c
  3749   001840  0B07               	andlw	7
  3750   001842  6E03               	movwf	??_gpio_pin_write_logic^0,c
  3751   001844  0E01               	movlw	1
  3752   001846  6E04               	movwf	(??_gpio_pin_write_logic+1)^0,c
  3753   001848  2A03               	incf	??_gpio_pin_write_logic^0,f,c
  3754   00184A  EF29  F00C         	goto	u1434
  3755   00184E                     u1435:
  3756   00184E  90D8               	bcf	status,0,c
  3757   001850  3604               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
  3758   001852                     u1434:
  3759   001852  2E03               	decfsz	??_gpio_pin_write_logic^0,f,c
  3760   001854  EF27  F00C         	goto	u1435
  3761   001858  5001               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  3762   00185A  6ED9               	movwf	fsr2l,c
  3763   00185C  6ADA               	clrf	fsr2h,c
  3764   00185E  50DF               	movf	223,w,c
  3765   001860  0B07               	andlw	7
  3766   001862  0D02               	mullw	2
  3767   001864  50F3               	movf	243,w,c
  3768   001866  0F62               	addlw	low _lat_reg
  3769   001868  6ED9               	movwf	fsr2l,c
  3770   00186A  6ADA               	clrf	fsr2h,c
  3771   00186C  CFDE F005          	movff	postinc2,??_gpio_pin_write_logic+2
  3772   001870  CFDD F006          	movff	postdec2,??_gpio_pin_write_logic+3
  3773   001874  C005  FFD9         	movff	??_gpio_pin_write_logic+2,fsr2l
  3774   001878  C006  FFDA         	movff	??_gpio_pin_write_logic+3,fsr2h
  3775   00187C  5004               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  3776   00187E  12DF               	iorwf	indf2,f,c
  3777                           
  3778                           ;MCAL_layer/GPIO/hal_gpio.c: 94:              break;
  3779   001880  EF57  F00C         	goto	l2335
  3780   001884                     l2333:
  3781   001884  5002               	movf	gpio_pin_write_logic@logic^0,w,c
  3782   001886  6E03               	movwf	??_gpio_pin_write_logic^0,c
  3783   001888  6A04               	clrf	(??_gpio_pin_write_logic+1)^0,c
  3784                           
  3785                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3786                           ; Switch size 1, requested type "simple"
  3787                           ; Number of cases is 1, Range of values is 0 to 0
  3788                           ; switch strategies available:
  3789                           ; Name         Instructions Cycles
  3790                           ; simple_byte            4     3 (average)
  3791                           ;	Chosen strategy is simple_byte
  3792   00188A  5004               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  3793   00188C  0A00               	xorlw	0	; case 0
  3794   00188E  B4D8               	btfsc	status,2,c
  3795   001890  EF4C  F00C         	goto	l3355
  3796   001894  EFEB  F00B         	goto	l2325
  3797   001898                     l3355:
  3798                           
  3799                           ; Switch size 1, requested type "simple"
  3800                           ; Number of cases is 2, Range of values is 0 to 1
  3801                           ; switch strategies available:
  3802                           ; Name         Instructions Cycles
  3803                           ; simple_byte            7     4 (average)
  3804                           ;	Chosen strategy is simple_byte
  3805   001898  5003               	movf	??_gpio_pin_write_logic^0,w,c
  3806   00189A  0A00               	xorlw	0	; case 0
  3807   00189C  B4D8               	btfsc	status,2,c
  3808   00189E  EFEF  F00B         	goto	l2327
  3809   0018A2  0A01               	xorlw	1	; case 1
  3810   0018A4  B4D8               	btfsc	status,2,c
  3811   0018A6  EF1A  F00C         	goto	l2329
  3812   0018AA  EFEB  F00B         	goto	l2325
  3813   0018AE                     l2335:
  3814                           
  3815                           ;MCAL_layer/GPIO/hal_gpio.c: 102: return ret;
  3816   0018AE  5008               	movf	gpio_pin_write_logic@ret^0,w,c
  3817   0018B0  0012               	return		;funcret
  3818   0018B2                     __end_of_gpio_pin_write_logic:
  3819                           	callstack 0
  3820                           
  3821 ;; *************** function _convert_uint8_to_string *****************
  3822 ;; Defined at:
  3823 ;;		line 363 in file "ECU_layer/LCD/ecu_lcd.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;  value           1    wreg     unsigned char 
  3826 ;;  str             1   44[COMRAM] PTR unsigned char 
  3827 ;;		 -> str(14), 
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;  value           1   49[COMRAM] unsigned char 
  3830 ;;  Temp_String     4   45[COMRAM] unsigned char [4]
  3831 ;;  DataCounter     1   51[COMRAM] unsigned char 
  3832 ;;  ret             1   50[COMRAM] unsigned char 
  3833 ;; Return value:  Size  Location     Type
  3834 ;;                  1    wreg      unsigned char 
  3835 ;; Registers used:
  3836 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3842 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3843 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3845 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3846 ;;Total ram usage:        8 bytes
  3847 ;; Hardware stack levels used: 1
  3848 ;; Hardware stack levels required when called: 5
  3849 ;; This function calls:
  3850 ;;		_memset
  3851 ;;		_sprintf
  3852 ;; This function is called by:
  3853 ;;		_add_two_numbers
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text21
  3858   001DA4                     __ptext21:
  3859                           	callstack 0
  3860   001DA4                     _convert_uint8_to_string:
  3861                           	callstack 24
  3862                           
  3863                           ;incstack = 0
  3864                           ;convert_uint8_to_string@value stored from wreg
  3865   001DA4  6E32               	movwf	convert_uint8_to_string@value^0,c
  3866   001DA6                     
  3867                           ;ECU_layer/LCD/ecu_lcd.c: 364:     Std_ReturnType ret = (Std_ReturnType)0x01;
  3868   001DA6  0E01               	movlw	1
  3869   001DA8  6E33               	movwf	convert_uint8_to_string@ret^0,c
  3870                           
  3871                           ;ECU_layer/LCD/ecu_lcd.c: 365:     uint8 Temp_String[4] = {0};
  3872   001DAA  0E00               	movlw	0
  3873   001DAC  6E2E               	movwf	convert_uint8_to_string@Temp_String^0,c
  3874   001DAE  0E00               	movlw	0
  3875   001DB0  6E2F               	movwf	(convert_uint8_to_string@Temp_String+1)^0,c
  3876   001DB2  0E00               	movlw	0
  3877   001DB4  6E30               	movwf	(convert_uint8_to_string@Temp_String+2)^0,c
  3878   001DB6  0E00               	movlw	0
  3879   001DB8  6E31               	movwf	(convert_uint8_to_string@Temp_String+3)^0,c
  3880                           
  3881                           ;ECU_layer/LCD/ecu_lcd.c: 366:     uint8 DataCounter = 0;
  3882   001DBA  0E00               	movlw	0
  3883   001DBC  6E34               	movwf	convert_uint8_to_string@DataCounter^0,c
  3884   001DBE                     
  3885                           ;ECU_layer/LCD/ecu_lcd.c: 367:     if(((void*)0) == str){
  3886   001DBE  502D               	movf	convert_uint8_to_string@str^0,w,c
  3887   001DC0  A4D8               	btfss	status,2,c
  3888   001DC2  EFE5  F00E         	goto	u1941
  3889   001DC6  EFE7  F00E         	goto	u1940
  3890   001DCA                     u1941:
  3891   001DCA  EFEB  F00E         	goto	l2695
  3892   001DCE                     u1940:
  3893   001DCE                     
  3894                           ;ECU_layer/LCD/ecu_lcd.c: 368:         ret = (Std_ReturnType)0x00;
  3895   001DCE  0E00               	movlw	0
  3896   001DD0  6E33               	movwf	convert_uint8_to_string@ret^0,c
  3897                           
  3898                           ;ECU_layer/LCD/ecu_lcd.c: 369:     }
  3899   001DD2  EF1F  F00F         	goto	l2707
  3900   001DD6                     l2695:
  3901                           
  3902                           ;ECU_layer/LCD/ecu_lcd.c: 371:         memset(str, ' ', 3);
  3903   001DD6  C02D  F001         	movff	convert_uint8_to_string@str,memset@dest
  3904   001DDA  0E00               	movlw	0
  3905   001DDC  6E03               	movwf	(memset@c+1)^0,c
  3906   001DDE  0E20               	movlw	32
  3907   001DE0  6E02               	movwf	memset@c^0,c
  3908   001DE2  0E00               	movlw	0
  3909   001DE4  6E05               	movwf	(memset@n+1)^0,c
  3910   001DE6  0E03               	movlw	3
  3911   001DE8  6E04               	movwf	memset@n^0,c
  3912   001DEA  ECF7  F011         	call	_memset	;wreg free
  3913   001DEE                     
  3914                           ;ECU_layer/LCD/ecu_lcd.c: 372:         str[3] = '\0';
  3915   001DEE  502D               	movf	convert_uint8_to_string@str^0,w,c
  3916   001DF0  6ED9               	movwf	fsr2l,c
  3917   001DF2  6ADA               	clrf	fsr2h,c
  3918   001DF4  0E03               	movlw	3
  3919   001DF6  26D9               	addwf	fsr2l,f,c
  3920   001DF8  6ADF               	clrf	indf2,c
  3921   001DFA                     
  3922                           ;ECU_layer/LCD/ecu_lcd.c: 373:         sprintf((char *)Temp_String, "%i", value);
  3923   001DFA  0E2E               	movlw	low convert_uint8_to_string@Temp_String
  3924   001DFC  6E1A               	movwf	sprintf@s^0,c
  3925   001DFE  0E11               	movlw	low STR_1
  3926   001E00  6E1B               	movwf	sprintf@fmt^0,c
  3927   001E02  C032  F01C         	movff	convert_uint8_to_string@value,?_sprintf+2
  3928   001E06  6A1D               	clrf	(?_sprintf+3)^0,c
  3929   001E08  ECC3  F011         	call	_sprintf	;wreg free
  3930                           
  3931                           ;ECU_layer/LCD/ecu_lcd.c: 374:         while(Temp_String[DataCounter] != '\0'){
  3932   001E0C  EF13  F00F         	goto	l2705
  3933   001E10                     l2701:
  3934                           
  3935                           ;ECU_layer/LCD/ecu_lcd.c: 375:             str[DataCounter] = Temp_String[DataCounter];
  3936   001E10  5034               	movf	convert_uint8_to_string@DataCounter^0,w,c
  3937   001E12  0F2E               	addlw	low convert_uint8_to_string@Temp_String
  3938   001E14  6ED9               	movwf	fsr2l,c
  3939   001E16  6ADA               	clrf	fsr2h,c
  3940   001E18  502D               	movf	convert_uint8_to_string@str^0,w,c
  3941   001E1A  2434               	addwf	convert_uint8_to_string@DataCounter^0,w,c
  3942   001E1C  6EE1               	movwf	fsr1l,c
  3943   001E1E  6AE2               	clrf	fsr1h,c
  3944   001E20  CFDF FFE7          	movff	indf2,indf1
  3945   001E24                     
  3946                           ;ECU_layer/LCD/ecu_lcd.c: 376:             DataCounter++;
  3947   001E24  2A34               	incf	convert_uint8_to_string@DataCounter^0,f,c
  3948   001E26                     l2705:
  3949                           
  3950                           ;ECU_layer/LCD/ecu_lcd.c: 374:         while(Temp_String[DataCounter] != '\0'){
  3951   001E26  5034               	movf	convert_uint8_to_string@DataCounter^0,w,c
  3952   001E28  0F2E               	addlw	low convert_uint8_to_string@Temp_String
  3953   001E2A  6ED9               	movwf	fsr2l,c
  3954   001E2C  6ADA               	clrf	fsr2h,c
  3955   001E2E  50DF               	movf	indf2,w,c
  3956   001E30  A4D8               	btfss	status,2,c
  3957   001E32  EF1D  F00F         	goto	u1951
  3958   001E36  EF1F  F00F         	goto	u1950
  3959   001E3A                     u1951:
  3960   001E3A  EF08  F00F         	goto	l2701
  3961   001E3E                     u1950:
  3962   001E3E                     l2707:
  3963                           
  3964                           ;ECU_layer/LCD/ecu_lcd.c: 379:     return ret;
  3965   001E3E  5033               	movf	convert_uint8_to_string@ret^0,w,c
  3966   001E40  0012               	return		;funcret
  3967   001E42                     __end_of_convert_uint8_to_string:
  3968                           	callstack 0
  3969                           
  3970 ;; *************** function _sprintf *****************
  3971 ;; Defined at:
  3972 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;  s               1   25[COMRAM] PTR unsigned char 
  3975 ;;		 -> convert_uint32_to_string@Temp_String(11), convert_uint16_to_string@Temp_String(6), convert_uint8_to_string@Temp_
      +String(4), 
  3976 ;;  fmt             1   26[COMRAM] PTR const unsigned char 
  3977 ;;		 -> STR_3(3), STR_2(3), STR_1(3), 
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  f              12   32[COMRAM] struct _IO_FILE
  3980 ;;  ret             2    0        int 
  3981 ;;  ap              1   31[COMRAM] PTR void [1]
  3982 ;;		 -> ?_sprintf(2), 
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  2   25[COMRAM] int 
  3985 ;; Registers used:
  3986 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3992 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;Total ram usage:       19 bytes
  3997 ;; Hardware stack levels used: 1
  3998 ;; Hardware stack levels required when called: 4
  3999 ;; This function calls:
  4000 ;;		_vfprintf
  4001 ;; This function is called by:
  4002 ;;		_convert_uint8_to_string
  4003 ;;		_convert_uint32_to_string
  4004 ;;		_convert_uint16_to_string
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text22
  4009   002386                     __ptext22:
  4010                           	callstack 0
  4011   002386                     _sprintf:
  4012                           	callstack 24
  4013   002386  0E1C               	movlw	low (?_sprintf+2)
  4014   002388  6E20               	movwf	sprintf@ap^0,c
  4015   00238A  C01A  F021         	movff	sprintf@s,sprintf@f
  4016   00238E  0E00               	movlw	0
  4017   002390  6E25               	movwf	(sprintf@f+4)^0,c
  4018   002392  0E00               	movlw	0
  4019   002394  6E24               	movwf	(sprintf@f+3)^0,c
  4020   002396  0E00               	movlw	0
  4021   002398  6E2C               	movwf	(sprintf@f+11)^0,c
  4022   00239A  0E00               	movlw	0
  4023   00239C  6E2B               	movwf	(sprintf@f+10)^0,c
  4024   00239E  0E21               	movlw	low sprintf@f
  4025   0023A0  6E16               	movwf	vfprintf@fp^0,c
  4026   0023A2  C01B  F017         	movff	sprintf@fmt,vfprintf@fmt
  4027   0023A6  0E20               	movlw	low sprintf@ap
  4028   0023A8  6E18               	movwf	vfprintf@ap^0,c
  4029   0023AA  EC86  F011         	call	_vfprintf	;wreg free
  4030   0023AE  501A               	movf	sprintf@s^0,w,c
  4031   0023B0  2424               	addwf	(sprintf@f+3)^0,w,c
  4032   0023B2  6ED9               	movwf	fsr2l,c
  4033   0023B4  6ADA               	clrf	fsr2h,c
  4034   0023B6  6ADF               	clrf	indf2,c
  4035   0023B8  0012               	return		;funcret
  4036   0023BA                     __end_of_sprintf:
  4037                           	callstack 0
  4038                           
  4039 ;; *************** function _vfprintf *****************
  4040 ;; Defined at:
  4041 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;  fp              1   21[COMRAM] PTR struct _IO_FILE
  4044 ;;		 -> sprintf@f(12), 
  4045 ;;  fmt             1   22[COMRAM] PTR const unsigned char 
  4046 ;;		 -> STR_3(3), STR_2(3), STR_1(3), 
  4047 ;;  ap              1   23[COMRAM] PTR PTR void 
  4048 ;;		 -> sprintf@ap(1), 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  cfmt            1   24[COMRAM] PTR unsigned char 
  4051 ;;		 -> STR_3(3), STR_2(3), STR_1(3), 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  2   21[COMRAM] int 
  4054 ;; Registers used:
  4055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4061 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;Total ram usage:        4 bytes
  4066 ;; Hardware stack levels used: 1
  4067 ;; Hardware stack levels required when called: 3
  4068 ;; This function calls:
  4069 ;;		_vfpfcnvrt
  4070 ;; This function is called by:
  4071 ;;		_sprintf
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text23
  4076   00230C                     __ptext23:
  4077                           	callstack 0
  4078   00230C                     _vfprintf:
  4079                           	callstack 24
  4080   00230C                     
  4081                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  4082   00230C  C017  F019         	movff	vfprintf@fmt,vfprintf@cfmt
  4083                           
  4084                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4085   002310  EF92  F011         	goto	l2557
  4086   002314                     l2555:
  4087                           
  4088                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4089   002314  C016  F00B         	movff	vfprintf@fp,vfpfcnvrt@fp
  4090   002318  0E19               	movlw	low vfprintf@cfmt
  4091   00231A  6E0C               	movwf	vfpfcnvrt@fmt^0,c
  4092   00231C  C018  F00D         	movff	vfprintf@ap,vfpfcnvrt@ap
  4093   002320  EC62  F00A         	call	_vfpfcnvrt	;wreg free
  4094   002324                     l2557:
  4095                           
  4096                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4097   002324  C019  FFF6         	movff	vfprintf@cfmt,tblptrl
  4098   002328                     	if	1	;There is more than 1 active tblptr byte
  4099   002328  0E10               	movlw	high __smallconst
  4100   00232A  6EF7               	movwf	tblptrh,c
  4101   00232C                     	endif
  4102   00232C                     	if	0	;tblptru may be non-zero
  4103   00232C                     	endif
  4104   00232C                     	if	0	;tblptru may be non-zero
  4105   00232C                     	endif
  4106   00232C  0008               	tblrd		*
  4107   00232E  50F5               	movf	tablat,w,c
  4108   002330  0900               	iorlw	0
  4109   002332  A4D8               	btfss	status,2,c
  4110   002334  EF9E  F011         	goto	u1781
  4111   002338  EFA0  F011         	goto	u1780
  4112   00233C                     u1781:
  4113   00233C  EF8A  F011         	goto	l2555
  4114   002340                     u1780:
  4115   002340                     
  4116                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  4117   002340  0E00               	movlw	0
  4118   002342  6E17               	movwf	(?_vfprintf+1)^0,c
  4119   002344  0E00               	movlw	0
  4120   002346  6E16               	movwf	?_vfprintf^0,c
  4121   002348  0012               	return		;funcret
  4122   00234A                     __end_of_vfprintf:
  4123                           	callstack 0
  4124                           
  4125 ;; *************** function _vfpfcnvrt *****************
  4126 ;; Defined at:
  4127 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  4130 ;;		 -> sprintf@f(12), 
  4131 ;;  fmt             1   11[COMRAM] PTR PTR unsigned char 
  4132 ;;		 -> vfprintf@cfmt(1), 
  4133 ;;  ap              1   12[COMRAM] PTR PTR void 
  4134 ;;		 -> sprintf@ap(1), 
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;  convarg         4   16[COMRAM] struct .
  4137 ;;  c               1   20[COMRAM] unsigned char 
  4138 ;;  cp              1   15[COMRAM] PTR unsigned char 
  4139 ;;		 -> STR_3(3), STR_2(3), STR_1(3), 
  4140 ;;  done            1   14[COMRAM] _Bool 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1    wreg      void 
  4143 ;; Registers used:
  4144 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4150 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;Total ram usage:       11 bytes
  4155 ;; Hardware stack levels used: 1
  4156 ;; Hardware stack levels required when called: 2
  4157 ;; This function calls:
  4158 ;;		___awdiv
  4159 ;;		___awmod
  4160 ;;		_abs
  4161 ;;		_fputc
  4162 ;; This function is called by:
  4163 ;;		_vfprintf
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text24
  4168   0014C4                     __ptext24:
  4169                           	callstack 0
  4170   0014C4                     _vfpfcnvrt:
  4171                           	callstack 24
  4172   0014C4                     
  4173                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  4174   0014C4  500C               	movf	vfpfcnvrt@fmt^0,w,c
  4175   0014C6  6ED9               	movwf	fsr2l,c
  4176   0014C8  6ADA               	clrf	fsr2h,c
  4177   0014CA  CFDF FFF6          	movff	indf2,tblptrl
  4178   0014CE                     	if	1	;There is more than 1 active tblptr byte
  4179   0014CE  0E10               	movlw	high __smallconst
  4180   0014D0  6EF7               	movwf	tblptrh,c
  4181   0014D2                     	endif
  4182   0014D2                     	if	0	;tblptru may be non-zero
  4183   0014D2                     	endif
  4184   0014D2                     	if	0	;tblptru may be non-zero
  4185   0014D2                     	endif
  4186   0014D2  0008               	tblrd		*
  4187   0014D4  50F5               	movf	tablat,w,c
  4188   0014D6  0A25               	xorlw	37
  4189   0014D8  A4D8               	btfss	status,2,c
  4190   0014DA  EF71  F00A         	goto	u1621
  4191   0014DE  EF73  F00A         	goto	u1620
  4192   0014E2                     u1621:
  4193   0014E2  EF2C  F00B         	goto	l2499
  4194   0014E6                     u1620:
  4195   0014E6                     
  4196                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4197   0014E6  500C               	movf	vfpfcnvrt@fmt^0,w,c
  4198   0014E8  6ED9               	movwf	fsr2l,c
  4199   0014EA  6ADA               	clrf	fsr2h,c
  4200   0014EC  2ADF               	incf	indf2,f,c
  4201   0014EE                     
  4202                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4203   0014EE  0E00               	movlw	0
  4204   0014F0  6E45               	movwf	(_width+1)^0,c
  4205   0014F2  0E00               	movlw	0
  4206   0014F4  6E44               	movwf	_width^0,c
  4207   0014F6  C044  F04A         	movff	_width,_flags
  4208   0014FA                     
  4209                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4210   0014FA  6846               	setf	_prec^0,c
  4211   0014FC  6847               	setf	(_prec+1)^0,c
  4212   0014FE                     
  4213                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  4214   0014FE  500C               	movf	vfpfcnvrt@fmt^0,w,c
  4215   001500  6ED9               	movwf	fsr2l,c
  4216   001502  6ADA               	clrf	fsr2h,c
  4217   001504  50DF               	movf	indf2,w,c
  4218   001506  6E10               	movwf	vfpfcnvrt@cp^0,c
  4219   001508                     
  4220                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4221   001508  C010  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4222   00150C                     	if	1	;There is more than 1 active tblptr byte
  4223   00150C  0E10               	movlw	high __smallconst
  4224   00150E  6EF7               	movwf	tblptrh,c
  4225   001510                     	endif
  4226   001510                     	if	0	;tblptru may be non-zero
  4227   001510                     	endif
  4228   001510                     	if	0	;tblptru may be non-zero
  4229   001510                     	endif
  4230   001510  0008               	tblrd		*
  4231   001512  50F5               	movf	tablat,w,c
  4232   001514  0A64               	xorlw	100
  4233   001516  B4D8               	btfsc	status,2,c
  4234   001518  EF90  F00A         	goto	u1631
  4235   00151C  EF92  F00A         	goto	u1630
  4236   001520                     u1631:
  4237   001520  EFA0  F00A         	goto	l2469
  4238   001524                     u1630:
  4239   001524  C010  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4240   001528                     	if	1	;There is more than 1 active tblptr byte
  4241   001528  0E10               	movlw	high __smallconst
  4242   00152A  6EF7               	movwf	tblptrh,c
  4243   00152C                     	endif
  4244   00152C                     	if	0	;tblptru may be non-zero
  4245   00152C                     	endif
  4246   00152C                     	if	0	;tblptru may be non-zero
  4247   00152C                     	endif
  4248   00152C  0008               	tblrd		*
  4249   00152E  50F5               	movf	tablat,w,c
  4250   001530  0A69               	xorlw	105
  4251   001532  A4D8               	btfss	status,2,c
  4252   001534  EF9E  F00A         	goto	u1641
  4253   001538  EFA0  F00A         	goto	u1640
  4254   00153C                     u1641:
  4255   00153C  EF26  F00B         	goto	l2495
  4256   001540                     u1640:
  4257   001540                     l2469:
  4258                           
  4259                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4260   001540  500D               	movf	vfpfcnvrt@ap^0,w,c
  4261   001542  6ED9               	movwf	fsr2l,c
  4262   001544  6ADA               	clrf	fsr2h,c
  4263   001546  0E02               	movlw	2
  4264   001548  26DF               	addwf	indf2,f,c
  4265   00154A  5CDF               	subwf	indf2,w,c
  4266   00154C  6ED9               	movwf	fsr2l,c
  4267   00154E  6ADA               	clrf	fsr2h,c
  4268   001550  CFDE F011          	movff	postinc2,vfpfcnvrt@convarg
  4269   001554  CFDE F012          	movff	postinc2,vfpfcnvrt@convarg+1
  4270   001558                     
  4271                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  4272   001558  500C               	movf	vfpfcnvrt@fmt^0,w,c
  4273   00155A  6ED9               	movwf	fsr2l,c
  4274   00155C  6ADA               	clrf	fsr2h,c
  4275   00155E  2810               	incf	vfpfcnvrt@cp^0,w,c
  4276   001560  6EDF               	movwf	indf2,c
  4277   001562                     
  4278                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  4279   001562  0E20               	movlw	32
  4280   001564  6E15               	movwf	vfpfcnvrt@c^0,c
  4281                           
  4282                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  4283   001566  BE12               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  4284   001568  EFB8  F00A         	goto	u1651
  4285   00156C  EFBB  F00A         	goto	u1650
  4286   001570                     u1651:
  4287   001570  0E01               	movlw	1
  4288   001572  EFBC  F00A         	goto	u1660
  4289   001576                     u1650:
  4290   001576  0E00               	movlw	0
  4291   001578                     u1660:
  4292   001578  6E0F               	movwf	vfpfcnvrt@done^0,c
  4293   00157A                     l2475:
  4294                           
  4295                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  4296   00157A  0615               	decf	vfpfcnvrt@c^0,f,c
  4297   00157C  5015               	movf	vfpfcnvrt@c^0,w,c
  4298   00157E  0F80               	addlw	low _dbuf
  4299   001580  6ED9               	movwf	fsr2l,c
  4300   001582  6ADA               	clrf	fsr2h,c
  4301   001584  C011  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  4302   001588  C012  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  4303   00158C  0E00               	movlw	0
  4304   00158E  6E04               	movwf	(___awmod@divisor+1)^0,c
  4305   001590  0E0A               	movlw	10
  4306   001592  6E03               	movwf	___awmod@divisor^0,c
  4307   001594  EC82  F00D         	call	___awmod	;wreg free
  4308   001598  C001  F007         	movff	?___awmod,abs@a
  4309   00159C  C002  F008         	movff	?___awmod+1,abs@a+1
  4310   0015A0  ECDD  F011         	call	_abs	;wreg free
  4311   0015A4  5007               	movf	?_abs^0,w,c
  4312   0015A6  0F30               	addlw	48
  4313   0015A8  6EDF               	movwf	indf2,c
  4314   0015AA                     
  4315                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  4316   0015AA  C011  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  4317   0015AE  C012  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  4318   0015B2  0E00               	movlw	0
  4319   0015B4  6E04               	movwf	(___awdiv@divisor+1)^0,c
  4320   0015B6  0E0A               	movlw	10
  4321   0015B8  6E03               	movwf	___awdiv@divisor^0,c
  4322   0015BA  ECC8  F00C         	call	___awdiv	;wreg free
  4323   0015BE  C001  F011         	movff	?___awdiv,vfpfcnvrt@convarg
  4324   0015C2  C002  F012         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  4325   0015C6                     
  4326                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  4327   0015C6  5011               	movf	vfpfcnvrt@convarg^0,w,c
  4328   0015C8  1012               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  4329   0015CA  B4D8               	btfsc	status,2,c
  4330   0015CC  EFEA  F00A         	goto	u1671
  4331   0015D0  EFEC  F00A         	goto	u1670
  4332   0015D4                     u1671:
  4333   0015D4  EFF4  F00A         	goto	l2483
  4334   0015D8                     u1670:
  4335   0015D8  5015               	movf	vfpfcnvrt@c^0,w,c
  4336   0015DA  A4D8               	btfss	status,2,c
  4337   0015DC  EFF2  F00A         	goto	u1681
  4338   0015E0  EFF4  F00A         	goto	u1680
  4339   0015E4                     u1681:
  4340   0015E4  EFBD  F00A         	goto	l2475
  4341   0015E8                     u1680:
  4342   0015E8                     l2483:
  4343                           
  4344                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  4345   0015E8  5015               	movf	vfpfcnvrt@c^0,w,c
  4346   0015EA  B4D8               	btfsc	status,2,c
  4347   0015EC  EFFA  F00A         	goto	u1691
  4348   0015F0  EFFC  F00A         	goto	u1690
  4349   0015F4                     u1691:
  4350   0015F4  EF1B  F00B         	goto	l2493
  4351   0015F8                     u1690:
  4352   0015F8  500F               	movf	vfpfcnvrt@done^0,w,c
  4353   0015FA  B4D8               	btfsc	status,2,c
  4354   0015FC  EF02  F00B         	goto	u1701
  4355   001600  EF04  F00B         	goto	u1700
  4356   001604                     u1701:
  4357   001604  EF1B  F00B         	goto	l2493
  4358   001608                     u1700:
  4359   001608                     
  4360                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  4361   001608  0615               	decf	vfpfcnvrt@c^0,f,c
  4362   00160A  5015               	movf	vfpfcnvrt@c^0,w,c
  4363   00160C  0F80               	addlw	low _dbuf
  4364   00160E  6ED9               	movwf	fsr2l,c
  4365   001610  6ADA               	clrf	fsr2h,c
  4366   001612  0E2D               	movlw	45
  4367   001614  6EDF               	movwf	indf2,c
  4368   001616  EF1B  F00B         	goto	l2493
  4369   00161A                     l2489:
  4370                           
  4371                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  4372   00161A  5015               	movf	vfpfcnvrt@c^0,w,c
  4373   00161C  0F80               	addlw	low _dbuf
  4374   00161E  6ED9               	movwf	fsr2l,c
  4375   001620  6ADA               	clrf	fsr2h,c
  4376   001622  50DF               	movf	indf2,w,c
  4377   001624  6E0E               	movwf	??_vfpfcnvrt^0,c
  4378   001626  500E               	movf	??_vfpfcnvrt^0,w,c
  4379   001628  6E01               	movwf	fputc@c^0,c
  4380   00162A  6A02               	clrf	(fputc@c+1)^0,c
  4381   00162C  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  4382   001630  ECDA  F00D         	call	_fputc	;wreg free
  4383   001634  2A15               	incf	vfpfcnvrt@c^0,f,c
  4384   001636                     l2493:
  4385                           
  4386                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  4387   001636  0E20               	movlw	32
  4388   001638  1815               	xorwf	vfpfcnvrt@c^0,w,c
  4389   00163A  A4D8               	btfss	status,2,c
  4390   00163C  EF22  F00B         	goto	u1711
  4391   001640  EF24  F00B         	goto	u1710
  4392   001644                     u1711:
  4393   001644  EF0D  F00B         	goto	l2489
  4394   001648                     u1710:
  4395   001648  EF3D  F00B         	goto	l1209
  4396   00164C                     l2495:
  4397                           
  4398                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  4399   00164C  500C               	movf	vfpfcnvrt@fmt^0,w,c
  4400   00164E  6ED9               	movwf	fsr2l,c
  4401   001650  6ADA               	clrf	fsr2h,c
  4402   001652  2ADF               	incf	indf2,f,c
  4403   001654  EF3D  F00B         	goto	l1209
  4404   001658                     l2499:
  4405                           
  4406                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  4407   001658  500C               	movf	vfpfcnvrt@fmt^0,w,c
  4408   00165A  6ED9               	movwf	fsr2l,c
  4409   00165C  6ADA               	clrf	fsr2h,c
  4410   00165E  CFDF FFF6          	movff	indf2,tblptrl
  4411   001662                     	if	1	;There is more than 1 active tblptr byte
  4412   001662  0E10               	movlw	high __smallconst
  4413   001664  6EF7               	movwf	tblptrh,c
  4414   001666                     	endif
  4415   001666                     	if	0	;tblptru may be non-zero
  4416   001666                     	endif
  4417   001666                     	if	0	;tblptru may be non-zero
  4418   001666                     	endif
  4419   001666  0008               	tblrd		*
  4420   001668  50F5               	movf	tablat,w,c
  4421   00166A  6E01               	movwf	fputc@c^0,c
  4422   00166C  6A02               	clrf	(fputc@c+1)^0,c
  4423   00166E  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  4424   001672  ECDA  F00D         	call	_fputc	;wreg free
  4425   001676  EF26  F00B         	goto	l2495
  4426   00167A                     l1209:
  4427   00167A  0012               	return		;funcret
  4428   00167C                     __end_of_vfpfcnvrt:
  4429                           	callstack 0
  4430                           
  4431 ;; *************** function _fputc *****************
  4432 ;; Defined at:
  4433 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  c               2    0[COMRAM] int 
  4436 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  4437 ;;		 -> sprintf@f(12), 
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;		None
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  2    0[COMRAM] int 
  4442 ;; Registers used:
  4443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4449 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;Total ram usage:        8 bytes
  4454 ;; Hardware stack levels used: 1
  4455 ;; Hardware stack levels required when called: 1
  4456 ;; This function calls:
  4457 ;;		_putch
  4458 ;; This function is called by:
  4459 ;;		_vfpfcnvrt
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text25
  4464   001BB4                     __ptext25:
  4465                           	callstack 0
  4466   001BB4                     _fputc:
  4467                           	callstack 24
  4468   001BB4  5003               	movf	fputc@fp^0,w,c
  4469   001BB6  B4D8               	btfsc	status,2,c
  4470   001BB8  EFE0  F00D         	goto	u1561
  4471   001BBC  EFE2  F00D         	goto	u1560
  4472   001BC0                     u1561:
  4473   001BC0  EFEA  F00D         	goto	l2427
  4474   001BC4                     u1560:
  4475   001BC4  5003               	movf	fputc@fp^0,w,c
  4476   001BC6  A4D8               	btfss	status,2,c
  4477   001BC8  EFE8  F00D         	goto	u1571
  4478   001BCC  EFEA  F00D         	goto	u1570
  4479   001BD0                     u1571:
  4480   001BD0  EFEF  F00D         	goto	l2429
  4481   001BD4                     u1570:
  4482   001BD4                     l2427:
  4483   001BD4  5001               	movf	fputc@c^0,w,c
  4484   001BD6  EC2F  F012         	call	_putch
  4485   001BDA  EF2E  F00E         	goto	l1234
  4486   001BDE                     l2429:
  4487   001BDE  5003               	movf	fputc@fp^0,w,c
  4488   001BE0  6ED9               	movwf	fsr2l,c
  4489   001BE2  6ADA               	clrf	fsr2h,c
  4490   001BE4  0E0A               	movlw	10
  4491   001BE6  26D9               	addwf	fsr2l,f,c
  4492   001BE8  50DE               	movf	postinc2,w,c
  4493   001BEA  10DE               	iorwf	postinc2,w,c
  4494   001BEC  B4D8               	btfsc	status,2,c
  4495   001BEE  EFFB  F00D         	goto	u1581
  4496   001BF2  EFFD  F00D         	goto	u1580
  4497   001BF6                     u1581:
  4498   001BF6  EF16  F00E         	goto	l2433
  4499   001BFA                     u1580:
  4500   001BFA  5003               	movf	fputc@fp^0,w,c
  4501   001BFC  6ED9               	movwf	fsr2l,c
  4502   001BFE  6ADA               	clrf	fsr2h,c
  4503   001C00  0E0A               	movlw	10
  4504   001C02  26D9               	addwf	fsr2l,f,c
  4505   001C04  5003               	movf	fputc@fp^0,w,c
  4506   001C06  6EE1               	movwf	fsr1l,c
  4507   001C08  6AE2               	clrf	fsr1h,c
  4508   001C0A  0E03               	movlw	3
  4509   001C0C  26E1               	addwf	fsr1l,f,c
  4510   001C0E  50DE               	movf	postinc2,w,c
  4511   001C10  5CE6               	subwf	postinc1,w,c
  4512   001C12  50E6               	movf	postinc1,w,c
  4513   001C14  0A80               	xorlw	128
  4514   001C16  6E08               	movwf	(??_fputc+4)^0,c
  4515   001C18  50DE               	movf	postinc2,w,c
  4516   001C1A  0A80               	xorlw	128
  4517   001C1C  5808               	subwfb	(??_fputc+4)^0,w,c
  4518   001C1E  B0D8               	btfsc	status,0,c
  4519   001C20  EF14  F00E         	goto	u1591
  4520   001C24  EF16  F00E         	goto	u1590
  4521   001C28                     u1591:
  4522   001C28  EF2E  F00E         	goto	l1234
  4523   001C2C                     u1590:
  4524   001C2C                     l2433:
  4525   001C2C  5003               	movf	fputc@fp^0,w,c
  4526   001C2E  6ED9               	movwf	fsr2l,c
  4527   001C30  6ADA               	clrf	fsr2h,c
  4528   001C32  0E03               	movlw	3
  4529   001C34  26D9               	addwf	fsr2l,f,c
  4530   001C36  50DF               	movf	indf2,w,c
  4531   001C38  6E04               	movwf	??_fputc^0,c
  4532   001C3A  5003               	movf	fputc@fp^0,w,c
  4533   001C3C  6ED9               	movwf	fsr2l,c
  4534   001C3E  6ADA               	clrf	fsr2h,c
  4535   001C40  50DF               	movf	indf2,w,c
  4536   001C42  2404               	addwf	??_fputc^0,w,c
  4537   001C44  6ED9               	movwf	fsr2l,c
  4538   001C46  6ADA               	clrf	fsr2h,c
  4539   001C48  C001  FFDF         	movff	fputc@c,indf2
  4540   001C4C  5003               	movf	fputc@fp^0,w,c
  4541   001C4E  6ED9               	movwf	fsr2l,c
  4542   001C50  6ADA               	clrf	fsr2h,c
  4543   001C52  0E03               	movlw	3
  4544   001C54  26D9               	addwf	fsr2l,f,c
  4545   001C56  2ADE               	incf	postinc2,f,c
  4546   001C58  0E00               	movlw	0
  4547   001C5A  22DD               	addwfc	postdec2,f,c
  4548   001C5C                     l1234:
  4549   001C5C  0012               	return		;funcret
  4550   001C5E                     __end_of_fputc:
  4551                           	callstack 0
  4552                           
  4553 ;; *************** function _putch *****************
  4554 ;; Defined at:
  4555 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  c               1    wreg     unsigned char 
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;  c               1    0[COMRAM] unsigned char 
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  1    wreg      void 
  4562 ;; Registers used:
  4563 ;;		wreg
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;Total ram usage:        0 bytes
  4574 ;; Hardware stack levels used: 1
  4575 ;; This function calls:
  4576 ;;		Nothing
  4577 ;; This function is called by:
  4578 ;;		_fputc
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           	psect	text26
  4583   00245E                     __ptext26:
  4584                           	callstack 0
  4585   00245E                     _putch:
  4586                           	callstack 24
  4587   00245E  0012               	return		;funcret
  4588   002460                     __end_of_putch:
  4589                           	callstack 0
  4590                           
  4591 ;; *************** function _abs *****************
  4592 ;; Defined at:
  4593 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\abs.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  a               2    6[COMRAM] int 
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;		None
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  2    6[COMRAM] int 
  4600 ;; Registers used:
  4601 ;;		wreg, status,2, status,0
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4607 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4610 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4611 ;;Total ram usage:        4 bytes
  4612 ;; Hardware stack levels used: 1
  4613 ;; This function calls:
  4614 ;;		Nothing
  4615 ;; This function is called by:
  4616 ;;		_vfpfcnvrt
  4617 ;; This function uses a non-reentrant model
  4618 ;;
  4619                           
  4620                           	psect	text27
  4621   0023BA                     __ptext27:
  4622                           	callstack 0
  4623   0023BA                     _abs:
  4624                           	callstack 25
  4625   0023BA  BE08               	btfsc	(abs@a+1)^0,7,c
  4626   0023BC  EFE2  F011         	goto	u1601
  4627   0023C0  EFE4  F011         	goto	u1600
  4628   0023C4                     u1601:
  4629   0023C4  EFEA  F011         	goto	l1219
  4630   0023C8                     u1600:
  4631   0023C8  C007  F007         	movff	abs@a,?_abs
  4632   0023CC  C008  F008         	movff	abs@a+1,?_abs+1
  4633   0023D0  EFF6  F011         	goto	l1222
  4634   0023D4                     l1219:
  4635   0023D4  C007  F009         	movff	abs@a,??_abs
  4636   0023D8  C008  F00A         	movff	abs@a+1,??_abs+1
  4637   0023DC  1E09               	comf	??_abs^0,f,c
  4638   0023DE  1E0A               	comf	(??_abs+1)^0,f,c
  4639   0023E0  4A09               	infsnz	??_abs^0,f,c
  4640   0023E2  2A0A               	incf	(??_abs+1)^0,f,c
  4641   0023E4  C009  F007         	movff	??_abs,?_abs
  4642   0023E8  C00A  F008         	movff	??_abs+1,?_abs+1
  4643   0023EC                     l1222:
  4644   0023EC  0012               	return		;funcret
  4645   0023EE                     __end_of_abs:
  4646                           	callstack 0
  4647                           
  4648 ;; *************** function ___awmod *****************
  4649 ;; Defined at:
  4650 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  dividend        2    0[COMRAM] int 
  4653 ;;  divisor         2    2[COMRAM] int 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  sign            1    5[COMRAM] unsigned char 
  4656 ;;  counter         1    4[COMRAM] unsigned char 
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  2    0[COMRAM] int 
  4659 ;; Registers used:
  4660 ;;		wreg, status,2, status,0
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4666 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4670 ;;Total ram usage:        6 bytes
  4671 ;; Hardware stack levels used: 1
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_vfpfcnvrt
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text28
  4680   001B04                     __ptext28:
  4681                           	callstack 0
  4682   001B04                     ___awmod:
  4683                           	callstack 25
  4684   001B04  0E00               	movlw	0
  4685   001B06  6E06               	movwf	___awmod@sign^0,c
  4686   001B08  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  4687   001B0A  EF8B  F00D         	goto	u1500
  4688   001B0E  EF89  F00D         	goto	u1501
  4689   001B12                     u1501:
  4690   001B12  EF91  F00D         	goto	l2395
  4691   001B16                     u1500:
  4692   001B16  6C01               	negf	___awmod@dividend^0,c
  4693   001B18  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4694   001B1A  B0D8               	btfsc	status,0,c
  4695   001B1C  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4696   001B1E  0E01               	movlw	1
  4697   001B20  6E06               	movwf	___awmod@sign^0,c
  4698   001B22                     l2395:
  4699   001B22  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  4700   001B24  EF98  F00D         	goto	u1510
  4701   001B28  EF96  F00D         	goto	u1511
  4702   001B2C                     u1511:
  4703   001B2C  EF9C  F00D         	goto	l2399
  4704   001B30                     u1510:
  4705   001B30  6C03               	negf	___awmod@divisor^0,c
  4706   001B32  1E04               	comf	(___awmod@divisor+1)^0,f,c
  4707   001B34  B0D8               	btfsc	status,0,c
  4708   001B36  2A04               	incf	(___awmod@divisor+1)^0,f,c
  4709   001B38                     l2399:
  4710   001B38  5003               	movf	___awmod@divisor^0,w,c
  4711   001B3A  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  4712   001B3C  B4D8               	btfsc	status,2,c
  4713   001B3E  EFA3  F00D         	goto	u1521
  4714   001B42  EFA5  F00D         	goto	u1520
  4715   001B46                     u1521:
  4716   001B46  EFC9  F00D         	goto	l2415
  4717   001B4A                     u1520:
  4718   001B4A  0E01               	movlw	1
  4719   001B4C  6E05               	movwf	___awmod@counter^0,c
  4720   001B4E  EFAD  F00D         	goto	l2405
  4721   001B52                     l2403:
  4722   001B52  90D8               	bcf	status,0,c
  4723   001B54  3603               	rlcf	___awmod@divisor^0,f,c
  4724   001B56  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  4725   001B58  2A05               	incf	___awmod@counter^0,f,c
  4726   001B5A                     l2405:
  4727   001B5A  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  4728   001B5C  EFB2  F00D         	goto	u1531
  4729   001B60  EFB4  F00D         	goto	u1530
  4730   001B64                     u1531:
  4731   001B64  EFA9  F00D         	goto	l2403
  4732   001B68                     u1530:
  4733   001B68                     l2407:
  4734   001B68  5003               	movf	___awmod@divisor^0,w,c
  4735   001B6A  5C01               	subwf	___awmod@dividend^0,w,c
  4736   001B6C  5004               	movf	(___awmod@divisor+1)^0,w,c
  4737   001B6E  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  4738   001B70  A0D8               	btfss	status,0,c
  4739   001B72  EFBD  F00D         	goto	u1541
  4740   001B76  EFBF  F00D         	goto	u1540
  4741   001B7A                     u1541:
  4742   001B7A  EFC3  F00D         	goto	l2411
  4743   001B7E                     u1540:
  4744   001B7E  5003               	movf	___awmod@divisor^0,w,c
  4745   001B80  5E01               	subwf	___awmod@dividend^0,f,c
  4746   001B82  5004               	movf	(___awmod@divisor+1)^0,w,c
  4747   001B84  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  4748   001B86                     l2411:
  4749   001B86  90D8               	bcf	status,0,c
  4750   001B88  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  4751   001B8A  3203               	rrcf	___awmod@divisor^0,f,c
  4752   001B8C  2E05               	decfsz	___awmod@counter^0,f,c
  4753   001B8E  EFB4  F00D         	goto	l2407
  4754   001B92                     l2415:
  4755   001B92  5006               	movf	___awmod@sign^0,w,c
  4756   001B94  B4D8               	btfsc	status,2,c
  4757   001B96  EFCF  F00D         	goto	u1551
  4758   001B9A  EFD1  F00D         	goto	u1550
  4759   001B9E                     u1551:
  4760   001B9E  EFD5  F00D         	goto	l2419
  4761   001BA2                     u1550:
  4762   001BA2  6C01               	negf	___awmod@dividend^0,c
  4763   001BA4  1E02               	comf	(___awmod@dividend+1)^0,f,c
  4764   001BA6  B0D8               	btfsc	status,0,c
  4765   001BA8  2A02               	incf	(___awmod@dividend+1)^0,f,c
  4766   001BAA                     l2419:
  4767   001BAA  C001  F001         	movff	___awmod@dividend,?___awmod
  4768   001BAE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4769   001BB2  0012               	return		;funcret
  4770   001BB4                     __end_of___awmod:
  4771                           	callstack 0
  4772                           
  4773 ;; *************** function ___awdiv *****************
  4774 ;; Defined at:
  4775 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  dividend        2    0[COMRAM] int 
  4778 ;;  divisor         2    2[COMRAM] int 
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;  quotient        2    6[COMRAM] int 
  4781 ;;  sign            1    5[COMRAM] unsigned char 
  4782 ;;  counter         1    4[COMRAM] unsigned char 
  4783 ;; Return value:  Size  Location     Type
  4784 ;;                  2    0[COMRAM] int 
  4785 ;; Registers used:
  4786 ;;		wreg, status,2, status,0
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4792 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;Total ram usage:        8 bytes
  4797 ;; Hardware stack levels used: 1
  4798 ;; This function calls:
  4799 ;;		Nothing
  4800 ;; This function is called by:
  4801 ;;		_vfpfcnvrt
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text29
  4806   001990                     __ptext29:
  4807                           	callstack 0
  4808   001990                     ___awdiv:
  4809                           	callstack 25
  4810   001990  0E00               	movlw	0
  4811   001992  6E06               	movwf	___awdiv@sign^0,c
  4812   001994  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  4813   001996  EFD1  F00C         	goto	u1440
  4814   00199A  EFCF  F00C         	goto	u1441
  4815   00199E                     u1441:
  4816   00199E  EFD7  F00C         	goto	l2351
  4817   0019A2                     u1440:
  4818   0019A2  6C03               	negf	___awdiv@divisor^0,c
  4819   0019A4  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  4820   0019A6  B0D8               	btfsc	status,0,c
  4821   0019A8  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  4822   0019AA  0E01               	movlw	1
  4823   0019AC  6E06               	movwf	___awdiv@sign^0,c
  4824   0019AE                     l2351:
  4825   0019AE  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  4826   0019B0  EFDE  F00C         	goto	u1450
  4827   0019B4  EFDC  F00C         	goto	u1451
  4828   0019B8                     u1451:
  4829   0019B8  EFE4  F00C         	goto	l2357
  4830   0019BC                     u1450:
  4831   0019BC  6C01               	negf	___awdiv@dividend^0,c
  4832   0019BE  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  4833   0019C0  B0D8               	btfsc	status,0,c
  4834   0019C2  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  4835   0019C4  0E01               	movlw	1
  4836   0019C6  1A06               	xorwf	___awdiv@sign^0,f,c
  4837   0019C8                     l2357:
  4838   0019C8  0E00               	movlw	0
  4839   0019CA  6E08               	movwf	(___awdiv@quotient+1)^0,c
  4840   0019CC  0E00               	movlw	0
  4841   0019CE  6E07               	movwf	___awdiv@quotient^0,c
  4842   0019D0  5003               	movf	___awdiv@divisor^0,w,c
  4843   0019D2  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  4844   0019D4  B4D8               	btfsc	status,2,c
  4845   0019D6  EFEF  F00C         	goto	u1461
  4846   0019DA  EFF1  F00C         	goto	u1460
  4847   0019DE                     u1461:
  4848   0019DE  EF19  F00D         	goto	l2379
  4849   0019E2                     u1460:
  4850   0019E2  0E01               	movlw	1
  4851   0019E4  6E05               	movwf	___awdiv@counter^0,c
  4852   0019E6  EFF9  F00C         	goto	l2365
  4853   0019EA                     l2363:
  4854   0019EA  90D8               	bcf	status,0,c
  4855   0019EC  3603               	rlcf	___awdiv@divisor^0,f,c
  4856   0019EE  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  4857   0019F0  2A05               	incf	___awdiv@counter^0,f,c
  4858   0019F2                     l2365:
  4859   0019F2  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  4860   0019F4  EFFE  F00C         	goto	u1471
  4861   0019F8  EF00  F00D         	goto	u1470
  4862   0019FC                     u1471:
  4863   0019FC  EFF5  F00C         	goto	l2363
  4864   001A00                     u1470:
  4865   001A00                     l2367:
  4866   001A00  90D8               	bcf	status,0,c
  4867   001A02  3607               	rlcf	___awdiv@quotient^0,f,c
  4868   001A04  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  4869   001A06  5003               	movf	___awdiv@divisor^0,w,c
  4870   001A08  5C01               	subwf	___awdiv@dividend^0,w,c
  4871   001A0A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4872   001A0C  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  4873   001A0E  A0D8               	btfss	status,0,c
  4874   001A10  EF0C  F00D         	goto	u1481
  4875   001A14  EF0E  F00D         	goto	u1480
  4876   001A18                     u1481:
  4877   001A18  EF13  F00D         	goto	l2375
  4878   001A1C                     u1480:
  4879   001A1C  5003               	movf	___awdiv@divisor^0,w,c
  4880   001A1E  5E01               	subwf	___awdiv@dividend^0,f,c
  4881   001A20  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4882   001A22  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  4883   001A24  8007               	bsf	___awdiv@quotient^0,0,c
  4884   001A26                     l2375:
  4885   001A26  90D8               	bcf	status,0,c
  4886   001A28  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  4887   001A2A  3203               	rrcf	___awdiv@divisor^0,f,c
  4888   001A2C  2E05               	decfsz	___awdiv@counter^0,f,c
  4889   001A2E  EF00  F00D         	goto	l2367
  4890   001A32                     l2379:
  4891   001A32  5006               	movf	___awdiv@sign^0,w,c
  4892   001A34  B4D8               	btfsc	status,2,c
  4893   001A36  EF1F  F00D         	goto	u1491
  4894   001A3A  EF21  F00D         	goto	u1490
  4895   001A3E                     u1491:
  4896   001A3E  EF25  F00D         	goto	l2383
  4897   001A42                     u1490:
  4898   001A42  6C07               	negf	___awdiv@quotient^0,c
  4899   001A44  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  4900   001A46  B0D8               	btfsc	status,0,c
  4901   001A48  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  4902   001A4A                     l2383:
  4903   001A4A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4904   001A4E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4905   001A52  0012               	return		;funcret
  4906   001A54                     __end_of___awdiv:
  4907                           	callstack 0
  4908                           
  4909 ;; *************** function _memset *****************
  4910 ;; Defined at:
  4911 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\memset.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;  dest            1    0[COMRAM] PTR void 
  4914 ;;		 -> str(14), 
  4915 ;;  c               2    1[COMRAM] int 
  4916 ;;  n               2    3[COMRAM] unsigned int 
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;  p               1    5[COMRAM] PTR unsigned char 
  4919 ;;		 -> str(14), 
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  1    wreg      PTR void 
  4922 ;; Registers used:
  4923 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4929 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;Total ram usage:        6 bytes
  4934 ;; Hardware stack levels used: 1
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_convert_uint8_to_string
  4939 ;;		_convert_uint32_to_string
  4940 ;;		_convert_uint16_to_string
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           	psect	text30
  4945   0023EE                     __ptext30:
  4946                           	callstack 0
  4947   0023EE                     _memset:
  4948                           	callstack 28
  4949   0023EE  C001  F006         	movff	memset@dest,memset@p
  4950   0023F2  EF01  F012         	goto	l2625
  4951   0023F6                     l2621:
  4952   0023F6  5006               	movf	memset@p^0,w,c
  4953   0023F8  6ED9               	movwf	fsr2l,c
  4954   0023FA  6ADA               	clrf	fsr2h,c
  4955   0023FC  C002  FFDF         	movff	memset@c,indf2
  4956   002400  2A06               	incf	memset@p^0,f,c
  4957   002402                     l2625:
  4958   002402  0604               	decf	memset@n^0,f,c
  4959   002404  A0D8               	btfss	status,0,c
  4960   002406  0605               	decf	(memset@n+1)^0,f,c
  4961   002408  2804               	incf	memset@n^0,w,c
  4962   00240A  E106               	bnz	u1871
  4963   00240C  2805               	incf	(memset@n+1)^0,w,c
  4964   00240E  A4D8               	btfss	status,2,c
  4965   002410  EF0C  F012         	goto	u1871
  4966   002414  EF0E  F012         	goto	u1870
  4967   002418                     u1871:
  4968   002418  EFFB  F011         	goto	l2621
  4969   00241C                     u1870:
  4970   00241C  0012               	return		;funcret
  4971   00241E                     __end_of_memset:
  4972                           	callstack 0
  4973                           
  4974                           	psect	rparam
  4975   000000                     tosu	equ	0xFFF
  4976                           tosh	equ	0xFFE
  4977                           tosl	equ	0xFFD
  4978                           stkptr	equ	0xFFC
  4979                           pclatu	equ	0xFFB
  4980                           pclath	equ	0xFFA
  4981                           pcl	equ	0xFF9
  4982                           tblptru	equ	0xFF8
  4983                           tblptrh	equ	0xFF7
  4984                           tblptrl	equ	0xFF6
  4985                           tablat	equ	0xFF5
  4986                           prodh	equ	0xFF4
  4987                           prodl	equ	0xFF3
  4988                           indf0	equ	0xFEF
  4989                           postinc0	equ	0xFEE
  4990                           postdec0	equ	0xFED
  4991                           preinc0	equ	0xFEC
  4992                           plusw0	equ	0xFEB
  4993                           fsr0h	equ	0xFEA
  4994                           fsr0l	equ	0xFE9
  4995                           wreg	equ	0xFE8
  4996                           indf1	equ	0xFE7
  4997                           postinc1	equ	0xFE6
  4998                           postdec1	equ	0xFE5
  4999                           preinc1	equ	0xFE4
  5000                           plusw1	equ	0xFE3
  5001                           fsr1h	equ	0xFE2
  5002                           fsr1l	equ	0xFE1
  5003                           bsr	equ	0xFE0
  5004                           indf2	equ	0xFDF
  5005                           postinc2	equ	0xFDE
  5006                           postdec2	equ	0xFDD
  5007                           preinc2	equ	0xFDC
  5008                           plusw2	equ	0xFDB
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8

Data Sizes:
    Strings     3
    Constant    16
    Data        64
    BSS         83
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     127
    BANK0           128      0      89
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    convert_uint32_to_string@str	PTR unsigned char  size(1) Largest target is 14
		 -> str(COMRAM[14]), 

    convert_uint8_to_string@str	PTR unsigned char  size(1) Largest target is 14
		 -> str(COMRAM[14]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    gpio_pin_direction_init@_pin_config	PTR const struct . size(1) Largest target is 10
		 -> keypad_obj(COMRAM[8]), keypad_obj$keypad_c_pins(COMRAM[4]), keypad_obj$keypad_r_pins(COMRAM[4]), lcd_obj(COMRAM[10]), 
		 -> lcd_obj$lcd_data(COMRAM[8]), 

    gpio_pin_read_logic@_pin_config	PTR const struct . size(1) Largest target is 8
		 -> keypad_obj(COMRAM[8]), keypad_obj$keypad_c_pins(COMRAM[4]), 

    gpio_pin_read_logic@logic	PTR enum E2978 size(1) Largest target is 1
		 -> keypad_get_value@col_logic(COMRAM[1]), 

    gpio_pin_write_logic@_pin_config	PTR const struct . size(1) Largest target is 10
		 -> keypad_obj(COMRAM[8]), keypad_obj$keypad_r_pins(COMRAM[4]), lcd_obj(COMRAM[10]), lcd_obj$lcd_data(COMRAM[8]), 

    keypad_get_value@keypad_obj	PTR const struct . size(1) Largest target is 8
		 -> keypad_obj(COMRAM[8]), 

    keypad_get_value@value	PTR unsigned char  size(1) Largest target is 1
		 -> asignment(COMRAM[1]), first_digit1(COMRAM[1]), first_digit2(COMRAM[1]), on_off(COMRAM[1]), 
		 -> operator(COMRAM[1]), second_digit1(COMRAM[1]), second_digit2(COMRAM[1]), 

    keypad_init@keypad_obj	PTR const struct . size(1) Largest target is 8
		 -> keypad_obj(COMRAM[8]), 

    lat_reg	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATA(BITBIGSFRll[1]), LATB(BITBIGSFRlh[1]), LATC(BITBIGSFRlh[1]), LATD(BITBIGSFRlh[1]), 
		 -> LATE(BITBIGSFRlh[1]), 

    lcd_8bit_init@lcd	PTR const struct . size(1) Largest target is 10
		 -> lcd_obj(COMRAM[10]), 

    lcd_8bit_send_char_data@lcd	PTR const struct . size(1) Largest target is 10
		 -> lcd_obj(COMRAM[10]), 

    lcd_8bit_send_char_data_pos@lcd	PTR const struct . size(1) Largest target is 10
		 -> lcd_obj(COMRAM[10]), 

    lcd_8bit_send_command@lcd	PTR const struct . size(1) Largest target is 10
		 -> lcd_obj(COMRAM[10]), 

    lcd_8bit_send_enable@lcd	PTR const struct . size(1) Largest target is 10
		 -> lcd_obj(COMRAM[10]), 

    lcd_8bit_send_string@lcd	PTR const struct . size(1) Largest target is 10
		 -> lcd_obj(COMRAM[10]), 

    lcd_8bit_send_string@str	PTR unsigned char  size(1) Largest target is 14
		 -> str(COMRAM[14]), 

    lcd_8bit_send_string_pos@lcd	PTR const struct . size(1) Largest target is 10
		 -> lcd_obj(COMRAM[10]), 

    lcd_8bit_send_string_pos@str	PTR unsigned char  size(1) Largest target is 14
		 -> str(COMRAM[14]), 

    lcd_8bit_set_cursor@lcd	PTR const struct . size(1) Largest target is 10
		 -> lcd_obj(COMRAM[10]), 

    memset@dest	PTR void  size(1) Largest target is 14
		 -> str(COMRAM[14]), 

    memset@p	PTR unsigned char  size(1) Largest target is 14
		 -> str(COMRAM[14]), 

    port_reg	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTA(BITBIGSFRll[1]), PORTB(BITBIGSFRll[1]), PORTC(BITBIGSFRll[1]), PORTD(BITBIGSFRll[1]), 
		 -> PORTE(BITBIGSFRll[1]), 

    S1091$buffer	PTR unsigned char  size(2) Largest target is 0

    S1091$source	PTR const unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(1) Largest target is 14
		 -> str(COMRAM[14]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), STR_2(CODE[3]), STR_3(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 11
		 -> convert_uint16_to_string@Temp_String(COMRAM[6]), convert_uint32_to_string@Temp_String(COMRAM[11]), convert_uint8_to_string@Temp_String(COMRAM[4]), 

    tris_reg	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISA(BITBIGSFRll[1]), TRISB(BITBIGSFRh[1]), TRISC(BITBIGSFRh[1]), TRISD(BITBIGSFRh[1]), 
		 -> TRISE(BITBIGSFRh[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), STR_2(CODE[3]), STR_3(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), STR_2(CODE[3]), STR_3(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), STR_2(CODE[3]), STR_3(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_div_two_numbers
    _sub_two_numbers->_convert_uint32_to_string
    _mult_two_numbers->_convert_uint32_to_string
    _lcd_8bit_send_char_data_pos->_lcd_8bit_set_cursor
    _lcd_8bit_init->_lcd_8bit_send_command
    _keypad_init->_gpio_pin_write_logic
    _div_two_numbers->_convert_uint32_to_string
    _convert_uint32_to_string->_sprintf
    _clear_lcd->_keypad_get_value
    _clear_lcd->_lcd_8bit_send_command
    _keypad_get_value->_gpio_pin_write_logic
    _add_two_numbers->_convert_uint8_to_string
    _lcd_8bit_send_string_pos->_lcd_8bit_set_cursor
    _lcd_8bit_set_cursor->_lcd_8bit_send_command
    _lcd_8bit_send_command->_lcd_8bit_send_enable
    _lcd_8bit_send_string->_lcd_8bit_send_char_data
    _lcd_8bit_send_char_data->_lcd_8bit_send_enable
    _lcd_8bit_send_enable->_gpio_pin_write_logic
    _convert_uint8_to_string->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  229576
                                             65 COMRAM     2     2      0
                    _add_two_numbers
                          _clear_lcd
                    _div_two_numbers
                   _keypad_get_value
                        _keypad_init
                      _lcd_8bit_init
        _lcd_8bit_send_char_data_pos
              _lcd_8bit_send_command
                   _mult_two_numbers
                    _sub_two_numbers
 ---------------------------------------------------------------------------------
 (1) _sub_two_numbers                                      2     2      0   32755
                                             62 COMRAM     2     2      0
           _convert_uint32_to_string
           _lcd_8bit_send_string_pos
 ---------------------------------------------------------------------------------
 (1) _mult_two_numbers                                     2     2      0   32755
                                             62 COMRAM     2     2      0
           _convert_uint32_to_string
           _lcd_8bit_send_string_pos
 ---------------------------------------------------------------------------------
 (1) _lcd_8bit_send_char_data_pos                          5     1      4   28209
                                             22 COMRAM     5     1      4
            _lcd_8bit_send_char_data
                _lcd_8bit_set_cursor
 ---------------------------------------------------------------------------------
 (1) _lcd_8bit_init                                        3     2      1   21576
                                             16 COMRAM     3     2      1
            _gpio_pin_direction_init
               _gpio_pin_write_logic
              _lcd_8bit_send_command
 ---------------------------------------------------------------------------------
 (1) _keypad_init                                          4     3      1    7365
                                              8 COMRAM     4     3      1
            _gpio_pin_direction_init
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_direction_init                              7     6      1    1623
                                              0 COMRAM     7     6      1
 ---------------------------------------------------------------------------------
 (1) _div_two_numbers                                      3     3      0   32993
                                             62 COMRAM     3     3      0
                            ___lbdiv
           _convert_uint32_to_string
           _lcd_8bit_send_string_pos
 ---------------------------------------------------------------------------------
 (2) _convert_uint32_to_string                            18    13      5    5102
                                             44 COMRAM    18    13      5
                             _memset
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     238
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _clear_lcd                                            2     2      0   20774
                                             16 COMRAM     2     2      0
                   _keypad_get_value
              _lcd_8bit_send_command
 ---------------------------------------------------------------------------------
 (1) _keypad_get_value                                     8     6      2    7177
                                              8 COMRAM     8     6      2
                _gpio_pin_read_logic
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_read_logic                                  7     5      2     308
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _add_two_numbers                                      2     2      0   32375
                                             52 COMRAM     2     2      0
            _convert_uint8_to_string
           _lcd_8bit_send_string_pos
 ---------------------------------------------------------------------------------
 (2) _lcd_8bit_send_string_pos                             5     1      4   27607
                                             22 COMRAM     5     1      4
               _lcd_8bit_send_string
                _lcd_8bit_set_cursor
 ---------------------------------------------------------------------------------
 (3) _lcd_8bit_set_cursor                                  6     3      3   14302
                                             16 COMRAM     6     3      3
              _lcd_8bit_send_command
 ---------------------------------------------------------------------------------
 (4) _lcd_8bit_send_command                                6     4      2   13597
                                             10 COMRAM     6     4      2
               _gpio_pin_write_logic
               _lcd_8bit_send_enable
 ---------------------------------------------------------------------------------
 (3) _lcd_8bit_send_string                                 3     1      2   11909
                                             16 COMRAM     3     1      2
            _lcd_8bit_send_char_data
 ---------------------------------------------------------------------------------
 (4) _lcd_8bit_send_char_data                              6     4      2   11621
                                             10 COMRAM     6     4      2
               _gpio_pin_write_logic
               _lcd_8bit_send_enable
 ---------------------------------------------------------------------------------
 (5) _lcd_8bit_send_enable                                 2     1      1    5591
                                              8 COMRAM     2     1      1
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (6) _gpio_pin_write_logic                                 8     6      2    5347
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _convert_uint8_to_string                              8     7      1    4722
                                             44 COMRAM     8     7      1
                             _memset
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    15      6    3591
                                             25 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             4     1      3    2936
                                             21 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           11     8      3    2586
                                             10 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3     782
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _memset                                               6     1      5     780
                                              0 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _add_two_numbers
     _convert_uint8_to_string
       _memset
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
     _lcd_8bit_send_string_pos
       _lcd_8bit_send_string
         _lcd_8bit_send_char_data
           _gpio_pin_write_logic
           _lcd_8bit_send_enable
             _gpio_pin_write_logic
       _lcd_8bit_set_cursor
         _lcd_8bit_send_command
           _gpio_pin_write_logic
           _lcd_8bit_send_enable
   _clear_lcd
     _keypad_get_value
       _gpio_pin_read_logic
       _gpio_pin_write_logic
     _lcd_8bit_send_command
   _div_two_numbers
     ___lbdiv
     _convert_uint32_to_string
       _memset
       _sprintf
     _lcd_8bit_send_string_pos
   _keypad_get_value
   _keypad_init
     _gpio_pin_direction_init
     _gpio_pin_write_logic
   _lcd_8bit_init
     _gpio_pin_direction_init
     _gpio_pin_write_logic
     _lcd_8bit_send_command
   _lcd_8bit_send_char_data_pos
     _lcd_8bit_send_char_data
     _lcd_8bit_set_cursor
   _lcd_8bit_send_command
   _mult_two_numbers
     _convert_uint32_to_string
     _lcd_8bit_send_string_pos
   _sub_two_numbers
     _convert_uint32_to_string
     _lcd_8bit_send_string_pos

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      40        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      59       5       69.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      7F       1      100.0%
BITBIGSFRh          69      0       0      36        0.0%
BITBIGSFRlh          4      0       0      37        0.0%
BITBIGSFRll          4      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D8      39        0.0%
DATA                 0      0      D8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Aug 02 16:45:23 2024

                                 l63 102A                                   l90 22CC  
                                 l93 21E2                                   l96 223A  
                                 l99 20D2                         ___awdiv@sign 0006  
         keypad_get_value@keypad_obj 0009          div_two_numbers@first_number 0040  
                                l102 2016                                  l104 2074  
                                l401 218A                                  l163 17A0  
                                l182 18B0                                  l408 2286  
                                l280 198C                                  l425 1E40  
                                l274 1EC6                                  l460 230A  
                                l372 14C2                                  l189 1D00  
                                l445 1DA2                                  l391 2384  
                                l472 1B02                                  l288 198E  
                                l386 1FB2                                  l731 1BB2  
                                l379 1F3C                                  l718 1A52  
                                l893 212E                                  _abs 23BA  
                                _ret 007E                                  _str 004E  
                       ___awmod@sign 0006            ?_lcd_8bit_send_string_pos 0017  
                                wreg 0FE8         __end_of_lcd_8bit_send_enable 230C  
        __end_of_lcd_8bit_set_cursor 1B04            ?_convert_uint32_to_string 002D  
       __end_of_lcd_8bit_send_string 218C                                 ?_abs 0007  
                               l1222 23EC                                 l1215 2348  
                               l1209 167A                                 l1234 1C5C  
                               l1219 23D4                                 l1171 23B8  
                               l1164 241C                                 l1245 245E  
                               l3103 120E                                 l2401 1B4A  
                               l2321 17A2                                 l3105 1216  
                               l3113 122E                                 l2411 1B86  
                               l2403 1B52                                 l2323 17B6  
                               l3107 121E                                 l3115 1268  
                               l3051 103C                                 l2413 1B8C  
                               l2405 1B5A                                 l2333 1884  
                               l2325 17D6                                 l3109 1226  
                               l3061 1094                                 l3053 104A  
                               l2351 19AE                                 l2343 1990  
                               l2407 1B68                                 l2415 1B92  
                               l2431 1BFA                                 l2423 1BB4  
                               l2327 17DE                                 l2335 18AE  
                               l2511 1EF0                                 l3071 10EE  
                               l3063 10A4                                 l3055 105A  
                               l3047 1016                                 l2361 19E2  
                               l2353 19BC                                 l2345 1994  
                               l2417 1BA2                                 l2409 1B7E  
                               l2433 1C2C                                 l2425 1BC4  
                               l2329 1834                                 l2441 22CE  
                               l2521 1F20                                 l2505 1EC8  
                               l3081 114E                                 l3073 1104  
                               l3065 10BA                                 l3057 1070  
                               l3049 1038                                 l2371 1A1C  
                               l2363 19EA                                 l2355 19C4  
                               l2347 19A2                                 l2419 1BAA  
                               l2427 1BD4                                 l2451 2308  
                               l2443 22DE                                 l2531 1F52  
                               l2611 2170                                 l2603 2130  
                               l2523 1F30                                 l2507 1EDC  
                               l3091 11AE                                 l3083 1164  
                               l3075 111A                                 l3067 10D0  
                               l3059 1086                                 l2621 23F6  
                               l2381 1A42                                 l2373 1A24  
                               l2365 19F2                                 l2357 19C8  
                               l2349 19AA                                 l2437 23BA  
                               l2429 1BDE                                 l2461 14FA  
                               l2701 1E10                                 l2445 22E6  
                               l2541 1F6A                                 l2533 1F5A  
                               l2613 2172                                 l2605 2144  
                               l2517 1EF4                                 l2525 1F3A  
                               l2509 1EE4                                 l3093 11BC  
                               l3085 1172                                 l3077 1128  
                               l3069 10DE                                 l2623 2400  
                               l2383 1A4A                                 l2375 1A26  
                               l2367 1A00                                 l2359 19D0  
                               l2391 1B16                                 l2439 23C8  
                               l2471 1558                                 l2463 14FE  
                               l2455 14C4                                 l2631 2396  
                               l2703 1E24                                 l2447 22F2  
                               l2543 1F94                                 l2535 1F66  
                               l2615 2188                                 l2607 2154  
                               l2519 1F1E                                 l2711 223C  
                               l3351 1788                                 l3095 11CC  
                               l3087 1182                                 l3079 1138  
                               l2625 2402                                 l2377 1A2C  
                               l2369 1A06                                 l2393 1B1E  
                               l2481 15D8                                 l2473 1562  
                               l2465 1508                                 l2457 14E6  
                               l2553 230C                                 l2633 239E  
                               l2705 1E26                                 l2449 22FA  
                               l2545 1F96                                 l2529 1F3E  
                               l2609 215C                                 l3353 1ADA  
                               l2713 224C                                 l2641 18D2  
                               l3097 11E2                                 l3089 1198  
                               l2619 23EE                                 l2379 1A32  
                               l2395 1B22                                 l2387 1B04  
                               l2491 1634                                 l2483 15E8  
                               l2475 157A                                 l2467 1524  
                               l2459 14EE                                 l2555 2314  
                               l2635 23AE                                 l2627 2386  
                               l2707 1E3E                                 l3355 1898  
                               l2547 1FA6                                 l2715 225C  
                               l2571 1CAA                                 l2563 1C5E  
                               l2651 18EE                                 l2643 18E2  
                               l2811 20D6                                 l2731 1D26  
                               l2723 1D02                                 l3099 11F8  
                               l2397 1B30                                 l2389 1B08  
                               l2485 15F8                                 l2493 1636  
                               l2477 15AA                                 l2469 1540  
                               l2557 2324                                 l2629 238E  
                               l2549 1FB0                                 l2581 1A70  
                               l2717 2264                                 l2901 22AA  
                               l2573 1CFE                                 l2565 1C72  
                               l2661 1902                                 l2645 18EA  
                               l2821 20F8                                 l2813 20DA  
                               l2741 1D86                                 l2733 1D2E  
                               l2725 1D06                                 l3349 1242  
                               l2399 1B38                                 l2487 1608  
                               l2479 15C6                                 l2495 164C  
                               l2559 2340                                 l2583 1A76  
                               l2719 2284                                 l2903 22B6  
                               l2567 1C82                                 l2671 1924  
                               l2663 1912                                 l2639 18B2  
                               l2831 2126                                 l2823 2106  
                               l2815 20EA                                 l2743 1D88  
                               l2735 1D46                                 l2727 1D12  
                               l2751 1690                                 l2911 21CC  
                               l2489 161A                                 l2585 1A8A  
                               l2593 1AC6                                 l2577 1A54  
                               l2569 1CA2                                 l2681 1976  
                               l2673 1934                                 l2665 1920  
                               l2657 18F2                                 l2825 211C  
                               l2817 20F2                                 l2833 212C  
                               l2737 1D52                                 l2745 1DA0  
                               l2729 1D16                                 l2921 208E  
                               l2761 175E                                 l2753 16B0  
                               l2841 128C                                 l2913 21E4  
                               l2905 218C                                 l2499 1658  
                               l2691 1DBE                                 l2587 1A9E  
                               l2595 1B00                                 l2579 1A68  
                               l2683 1978                                 l2675 1944  
                               l2659 1900                                 l2931 2034  
                               l2827 2120                                 l2819 20F6  
                               l2739 1D72                                 l2923 20A0  
                               l2755 16B8                                 l2763 179E  
                               l2843 1424                                 l2851 14C0  
                               l2915 2208                                 l2907 21A4  
                               l2693 1DCE                                 l2589 1AB2  
                               l2685 1988                                 l2677 1964  
                               l2941 2064                                 l2933 204A  
                               l2829 2122                                 l2925 20BC  
                               l2757 170E                                 l2749 167C  
                               l2845 1432                                 l2837 1274  
                               l2917 2224                                 l2909 21B0  
                               l2695 1DD6                                 l2679 1966  
                               l2943 2068                                 l2935 2058  
                               l2927 2016                                 l2919 2076  
                               l2871 1EA0                                 l2855 1E42  
                               l2847 144C                                 l2839 1284  
                               l2697 1DEE                                 l2689 1DA6  
                               l2945 206C                                 l2937 205C  
                               l2929 2024                                 l2881 1EB4  
                               l2865 1E66                                 l2857 1E5A  
                               l2849 1458                                 l2699 1DFA  
                               l2947 2070                                 l2939 2060  
                               l2867 1E8E                                 l2883 1EC4  
                               l2859 1E62                                 l2891 2362  
                               l2877 1EA4                                 l2869 1E90  
                               l2893 2382                                 l2879 1EB2  
                               l2887 234A                                 l2897 2288  
                               l2889 235A                                 l2899 22A0  
                               STR_1 1011                                 STR_3 1011  
                               u2000 1DA0                                 u2001 1D9C  
                               u2010 1690                                 u2011 168C  
                               u2100 20EA                                 u2020 16B0  
                               u2101 20E6                                 u2021 16AC  
                               u2110 2106                                 u2111 2102  
                               u1400 17B6                                 u2120 211C  
                               u1401 17B2                                 u2121 2118  
                               u1410 17D6                                 u2050 1774  
                               u2034 16D6                                 u2130 1284  
                               u1411 17D2                                 u2051 176E  
                               u2035 16D2                                 u2131 1280  
                               u1500 1B16                                 u2060 1776  
                               u2044 172C                                 u2140 1E5A  
                               u1501 1B12                                 u2045 1728  
                               u2141 1E56                                 _LATA 0F89  
                               u1510 1B30                                 u2150 1EA0  
                               _LATB 0F8A                                 u1511 1B2C  
                               u2151 1E9C                                 _LATC 0F8B  
                               u1440 19A2                                 u1520 1B4A  
                               u1600 23C8                                 u1424 17FC  
                               u2160 1EC4                                 u2400 105A  
                               _LATD 0F8C                                 u1441 199E  
                               u1521 1B46                                 u1601 23C4  
                               u1425 17F8                                 u2161 1EC0  
                               u2401 1056                                 _LATE 0F8D  
                               u1450 19BC                                 u1530 1B68  
                               u1434 1852                                 u1610 22DE  
                               u2170 235A                                 u2410 10A4  
                               u1451 19B8                                 u1531 1B64  
                               u1435 184E                                 u1611 22DA  
                               u2171 2356                                 u2411 10A0  
                               u1460 19E2                                 u1540 1B7E  
                               u1700 1608                                 u1620 14E6  
                               u2180 2034                                 u2420 10EE  
                               u1461 19DE                                 u1541 1B7A  
                               u1701 1604                                 u1621 14E2  
                               u2181 2030                                 u2421 10EA  
                               u1470 1A00                                 u1550 1BA2  
                               u1710 1648                                 u1630 1524  
                               u2430 1138                                 u1471 19FC  
                               u1551 1B9E                                 u1711 1644  
                               u1631 1520                                 u2431 1134  
                               u1480 1A1C                                 u1560 1BC4  
                               u1640 1540                                 u1720 1EDC  
                               u1800 1C82                                 u2440 1182  
                               u1481 1A18                                 u1561 1BC0  
                               u1641 153C                                 u1721 1ED8  
                               u1801 1C7E                                 u2441 117E  
                               u1490 1A42                                 u1570 1BD4  
                               u1650 1576                                 u1810 1CA2  
                               u2450 11CC                                 u1491 1A3E  
                               u1571 1BD0                                 u1651 1570  
                               u1811 1C9E                                 u2451 11C8  
                               u1580 1BFA                                 u1660 1578  
                               u1740 1F30                                 u1900 1912  
                               u2460 120A                                 u1581 1BF6  
                               u1741 1F2C                                 u1901 190E  
                               u2461 1206                                 u1590 1C2C  
                               u1670 15D8                                 u1750 1F52  
                               u1734 1F0E                                 u1830 1A68  
                               u1910 1944                                 u1591 1C28  
                               u1671 15D4                                 u1751 1F4E  
                               u1735 1F0A                                 u1831 1A64  
                               u1911 1940                                 u1680 15E8  
                               u1840 2144                                 u1824 1CF2  
                               u1920 1976                                 u1681 15E4  
                               u1841 2140                                 u1825 1CEE  
                               u1921 1972                                 u1690 15F8  
                               u1770 1FA6                                 u1850 2154  
                               u1930 1988                                 u1691 15F4  
                               u1771 1FA2                                 u1851 2150  
                               u1931 1984                                 u1780 2340  
                               u1940 1DCE                                 u1764 1F84  
                               u1860 2188                                 u1781 233C  
                               u1941 1DCA                                 u1765 1F80  
                               u1861 2184                                 u1870 241C  
                               u1950 1E3E                                 u1790 1C72  
                               u1871 2418                                 u1951 1E3A  
                               u1791 1C6E                                 u2807 145A  
                               u2727 1064                                 u1960 224C  
                               u1880 18D2                                 u1961 2248  
                               u1881 18CE                                 u2817 203E  
                               u2737 10AE                                 u1970 225C  
                               u1890 18E2                                 u2827 22F4  
                               u1971 2258                                 u1891 18DE  
                               u2747 10F8                                 u1981 1D0C  
                               u2757 1142                                 u1990 1D26  
                               u1991 1D22                                 u2767 118C  
                               u2777 11D6                                 u2787 142A  
                               u2797 1444                                 abs@a 0007  
       div_two_numbers@second_number 0041         sub_two_numbers@second_number 0040  
                               _dbuf 0080       gpio_pin_read_logic@_pin_config 0001  
                               _main 1016                                 _prec 0046  
                               fsr1h 0FE2                                 fsr2h 0FDA  
                               indf1 0FE7                                 indf2 0FDF  
                               fsr1l 0FE1                                 fsr2l 0FD9  
           ?_gpio_pin_direction_init 0001                                 prodh 0FF4  
                               prodl 0FF3                                 start 0000  
      __end_of_lcd_8bit_send_command 1F3E                         ___param_bank 0000  
                              ??_abs 0009                 _gpio_pin_write_logic 17A2  
                              ?_main 0001                      __end_of___awdiv 1A54  
                    __end_of___lbdiv 2130                      __end_of___awmod 1BB4  
                    ___awdiv@divisor 0003                      ___awdiv@counter 0005  
                       vfpfcnvrt@fmt 000C                                _PORTA 0F80  
                              _PORTB 0F81                                _PORTC 0F82  
                              _PORTD 0F83                                _PORTE 0F84  
                              _TRISA 0F92                                _TRISB 0F93  
                              _TRISC 0F94                                _TRISD 0F95  
                              _TRISE 0F96                     ?_div_two_numbers 0001  
           __end_of_keypad_get_value 1990                                _flags 004A  
                       ?_keypad_init 0009                                _fputc 1BB4  
                              _value 004C             ?_lcd_8bit_send_char_data 000B  
__end_of_lcd_8bit_send_char_data_pos 2386          _lcd_8bit_send_char_data_pos 234A  
                              _width 0044                                _putch 245E  
                              tablat 0FF5                                status 0FD8  
                    __end_of_sprintf 23BA                      ___lbdiv@divisor 0001  
                    ___lbdiv@counter 0003        ??_lcd_8bit_send_char_data_pos 001B  
                    __initialization 1FB4                  keypad_get_value@ret 000C  
                    _add_two_numbers 2288                         __end_of_main 1274  
              ?_gpio_pin_write_logic 0001               lcd_8bit_set_cursor@lcd 0011  
             lcd_8bit_set_cursor@ret 0016               lcd_8bit_set_cursor@row 0012  
           gpio_pin_read_logic@logic 0002            keypad_get_value@c_counter 0010  
                             ??_main 0042                        __activetblptr 0002  
                             ?_fputc 0001                     ___awdiv@dividend 0001  
                             ?_putch 0001                      _sub_two_numbers 218C  
          keypad_get_value@col_logic 000D                        vfpfcnvrt@done 000F  
convert_uint32_to_string@Temp_String 0032            keypad_get_value@l_counter 000E  
                       vfprintf@cfmt 0019                 _lcd_8bit_send_enable 22CE  
                          ??___awdiv 0005                            ??___lbdiv 0002  
                          ??___awmod 0005            keypad_get_value@r_counter 000F  
               _lcd_8bit_send_string 2130                               _memset 23EE  
                             clear_0 1FFA                               clear_1 2006  
                             _on_off 005C                     ___awdiv@quotient 0007  
                    ___awmod@divisor 0003                               _retpad 004B  
                             isa$std 0001                               _result 0048  
                    ___awmod@counter 0005       lcd_8bit_send_char_data_pos@col 0019  
     lcd_8bit_send_char_data_pos@lcd 0017       lcd_8bit_send_char_data_pos@ret 001B  
        lcd_8bit_send_string_pos@col 0019          lcd_8bit_send_string_pos@lcd 0017  
     lcd_8bit_send_char_data_pos@row 0018          lcd_8bit_send_string_pos@ret 001B  
        lcd_8bit_send_string_pos@row 0018          lcd_8bit_send_string_pos@str 001A  
                   _mult_two_numbers 21E4                               fputc@c 0001  
              __end_of_lcd_8bit_init 14C4                         __pdataCOMRAM 0062  
                       __mediumconst 0000                               tblptrh 0FF7  
                             tblptrl 0FF6                               tblptru 0FF8  
                             putch@c 0001                     __end_of_vfprintf 234A  
                          ??_sprintf 0020                     ___lbdiv@dividend 0002  
         lcd_8bit_send_command@count 0010              _convert_uint8_to_string 1DA4  
                         __accesstop 0080              __end_of__initialization 200C  
          keypad_u8check_press@F3072 00B5              __end_of_add_two_numbers 22CE  
                      ___rparam_used 0001           convert_uint8_to_string@ret 0033  
         convert_uint8_to_string@str 002D                ?_lcd_8bit_send_enable 0009  
             ??_gpio_pin_write_logic 0003                       __pcstackCOMRAM 0001  
                       __pidataBANK0 241E                        __end_of_fputc 1C5E  
              ?_lcd_8bit_send_string 0011                        __end_of_putch 2460  
                   ___lbdiv@quotient 0004              __end_of_sub_two_numbers 21E4  
                   lcd_8bit_init@lcd 0011                     lcd_8bit_init@ret 0013  
                            ??_fputc 0004                              ??_putch 0001  
                         __pbssBANK0 0080          sub_two_numbers@first_number 003F  
                         __pnvCOMRAM 007E   gpio_pin_direction_init@_pin_config 0001  
       lcd_8bit_send_char_data@count 0010          convert_uint32_to_string@ret 003D  
        convert_uint32_to_string@str 0031                              ?_memset 0001  
                  ?_keypad_get_value 0009            ??_convert_uint8_to_string 002E  
                 ??_keypad_get_value 000B                           _btn_values 1001  
                  __end_of_clear_lcd 2076                     ?_add_two_numbers 0001  
             ??_lcd_8bit_send_enable 000A                              __Hparam 0000  
                            __Lparam 0000               ??_lcd_8bit_send_string 0013  
              _lcd_8bit_send_command 1EC8                              ___awdiv 1990  
                _gpio_pin_read_logic 1C5E                              ___lbdiv 20D4  
                            ___awmod 1B04                            ?_vfprintf 0016  
                       __psmallconst 1000                              __pcinit 1FB4  
                            __ramtop 1000             _lcd_8bit_send_string_pos 223C  
                            __ptext0 1016                              __ptext1 218C  
                            __ptext2 21E4                              __ptext3 234A  
                            __ptext4 1274                              __ptext5 1E42  
                            __ptext6 167C                              __ptext7 2076  
                            __ptext8 1D02                              __ptext9 20D4  
                         _keypad_obj 0076                              _lcd_obj 006C  
                            _lat_reg 0062             _convert_uint32_to_string 1D02  
                   ___awmod@dividend 0001                     ?_sub_two_numbers 0001  
               ?_gpio_pin_read_logic 0001      lcd_8bit_send_char_data_pos@data 001A  
              keypad_init@keypad_obj 0009                              _sprintf 2386  
               end_of_initialization 200C                              fputc@fp 0003  
                            memset@c 0002                              memset@n 0004  
                            memset@p 0006                        __Lmediumconst 0000  
           __end_of_mult_two_numbers 223C                    __end_of_vfpfcnvrt 167C  
    __end_of_convert_uint8_to_string 1E42                              postdec1 0FE5  
                            postdec2 0FDD                              postinc0 0FEE  
                            postinc1 0FE6                              postinc2 0FDE  
                   vfpfcnvrt@convarg 0011                           ??_vfprintf 0019  
              ??_gpio_pin_read_logic 0003               ?_lcd_8bit_send_command 000B  
              keypad_get_value@value 000A        convert_uint32_to_string@F3223 00A0  
      convert_uint16_to_string@F3216 00AB              _gpio_pin_direction_init 167C  
                        vfpfcnvrt@ap 000D                          vfpfcnvrt@cp 0010  
                        vfpfcnvrt@fp 000B                        __pidataCOMRAM 2442  
                     __end_of_memset 241E                  start_initialization 1FB4  
      convert_uint32_to_string@value 002D                         _first_digit1 007F  
                       _first_digit2 0060                          __end_of_abs 23EE  
                      _second_digit1 0061                        _second_digit2 005F  
            _lcd_8bit_send_char_data 1F3E                    ??_div_two_numbers 003F  
                        vfprintf@fmt 0017        mult_two_numbers@second_number 0040  
                        __pdataBANK0 00B5         convert_uint8_to_string@F3209 00B1  
                           ??_memset 0006                  _lcd_8bit_set_cursor 1A54  
                         memset@dest 0001             lcd_8bit_send_command@lcd 000B  
           lcd_8bit_send_command@ret 000F   convert_uint8_to_string@DataCounter 0034  
                       _keybad_value 004D                          __pbssCOMRAM 0044  
       convert_uint8_to_string@value 0032                        ??_keypad_init 000A  
       ?_lcd_8bit_send_char_data_pos 0017                 ?_lcd_8bit_set_cursor 0011  
               keypad_init@c_counter 000B           ??_lcd_8bit_send_string_pos 001B  
                          _clear_lcd 2016            ??_gpio_pin_direction_init 0002  
        lcd_8bit_send_char_data@data 000C           ??_convert_uint32_to_string 0032  
    gpio_pin_write_logic@_pin_config 0001                             ?___awdiv 0001  
                           ?___lbdiv 0001                             ?___awmod 0001  
                          _asignment 005D            gpio_pin_write_logic@logic 0002  
                        __smallconst 1000                        _lcd_8bit_init 1274  
        add_two_numbers@first_number 0035                             ?_sprintf 001A  
              ??_lcd_8bit_set_cursor 0014            ??_lcd_8bit_send_char_data 000D  
               keypad_init@r_counter 000C                  __end_of_keypad_init 1EC8  
                  ?_mult_two_numbers 0001                           ?_clear_lcd 0001  
                 ??_mult_two_numbers 003F                            _vfpfcnvrt 14C4  
                     ?_lcd_8bit_init 0011             ?_convert_uint8_to_string 002D  
    __end_of_gpio_pin_direction_init 17A2            lcd_8bit_set_cursor@column 0013  
                         vfpfcnvrt@c 0015              gpio_pin_write_logic@ret 0008  
                          copy_data0 1FC8                            copy_data1 1FE8  
            lcd_8bit_send_enable@lcd 0009              lcd_8bit_send_enable@ret 000A  
             gpio_pin_read_logic@ret 0007              ??_lcd_8bit_send_command 000D  
                           __Hrparam 0000         mult_two_numbers@first_number 003F  
                         vfprintf@ap 0018                             __Lrparam 0000  
                         vfprintf@fp 0016                           ?_vfpfcnvrt 000B  
    __end_of_lcd_8bit_send_char_data 1FB4                   __end_of_btn_values 1011  
        __end_of_gpio_pin_read_logic 1D02                           sprintf@fmt 001B  
       add_two_numbers@second_number 0036           lcd_8bit_send_char_data@lcd 000B  
         lcd_8bit_send_char_data@ret 000F                             __ptext10 2016  
                           __ptext11 18B2                             __ptext20 17A2  
                           __ptext12 1C5E                             __ptext21 1DA4  
                           __ptext13 2288                             __ptext30 23EE  
                           __ptext22 2386                             __ptext14 223C  
                           __ptext23 230C                             __ptext15 1A54  
                           __ptext24 14C4                             __ptext16 1EC8  
                           __ptext25 1BB4                             __ptext17 2130  
                           __ptext26 245E                             __ptext18 1F3E  
                           __ptext27 23BA                             __ptext19 22CE  
                           __ptext28 1B04                             __ptext29 1990  
                        _keypad_init 1E42                      _div_two_numbers 2076  
   __end_of_lcd_8bit_send_string_pos 2288  convert_uint32_to_string@DataCounter 003E  
                        ??_clear_lcd 0011                     _keypad_get_value 18B2  
                           _operator 005E     __end_of_convert_uint32_to_string 1DA4  
                           isa$xinst 0000                             _port_reg 00C5  
                           _vfprintf 230C                             _tris_reg 00CF  
                    ??_lcd_8bit_init 0012                    ??_add_two_numbers 0035  
       __end_of_gpio_pin_write_logic 18B2                            sprintf@ap 0020  
                  ??_sub_two_numbers 003F   convert_uint8_to_string@Temp_String 002E  
                        ??_vfpfcnvrt 000E                             sprintf@f 0021  
                           sprintf@s 001A              __end_of_div_two_numbers 20D4  
         gpio_pin_direction_init@ret 0007              lcd_8bit_send_string@lcd 0011  
            lcd_8bit_send_string@ret 0013              lcd_8bit_send_string@str 0012  
                     keypad_init@ret 000A         lcd_8bit_send_command@command 000C  
